name: Build and deploy to Netlify

on:
  pull_request:
    branches:
      - main
      - master

# example borrowed from https://pythonpackaging.info/06-Continuous-Integration.html
# and https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-python
# and https://autobencoder.com/2020-08-24-conda-actions/

jobs:
  blogdown:
    name: Render-Blog
    runs-on: ubuntu-latest
    container: linogaliana/python-datascientist:latest
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
          ref: ${{ github.head_ref }}
      - name: Install rmarkdown
        env:
          GITHUB_PAT: ${{ secrets.PAT_GITHUB }}
        run: |
          Rscript -e 'install.packages(c("rmarkdown"))'
      - name: install hugo
        run: Rscript -e 'blogdown::install_hugo("0.83.0", force = TRUE)'
      - name: Install Python
        run: |
          Rscript -e 'print(blogdown:::hugo_version())'
          Rscript -e "install.packages(c('remotes', 'reticulate'))"
          Rscript -e "install.packages(c('here'))"
      - shell: bash -l {0}
        run: |
          conda info
          conda list
      - name: Render blog
        run: |
          Rscript -e 'source("./build/build_light.R")'
      - name: Install npm
        if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
        uses: actions/setup-node@v2          
        with:
          node-version: '12'        
      - name: Deploy to Netlify
        if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
        # NETLIFY_AUTH_TOKEN and NETLIFY_SITE_ID added in the repo's secrets
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          BRANCHE_REF: ${{ github.event.pull_request.head.ref }}
        run: |
          npm init -y
          npm install --unsafe-perm=true netlify-cli -g
          netlify init
          netlify deploy --alias=${BRANCHE_REF} --dir="public" --message "Preview deploy from ${BRANCHE_REF}"
      - uses: actions/upload-artifact@v1
        with:
          name: public
          path: public/
      - uses: actions/upload-artifact@v1
        with:
          name: content
          path: content/
      - name: Test it
        if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
        env:
          GITHUB_PAT: ${{ secrets.PAT_GITHUB }}
          BRANCHE_REF: ${{ github.event.pull_request.head.ref }}
        run: |
         git config --local user.name "${{ github.actor }}"
         git config --local user.email "${{ github.actor }}@users.noreply.github.com"
         # git config user.name github-actions
         # git config user.email github-actions@github.com
         git remote set-url origin https://${{ github.actor }}:${GITHUB_PAT}@github.com/${{ github.repository }}    
         git checkout ${BRANCHE_REF}
         ls ./content/course/manipulation
         rm -rf "./temp"
         mkdir -p temp
         mkdir -p notebooks
         python cleanmd.py
         pip install jupytext
         cd ./temp
         ls -R
         for i in $(find . -type f \( -iname "*.Rmd" \)); do \
            j=$"{$i%.Rmd}.md" ;
            echo "$j" ;
            if [ -e $j ]
            then
              echo "Converting $j"; \
              #jupytext --to py --execute "$i"
              jupytext --to ipynb "$j" ;
              k=$"{$j%.md}.ipynb" ;
              replacement="../notebooks" ;
              outfile="${k/\./$replacement}" ;
              echo "$outfile" ;
              mkdir -p "$outfile" ;
              cp "$k" "$outfile" ;
            fi            
         done
         cd .. ;
         git status;
         git add *.ipynb;
         git commit -m "Automated changes";
      - uses: actions/upload-artifact@v2
        with:
          name: Notebooks
          path: temp/
          
    

## Informations additionnelles {-}

:::: {.content-visible when-profile="fr"}

::: {.callout-note collapse="true"}
## Environnement `Python` {{< fa brands python >}}

Ce site a été construit automatiquement par le biais d'une action `Github` {{< fa brands github >}} utilisant le logiciel de publication reproductible `Quarto` {{< iconify simple-icons:quarto >}} (version {{< version >}}). 

L'environnement {{< fa brands python >}} utilisé pour obtenir les résultats est reproductible par le biais d'[uv](https://docs.astral.sh/uv/guides/install-python/). Le fichier `pyproject.toml` utilisé pour construire cet environnement est disponible sur le dépôt [`linogaliana/python-datascientist`](https://github.com/linogaliana/python-datascientist/blob/main/pyproject.toml)

```{.python include="../../pyproject.toml" filename="pyproject.toml" code-fold="true" code-summary="pyproject.toml"}
```

Pour utiliser exactement le même environnement (version de `Python` et _packages_), se reporter à la [documentation d'`uv`](https://docs.astral.sh/uv/pip/environments/).

:::



::: {.callout-note collapse="true"}
## Historique du fichier {{< fa brands git-alt >}}

```{ojs}
//| echo: false
md`Ce fichier a été modifié __${table_commit.length}__ fois depuis sa création le ${creation_string} (dernière modification le ${last_modification_string})`
```

```{ojs}
//| echo: false
html`<div>${git_history_table}</div>`
```

```{ojs}
//| echo: false
html`<div>${git_history_plot}</div>`
```

{{< rev-history >}}

:::

::::

:::: {.content-visible when-profile="en"}


::: {.callout-note collapse="true"}
## `Python` environment {{< fa brands python >}}

This site was built automatically through a `Github` {{< fa brands github >}} action using the `Quarto` {{< iconify simple-icons:quarto >}} reproducible publishing software (version {{< version >}}). 

The {{< fa brands python >}} environment used to obtain the results is reproducible via [uv](https://docs.astral.sh/uv/guides/install-python/). The `pyproject.toml` file used to build this environment is available on the [`linogaliana/python-datascientist`](https://github.com/linogaliana/python-datascientist/blob/main/pyproject.toml) repository

```{.python include="../../pyproject.toml" filename="pyproject.toml" code-fold="true" code-summary="pyproject.toml"}
```

To use exactly the same environment (version of `Python` and _packages_), please refer to the [documentation for `uv`](https://docs.astral.sh/uv/pip/environments/).

:::

::: {.callout-note collapse="true"}
## File history {{< fa brands git-alt >}}

```{ojs}
//| echo: false
md`This file has been modified __${table_commit.length}__ times since its creation on ${creation_string} (last modified on ${last_modification_string})`
```

```{ojs}
//| echo: false
html`<div>${git_history_table}</div>`
```

```{ojs}
//| echo: false
html`<div>${git_history_plot}</div>`
```


{{< rev-history >}}

:::

::::





```{ojs}
//| echo: false
creation = d3.min(
  table_commit.map(d => new Date(d.Date))
)

last_modification = d3.max(
  table_commit.map(d => new Date(d.Date))
)

creation_string = creation.toLocaleString("fr", {
  "day": "numeric",
  "month": "long",
  "year": "numeric"
})

last_modification_string = last_modification.toLocaleString("fr", {
  "day": "numeric",
  "month": "long",
  "year": "numeric"
})

```







```{ojs}
//| echo: false
//| output: false
git_history_table = Inputs.table(
  table_commit,
  {
    format: {
      SHA: x => md`[${x}](${github_repo}/commit/${x})`,
      Description: x => md`${replacePullRequestPattern(x, github_repo)}`,
      /*Date: x => x.toLocaleString("fr", {
        "month": "numeric",
        "day": "numeric",
        "year": "numeric"
        })
      */
    }
  }
)
```

```{ojs}
//| echo: false
//| output: false
git_history_plot = Plot.plot({
  marks: [
    Plot.ruleY([0], {stroke: "royalblue"}),
    Plot.dot(
          table_commit,
          Plot.pointerX({x: (d) => new Date(d.date), y: 0, stroke: "red"})),
    Plot.dot(table_commit, {x: (d) => new Date(d.Date), y: 0, fill: "royalblue"})
  ]
})
```


```{ojs}
//| echo: false
function replacePullRequestPattern(inputString, githubRepo) {
    // Use a regular expression to match the pattern #digit
    var pattern = /#(\d+)/g;

    // Replace the pattern with ${github_repo}/pull/#digit
    var replacedString = inputString.replace(pattern, '[#$1](' + githubRepo + '/pull/$1)');

    return replacedString;
}
```


```{ojs}
//| echo: false
github_repo = "https://github.com/linogaliana/python-datascientist"
```

```{ojs}
//| echo: false
table_commit = {

// Get the HTML table by its class name
var table = document.querySelector('.commit-table');

// Check if the table exists
if (table) {
    // Initialize an array to store the table data
    var dataArray = [];

    // Extract headers from the first row
    var headers = [];
    for (var i = 0; i < table.rows[0].cells.length; i++) {
        headers.push(table.rows[0].cells[i].textContent.trim());
    }

    // Iterate through the rows, starting from the second row
    for (var i = 1; i < table.rows.length; i++) {
        var row = table.rows[i];
        var rowData = {};

        // Iterate through the cells in the row
        for (var j = 0; j < row.cells.length; j++) {
            // Use headers as keys and cell content as values
            rowData[headers[j]] = row.cells[j].textContent.trim();
        }

        // Push the rowData object to the dataArray
        dataArray.push(rowData);
    }
  }

  return dataArray

}
```

```{ojs}
//| echo: false
//| output: false

// Get the element with class 'git-details'
{
  var gitDetails = document.querySelector('.commit-table');

  // Check if the element exists
  if (gitDetails) {
      // Hide the element
      gitDetails.style.display = 'none';
  }
}
```

```{ojs}
//| echo: false
Plot = require('@observablehq/plot@0.6.12/dist/plot.umd.min.js')
```




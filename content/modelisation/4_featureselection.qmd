---
title: "Sélection de variables : une introduction"
date: 2023-07-15T13:00:00Z
draft: false
weight: 50
slug: lasso
type: book
tags:
  - scikit
  - machine learning
  - US elections
  - LASSO
  - feature selection
  - Modélisation
  - Exercice
categories:
  - Modélisation
  - Exercice
description: |
  L'accès à des bases de données de plus en plus riches permet
  des modélisations de plus en plus raffinées. Cependant,
  les modèles parcimonieux sont généralement préférables
  aux modèles extrêmement riches pour obtenir de bonnes
  performances sur un nouveau jeu de données (prédictions
  _out-of-sample_). Les méthodes de sélection de variables,
  notamment le [`LASSO`](https://fr.wikipedia.org/wiki/Lasso_(statistiques)),
  permettent de sélectionner le signal le plus
  pertinent dilué au milieu du bruit lorsqu'on a beaucoup d'information à
  traiter.  
image: featured_selection.png
echo: false
---




::: {.content-visible when-format="html"}
{{< include "../../build/_printBadges.qmd" >}}
:::




{{< include _import_data_ml.qmd >}}


Jusqu'à présent, nous avons supposé que les variables utiles à la prévision du
vote Républicain étaient connues du modélisateur. Nous n'avons ainsi exploité qu'une partie
limitée des variables disponibles dans nos données. Néanmoins, outre le fléau
computationnel que représenterait la construction d'un modèle avec un grand
nombre de variables, le choix d'un nombre restreint de variables
(modèle parcimonieux) limite le risque de sur-apprentissage.

Comment, dès lors, choisir le bon nombre de variables et la meilleure
combinaison de ces variables ? Il existe de multiples méthodes, parmi lesquelles :

* se fonder sur des critères statistiques de performance qui pénalisent les
modèles non parcimonieux. Par exemple, le BIC.
* techniques de *backward elimination*.
* construire des modèles pour lesquels la statistique d'intérêt pénalise l'absence
de parcimonie (ce que l'on va souhaiter faire ici). 

Dans ce chapitre, nous allons présenter
les enjeux principaux de la sélection
de variables par le biais du LASSO.

Nous allons utiliser par la suite les fonctions ou
packages suivants :

```{python}
#| echo: true
import numpy as np
from sklearn.svm import LinearSVC
from sklearn.feature_selection import SelectFromModel
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Lasso
import sklearn.metrics
from sklearn.linear_model import LinearRegression
import matplotlib.cm as cm
import matplotlib.pyplot as plt
from sklearn.linear_model import lasso_path
import seaborn as sns
```


## Principe du LASSO

### Principe général

La classe des modèles de *feature selection* est ainsi très vaste et regroupe
un ensemble très diverse de modèles. Nous allons nous focaliser sur le LASSO
(*Least Absolute Shrinkage and Selection Operator*)
qui est une extension de la régression linéaire qui vise à sélectionner des
modèles *sparses*. Ce type de modèle est central dans le champ du 
*Compressed sensing* (où on emploie plutôt le terme 
de *L1-regularization* que de LASSO). Le LASSO est un cas particulier des
régressions elastic-net dont un autre cas fameux est la régression *ridge*.
Contrairement à la régression linéaire classique, elles fonctionnent également
dans un cadre où $p>N$, c'est à dire où le nombre de régresseurs est très grand puisque supérieur
au nombre d'observations.

### Pénalisation

En adoptant le principe d'une fonction objectif pénalisée,
le LASSO permet de fixer un certain nombre de coefficients à 0.
Les variables dont la norme est non nulle passent ainsi le test de sélection. 

::: {.cell .markdown}
```{=html}
<div class="alert alert-warning" role="alert">
<h3 class="alert-heading"><i class="fa-solid fa-pencil"></i> Hint</h3>
```
Le LASSO est un programme d'optimisation sous contrainte. On cherche à trouver l'estimateur $\beta$ qui minimise l'erreur quadratique (régression linéaire) sous une contrainte additionnelle régularisant les paramètres:
$$
\min_{\beta} \frac{1}{2}\mathbb{E}\bigg( \big( X\beta - y  \big)^2 \bigg) \\
\text{s.t. } \sum_{j=1}^p |\beta_j| \leq t
$$
Ce programme se reformule grâce au Lagrangien est permet ainsi d'obtenir un programme de minimisation plus maniable : 
$$
\beta^{\text{LASSO}} = \arg \min_{\beta} \frac{1}{2}\mathbb{E}\bigg( \big( X\beta - y  \big)^2 \bigg) + \alpha \sum_{j=1}^p |\beta_j| = \arg \min_{\beta} ||y-X\beta||_{2}^{2} + \lambda ||\beta||_1
$$
où $\lambda$ est une réécriture de la régularisation précédente qui dépend de $\alpha$. La force de la pénalité appliquée aux modèles non parcimonieux dépend de ce paramètre. 

```{=html}
</div>
```
:::

### Première régression LASSO

Comme nous cherchons à trouver les
meilleurs prédicteurs du vote Républicain,
nous allons retirer les variables
qui sont dérivables directement de celles-ci: les scores des concurrents !


```{python}
#| echo: true
import pandas as pd

df2 = pd.DataFrame(votes.drop(columns='geometry'))
df2 = df2.loc[
  :,
  ~df2.columns.str.endswith(
    ('_democrat','_green','_other', 'winner', 'per_point_diff', 'per_dem')
    )
  ]


df2 = df2.loc[:,~df2.columns.duplicated()]
```

Dans cet exercice, nous utiliserons
également une fonction pour extraire 
les variables sélectionnées par le LASSO, 
la voici

```{python}
#| echo: true
#| code-fold: true
#| code-summary: Fonction pour récupérer les variables validées par l'étape de sélection

from sklearn.linear_model import Lasso
from sklearn.pipeline import Pipeline

def extract_features_selected(lasso: Pipeline, preprocessing_step_name: str = 'preprocess') -> pd.Series:
    """
    Extracts selected features based on the coefficients obtained from Lasso regression.

    Parameters:
    - lasso (Pipeline): The scikit-learn pipeline containing a trained Lasso regression model.
    - preprocessing_step_name (str): The name of the preprocessing step in the pipeline. Default is 'preprocess'.

    Returns:
    - pd.Series: A Pandas Series containing selected features with non-zero coefficients.
    """
    # Check if lasso object is provided
    if not isinstance(lasso, Pipeline):
        raise ValueError("The provided lasso object is not a scikit-learn pipeline.")

    # Extract the final transformer from the pipeline
    lasso_model = lasso[-1]

    # Check if lasso_model is a Lasso regression model
    if not isinstance(lasso_model, Lasso):
        raise ValueError("The final step of the pipeline is not a Lasso regression model.")

    # Check if lasso model has 'coef_' attribute
    if not hasattr(lasso_model, 'coef_'):
        raise ValueError("The provided Lasso regression model does not have 'coef_' attribute. "
                         "Make sure it is a trained Lasso regression model.")

    # Get feature names from the preprocessing step
    features_preprocessing = lasso[preprocessing_step_name].get_feature_names_out()

    # Extract selected features based on non-zero coefficients
    features_selec = pd.Series(features_preprocessing[np.abs(lasso_model.coef_) > 0])

    return features_selec
```

::: {.cell .markdown}
```{=html}
<div class="alert alert-success" role="alert">
<h3 class="alert-heading"><i class="fa-solid fa-pencil"></i> Exercice 1 : Premier LASSO</h3>
```

On cherche toujours à prédire la variable `per_gop`. Avant de faire notre estimation, nous allons créer certains objets intermédiaires qui seront utilisés pour
définir notre _pipeline_:

1. Dans notre `DataFrame`, remplacer les valeurs infinies par des `NaN`. 

2. Créez un échantillon d'entraînement et un échantillon test. 

Maintenant nous pouvons passer au coeur de la définition de notre _pipeline_. 
[Cet exemple](https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html) pourra servir de source
d'inspiration, ainsi que [celui-ci](https://www.kaggle.com/code/bextuychiev/lasso-regression-with-pipelines-tutorial). 

3. Créer en premier lieu les étapes
de _preprocessing_ pour notre modèle. 
Pour cela, il est d'usage de séparer les étapes appliquées aux variables numériques continues des autres variables, dites
catégorielles.

- Pour les __variables numériques__, imputer à la moyenne puis effectuer une standardisation ;
- Pour les __variables catégorielles__, les techniques de régression linéaires impliquent d'utiliser une expansion par _one hot encoding_. Avant de faire ce _one hot encoding_, faire une imputation par valeur la plus fréquente.

4. Finaliser le _pipeline_ en ajoutant l'étape d'estimation puis estimer un modèle LASSO pénalisé avec $\alpha = 0.1$. 

En supposant que votre _pipeline_ soit dans un objet nommé `pipeline` et que la dernière étape
est nommée `model`, vous pouvez 
directement accéder à cette étape en utilisant l'objet `pipeline['model']`

5. Afficher les valeurs des coefficients. Quelles variables ont une valeur non nulle ?
4. Montrer que les variables sélectionnées sont parfois très corrélées. 
5. Comparer la performance de ce modèle parcimonieux avec celle d'un modèle avec plus de variables 

<details>
<summary>
Aide pour la question 1
</summary>

```python
# Remplacer les infinis par des NaN
df2.replace([np.inf, -np.inf], np.nan, inplace=True)
```

</details>


<details>
<summary>
Aide pour la question 3
</summary>

La définition d'un pipeline 
suit la structure suivante,

```python
numeric_pipeline = Pipeline(steps=[
    ('impute', #definir la methode d'imputation ici
     ),
    ('scale', #definir la méthode de standardisation ici
    )
])

categorical_pipeline = #adapter le template

# a vous de définir en amont numerical_features et categorical_features
preprocessor = ColumnTransformer(transformers=[
    ('number', numeric_pipeline, numerical_features),
    ('category', categorical_pipeline, categorical_features)
])
```

</details>


```{=html}
</div>
```
:::


```{python}
#| output: false
df2.replace([np.inf, -np.inf], np.nan, inplace=True)
```

```{python}
#| output: false

#2. Echantillon d'entraînement et échantillon test
X_train, X_test, y_train, y_test = train_test_split(
    df2.drop(["per_gop"], axis = 1),
    100*df2[['per_gop']], test_size=0.2, random_state=0
)
```


```{python}
from sklearn.preprocessing import OneHotEncoder
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.compose import make_column_transformer, ColumnTransformer

numerical_features = X_train.select_dtypes(include='number').columns.tolist()
categorical_features = X_train.select_dtypes(exclude='number').columns.tolist()


numeric_pipeline = Pipeline(steps=[
    ('impute', SimpleImputer(strategy='mean')),
    ('scale', StandardScaler())
])

categorical_pipeline = Pipeline(steps=[
    ('impute', SimpleImputer(strategy='most_frequent')),
    ('one-hot', OneHotEncoder(handle_unknown='ignore', sparse=False))
])


preprocessor = ColumnTransformer(transformers=[
    ('number', numeric_pipeline, numerical_features),
    ('category', categorical_pipeline, categorical_features)
])
```

Le _pipeline_ de _preprocessing_ (question 3) prend la forme suivante:

```{python}
preprocessor
```

```{python}
# Question 4
model = Lasso(fit_intercept=True, alpha = 0.1)  

lasso_pipeline = Pipeline(steps=[
    ('preprocess', preprocessor),
    ('model', model)
])
lasso_pipeline.fit(X_train, y_train)
```

Le _pipeline_ prend la forme suivante, une
fois finalisé (question 4):

```{python}
lasso_pipeline
```


A l'issue de la question 5,
les variables sélectionnées sont :

```{python}
# Question 5
lasso1 = lasso_pipeline['model']
features_selec = extract_features_selected(lasso_pipeline)
#np.abs(lasso1.coef_)
```


Le modèle est assez parcimonieux puisqu'un sous-échantillon de nos
variables initiales (d'autant que nos variables catégorielles
ont été éclatées en de nombreuses variables
par le _one hot encoding_)

```{python}
features_selec.str.replace("(number__|category__)", "", regex = True)
```

Certaines variables font sens, comme les variables d'éducation par exemple. Notamment, un des meilleurs prédicteurs pour le score des Républicains en 2020 est... le score des Républicains (et mécaniquement des démocrates) en 2016 et 2012.

Par ailleurs, on sélectionne des variables redondantes. Une phase plus approfondie de nettoyage des données serait en réalité nécessaire.


```{python}
#| output: false
#4. Corrélations entre les variables sélectionnées

features_selected = features_selec.loc[features_selec.str.startswith("number__")].str.replace("number__", "", regex = True)

corr = df2.loc[: , features_selected].corr()

plt.figure()
p = corr.style.background_gradient(cmap='coolwarm', axis=None).format('{:.2f}')
p
```


```{python}
#| output: false

from sklearn.metrics import mean_squared_error, r2_score

def print_regression_metrics(y_true, y_pred, model_name=""):
    """
    Print RMSE and R^2 for regression analysis.

    Parameters:
    - y_true (array-like): The true target values.
    - y_pred (array-like): The predicted target values.
    - model_name (str): Name of the regression model. Default is an empty string.
    """
    rmse = mean_squared_error(y_true, y_pred, squared=False)
    rsq = r2_score(y_true, y_pred)

    print(f"{model_name} Regression:")
    print(f"RMSE: {rmse:.4f}")
    print(f"R^2: {rsq:.4f}")
    
    return rmse, rsq


# 5. Faire une régression linéaire parcimonieuse et non parcimonieuse

## Régression parcimonieuse
lasso_pipeline = Pipeline(steps=[
    ('preprocess', ColumnTransformer(transformers=[
        ('number', numeric_pipeline, numerical_features)
    ])),
    ('model', Lasso())
])

lasso_pipeline.fit(X_train, y_train)

y_pred_parci = lasso_pipeline.predict(X_test)
rmse_parci, rsq_parci = print_regression_metrics(
  y_test, y_pred_parci,
  "Régression parcimonieuse"
) 


## Régression non parcimonieuse
ols_pipeline = Pipeline(steps=[
    ('preprocess', ColumnTransformer(transformers=[
        ('number', numeric_pipeline, numerical_features)
    ])),
    ('scaler', StandardScaler()),  # Add scaling for LinearRegression
    ('model', LinearRegression())
])

ols_pipeline.fit(X_train, y_train)

y_pred_nonparci = ols_pipeline.predict(X_test)

rmse_nonparci, rsq_nonparci = print_regression_metrics(
  y_test, y_pred_nonparci,
  "Régression non parcimonieuse"
) 
```


Le modèle parcimonieux est (légèrement) plus performant:

```{python}
#| output: asis
pd.DataFrame({
  "parcimonieux": [rmse_parci, rsq_parci, len(features_selected)],
  "non parcimonieux": [rmse_nonparci, rsq_nonparci, ols_pipeline[-1].coef_.shape[1] + 1]},
  index = ['RMSE', 'R2', 'Nombre de paramètres']
)
```

D'ailleurs, on pourrait déjà remarquer
que régresser le score de 2020 sur celui
de 2016 amène déjà à de très bonnes
performances explicatives, ce qui suggère
que le vote se comporte comme un processus
autorégressif:

```{python}
#| echo: true
import statsmodels.api as sm
import statsmodels.formula.api as smf
smf.ols("per_gop ~ share_2016_republican", data = df2).fit().summary()
```

## Rôle de la pénalisation $\alpha$ sur la sélection de variables

Nous avons jusqu'à présent pris l'hyperparamètre $\alpha$
comme donné. Quel rôle joue-t-il dans les conclusions de
notre modélisation ? Pour cela, nous pouvons 
explorer l'effet que sa valeur peut avoir sur le nombre
de variables passant l'étape de sélection.  

Pour le prochain
exercice, nous allons considérer exclusivement
les variables quantitatives pour accélérer les calculs. 
En effet, avec des modèles non parcimonieux, les multiples
modalités de nos variables catégorielles rendent le problème
d'optimisation difficilement tractable. 

```{python}
#| echo: true
preprocessed_features = pd.DataFrame(
      numeric_pipeline.fit_transform(
        X_train.drop(columns = categorical_features)
      )
  )
```



::: {.cell .markdown}
```{=html}
<div class="alert alert-success" role="alert">
<h3 class="alert-heading"><i class="fa-solid fa-pencil"></i> Exercice 2 : Rôle du paramètre de pénalisation</h3>
```

Utiliser la fonction `lasso_path` pour évaluer le nombre de paramètres sélectionnés par LASSO lorsque $\alpha$
varie (parcourir $\alpha \in [0.001,0.01,0.02,0.025,0.05,0.1,0.25,0.5,0.8,1.0]$ ). 


```{=html}
</div>
```
:::


```{python}
#| output: false

#6. Utilisation de lasso_path
my_alphas = np.array([0.001,0.01,0.02,0.025,0.05,0.1,0.25,0.5,0.8,1.0])

alpha_for_path, coefs_lasso, _ = lasso_path(
  preprocessed_features,
  y_train,
  alphas=my_alphas)
#print(coefs_lasso)
nb_non_zero = np.apply_along_axis(func1d=np.count_nonzero,arr=coefs_lasso,axis=0)
nb_non_zero = pd.DataFrame(
  nb_non_zero
).sum(axis = 0)

## graphique

sns.set_style("whitegrid")
plt.figure()
p = sns.lineplot(y=nb_non_zero, x=alpha_for_path)
p.set(title = r"Number variables and regularization parameter ($\alpha$)", xlabel=r'$\alpha$', ylabel='Nb. de variables')
```

La relation que vous devriez obtenir entre $\alpha$ et 
le nombre de paramètres est celle-ci:

```{python}
p.figure.get_figure()
```

On voit que plus $\alpha$ est élevé, moins le modèle sélectionne de variables.



```{python}
#| output: false
p.figure.get_figure().savefig("featured_selection.png")
```

## Validation croisée pour sélectionner le modèle

Quel $\alpha$ faut-il privilégier ? Pour cela, 
il convient d'effectuer une validation croisée afin de choisir le modèle pour
lequel les variables qui passent la phase de sélection permettent de mieux
prédire le résultat Républicain :

```{python}
#| echo: true
#| output: false
from sklearn.linear_model import LassoCV

lcv = (
  LassoCV(
    alphas=my_alphas,
    fit_intercept=False,
    random_state=0,
    cv=5
    ).fit(
      preprocessed_features, y_train
    )
)
```

On peut récupérer le _"meilleur"_ $\alpha$:

```{python}
#| echo: true
print("alpha optimal :", lcv.alpha_)
```

Celui-ci peut être
utilisé pour faire tourner un nouveau _pipeline_:

```{python}
#| echo: true
#| output: false
model = Lasso(
  fit_intercept=False, 
  alpha = lcv.alpha_
)  

lasso_pipeline = Pipeline(steps=[
    ('preprocess', preprocessor),
    ('model', model)
])


lasso_optimal = lasso_pipeline.fit(X_train,y_train)

features_selec2 = extract_features_selected(lasso_optimal)
```

Les variables sélectionnées sont : 

```{python}
features_selec2.str.replace("(number__|category__)", "", regex = True)
```


```{python}
#| echo: false
#| output: asis
n_var_selected = features_selec2.shape[0]
print(f"Cela correspond à un modèle avec {n_var_selected} variables sélectionnées.")
```


::: {.cell .markdown}
```{=html}
<div class="alert alert-warning" role="alert">
<h3 class="alert-heading"><i class="fa-solid fa-pencil"></i> Hint</h3>
```

Dans le cas où le modèle paraîtrait trop peu parcimonieux, il faudrait revoir la phase de définition des variables pertinentes pour comprendre si des échelles différentes de certaines variables ne seraient pas plus appropriées (par exemple du `log`). 

```{=html}
</div>
```
:::

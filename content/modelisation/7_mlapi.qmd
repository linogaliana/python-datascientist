---
title: "Mettre à disposition un modèle par le biais d'une API"
date: 2023-10-20T13:00:00Z
weight: 70
slug: ml-api
tags:
  - scikit
  - Machine Learning
  - Pipeline
  - Modelisation
  - Tutorial
categories:
  - Modélisation
  - Tutoriel
description: |
  TO BE COMPLETED
image: featured.png
bibliography: ../../reference.bib
---


```{python}
#| echo: false
#| output: 'asis'
#| include: true
import sys
sys.path.insert(1, '../../') #insert the utils module
from utils import print_badges
#print_badges(__file__)
print_badges("content/modelisation/7_mlapi.qmd")
```
:::


Ce chapitre présente la deuxième application
d'une journée de cours que j'ai
donné à l'Université Dauphine dans le cadre
des _PSL Data Week_. 

L'objectif de ce chapitre est d'amener à développer
une API du type de [celle-ci](dvf-simple-api.lab.sspcloud.fr).


<details>
<summary>
Dérouler les _slides_ associées ci-dessous ou [cliquer ici](https://linogaliana.github.io/dauphine-week-data/#/title-slide)
pour les afficher en plein écran.
</summary>


<div class="sourceCode" id="cb1"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre><iframe class="sourceCode yaml code-with-copy" src="https://linogaliana.github.io/dauphine-week-data/#/title-slide"></iframe></div>

</details>

Le chapitre précédent constituait une introduction à la création
de _pipelines_ de _machine learning_.


::: {.cell .markdown}
```{=html}
<div class="alert alert-success" role="alert">
<h3 class="alert-heading"><i class="fa-solid fa-pencil"></i> Mise à disposition sous forme d'API locale</h3>
```

- Créer un nouveau service `VSCode` sur le `SSPCloud` en paramétrant dans l'onglet
`Networking` le port 5000 ;
- Utiliser la commande suivante depuis le terminal:

```shell
mkdir app
cd app
```

- Depuis le menu des fichiers, créer trois fichiers dont le contenu
suit:

- `requirements.txt`
- `getdvf.py`
- `train.py`
- `api.py`


<details>
<summary>
Fichier `getdvf.py`
</summary>
Récupérer le contenu sur [cette page](https://raw.githubusercontent.com/linogaliana/python-datascientist/api/content/modelisation/getdvf.py)
</details>


<details>
<summary>
Fichier `train.py`
</summary>
Récupérer le contenu sur [cette page](https://raw.githubusercontent.com/linogaliana/python-datascientist/api/content/modelisation/train.py)
</details>

<details>
<summary>
Fichier `api.py`
</summary>
Récupérer le contenu sur [cette page](https://raw.githubusercontent.com/linogaliana/python-datascientist/api/content/modelisation/api.py)
</details>

<details>
<summary>
Fichier `requirements.txt`
</summary>
Récupérer le contenu sur [cette page](https://raw.githubusercontent.com/linogaliana/python-datascientist/api/content/modelisation/requirements_api.txt)
</details>


- Exécuter `getdvf.py` puis `train.py` pour stocker en local le modèle entraîné
- Ajouter `model.joblib` au `.gitignore` _(si vous utilisez `Git`)_
- Déployer en local l'API avec la commande

```shell
uvicorn api:app --reload --host "0.0.0.0" --port 5000
```

- A partir du `README` du [service VSCode](https://datalab.sspcloud.fr/my-services),
se rendre sur l'URL de déploiement, 
ajouter `/docs/` à celui-ci et observer la documentation de l'API 
- Se servir de la documentation pour tester les requêtes `/predict`
- Récupérer l'URL d'une des requêtes proposées. La tester dans le navigateur
et depuis `Python` avec `requests` (`requests.get(url).json()`)

```{=html}
</div>
```
:::

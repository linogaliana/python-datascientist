---
title: "Partie 3: modéliser"
draft: false
slug: "modelisation"
categories:
  - Introduction
  - Modélisation
description: |
  La facilité à modéliser des processus très diverses a grandement 
  participé au succès de `Python` dans les années 2010. La popularité de
  `Python` est indissociable de l'essor du _machine learning_ comme technique
  de modélisation. Cette partie vise à introduire aux problématiques spécifiques
  en présentant principalement la librairie `Scikit Learn` qui permet d'avoir un 
  _pipeline_ de _machine learning_ opérationnel très rapidement. 
bibliography: ../../reference.bib
image: https://minio.lab.sspcloud.fr/lgaliana/generative-art/pythonds/hal9000.png
---


# Introduction

Les _data scientists_ sont souvent associés à la mise en oeuvre
de modèles complexes d'intelligence artificielle. 
Le succès médiatique de ce type d'outils, notamment `ChatGPT`, 
n'y est pas pour rien. Cependant, la modélisation n'est souvent
qu'une 
phase du travail du _data scientist_, un peu comme la visualisation. 
D'ailleurs, dans certaines organisations où la division des tâches 
est plus poussée, les _data engineers_ sont au moins aussi
impliqués dans la phase de modélisation que les _data scientists_. 

C'est souvent un péché de jeunesse de penser qu'on peut résumer
le travail du _data scientist_ exclusivement à la phase de modélisation.
Cette dernière dépend très fortement de la qualité du travail de 
nettoyage et structuration des données mis en oeuvre en amont. La
mise en oeuvre de modèles complexes, qui s'accomodent de données
peu structurées, est gourmande en ressources et coûteuse. Ce ne sont
donc qu'un nombre limité d'acteurs qui peuvent entraîner, _ex nihilo_, 
des grands modèles de langage[^llm], capables de dépenser au moins 300 000 dollars
dans l'entraînement d'un modèle, avant même toute phase d'inférence [@izsak2021train].
Ces besoins computationnels pour entraîner de grands modèles de langage sont
d'ailleurs assez gourmands en énergie, ce qui peut amener à
des empreintes carbones non négligeables [@strubell2019energy; @arcep2019].  

[^llm]: Nous reviendrons de manière épisodique 
sur ce principe des grands modèles de langage
qui sont devenus, en quelques années,
centraux dans l'écosystème de la _data science_ mais sont également 
amenés à devenir des outils grands publics, à la manière de `ChatGPT`. 

Heureusement, il est possible de mettre en oeuvre des modélisations plus
légères[^finetuning], celles que nous présenterons dans les prochains chapitres.
Cette partie du cours se concentrera principalement sur la présentation
d'algorithmes de _machine learning_ (apprentissage automatique en Français). On peut définir
ce terme de manière large comme un ensemble de techniques 
permettant, à partir d'un ensemble d'observations, à des algorithmes de dégager des structures ou
régularités statistiques sans que celles-ci aient été définies _a priori_ par les modélisateurs. 
Cette définition permet de distinguer cette approche d'autres champs de l'intelligence artificielle[^russel-norvig],
notamment les IA symboliques, où chaque observation est caractérisée à partir d'un ensemble de règles exhaustives et prédéfinies.
Bien que cette définition large permette d'englober la statistique inférentielle traditionnelle, elle permet néanmoins de comprendre la différence philosophique majeure entre l'approche par apprentissage automatique et l'économétrie comme nous allons pouvoir l'évoquer par la suite. 


::: {.note}
## Comment définir l'intelligence artificielle ?

@RN2020 définissent l'intelligence artificielle de la manière suivante:

> « L'étude des agents [intelligents] qui reçoivent des perceptions de l'environnement et agissent. Chacun de ces agents est mis en œuvre par une fonction qui associe les perceptions aux actions, et nous couvrons différentes manières de de représenter ces fonctions, telles que les systèmes de production, les agents réactifs, les planificateurs logiques, les réseaux de neurones et les systèmes de gestion de l'information et les systèmes de théorie de la décision »

Cette définition très large permet d'inclure beaucoup d'approches différentes dans le champ de l'intelligence artificielle. Elle définit l'intelligence artificielle comme une règle de décision, très générique, issues de données. Pour formaliser mathématiquement, il s'agit de relier des perceptions $\mathbb{X}$, c'est-à-dire des faits pris comme donnés, à une décision $y$ grâce à une règle de décision $f$ : $y=f(\mathbb{X})$ (la décision $y$ est issue d'un ensemble de décisions, de taille restreinte ou large selon le phénomène noté $\mathcal{Y}$). La manière dont est constuite cette fonction $f$ distinguera différents champs de l'intelligence artificielle.

L'AI Act européen de 2024 propose une [définition assez similaire](https://artificialintelligenceact.eu/fr/article/3/) bien qu'elle soit exprimée dans des termes différents:

> « Système basé sur une machine qui est conçu pour fonctionner avec différents niveaux d'autonomie et qui peut faire preuve d'adaptabilité après son déploiement, et qui, pour des objectifs explicites ou implicites, déduit, à partir des données qu'il reçoit, comment générer des résultats tels que des prédictions, du contenu, des recommandations ou des décisions qui peuvent influencer des environnements physiques ou virtuels »

Dans le cadre de ce cours, nous n'allons parler que des approches constuites autour de l'apprentissage, c'est-à-dire les approches qui visent à induire des lois, forcément incertaines, à partir d'un ensemble de données. Cette approche est très différente des [IA symboliques](https://fr.wikipedia.org/wiki/Intelligence_artificielle_symbolique) qui offrent une autonomie limitée à la machine puisque son comportement est cadré par un ensemble, parfois large, de règles déterministes.
:::

Le choix de se concentrer sur des algorithmes simples de _machine learning_ dans la partie modélisation
plutôt que d'aller directement aux réseaux de neurone, permet d'abord de 
présenter la démarche scientifique liée à l'apprentissage, notamment pour obtenir des performances satisfaisantes lorsqu'on extrapole sur des données non rencontrées lors de la phase d'apprentissage. 
Cela permet également de souligner des enjeux qui seront également valables pour des modèles plus complexes, par exemple la préparation des données permettant de réduire le bruit dans les données afin que les modèles puissent dégager des structures plus fiables dans les données.
En fait, pour être plus pertinent que des approches plus parcimonieuses,
les techniques de _deep learning_, notamment
les réseaux de neurones, nécessitent soit des volumes de données très
importants (des millions voire dizaine de millions d'observations) soit
des données à la structure complexe comme le langage naturel ou les images. 
Dans de nombreux cas, des modèles plus simples comme les techniques d'apprentissage
automatique (_machine learning_) suffisent largement. 


# La modélisation, une approche au coeur de la statistique

Un modèle statistique
est une représentation simplifiée et structurée d'un phénomène réel,
construite à partir d'observations issues d'un ensemble partiel de données. 

Un modèle vise à capturer les relations et les structures sous-jacentes au sein de ces données, permettant ainsi de formuler des hypothèses, d'effectuer des prédictions et d'extrapoler des conclusions au-delà 
de l'ensemble de données mesurées.
Les modèles statistiques fournissent ainsi un cadre analytique pour explorer, comprendre et interpréter les informations contenues dans les données. 

Représenter la réalité sous la forme d'un modèle est un principe à la
base de la statistique comme discipline scientifique et ayant des
applications dans de nombreux champs disciplinaires : économie,
sociologie, géographique, biologie, physique, etc. 
Selon les disciplines, le nom donné peut varier mais on retrouve
régulièrement la même approche scientifique : le modélisateur
construit des relations entre plusieurs variables théoriques
ayant des contreparties empiriques afin de quantifier la relation entre celles-ci.
Cette approche est au coeur de la __statistique inférentielle__, par opposition à la __statistique descriptive__. 
Dans les deux cas, l'objectif est d'utiliser un échantillon, c'est-à-dire un ensemble réduit de données observées,
pour mieux connaître une population, l'ensemble de données concernées par une étude. La différence entre les deux approches est liée à la manière dont cette extrapolation est faite. Dans le cadre de la statistique inférentielle, on tend plutôt à inférer des lois générales, avec des marges d'incertitude statistique, à partir des données observées, que ce soit sur la distribution statistique d'une variable (statistique univariée) ou sur les relations entre plusieurs. La statistique descriptive se contente, quant à elle, de synthétiser l'information dans un jeu de données, souvent par le biais de moments de la distribution (moyenne, quantiles, etc.) sans prétention à fournir une explication générale sur le processus générateur de données. Ces deux approches ne sont pas inconciliables, au contraire elles sont complémentaires. Se lancer dans une approche inférentielle sans avoir mené une approche descriptive approfondie amènera souvent la première vers des impasses ou des conclusions peu fiables. L'approche inférentielle peu également nourrir une analyse descriptive approfondie en permettant de hiérarchiser l'information présente dans un jeu de données et ainsi guider le travail descriptif en permettant celui-ci de se concentrer sur les faits saillants.


Dans le domaine de la recherche économique, les modèles empiriques servent généralement à associer certains paramètres structurants des modèles de comportements économiques à des valeurs quantitatives. 
Les modèles statistiques, comme les modèles économiques,
présentent néanmoins toujours une part d'irréalisme [@friedman1953methodology; @salmon2010probleme]
et accepter de manière trop littérale les implications d'un modèle, même s'il
a de bonnes performances prédictives, peut être dangereux et relever d'un biais
scientiste. On sélectionne plutôt le moins mauvais modèle
que le vrai processus générateur des données. 

Dans l'enseignement de l'ENSAE la modélisation empirique se retrouve
principalement dans deux domaines d'application : le *machine learning* et
l'économétrie. La différence est certes
sémantique - la régression linéaire peut être considérée comme une 
technique de _machine learning_ ou d'économétrie - mais elle est
également conceptuelle : 

- Dans le domaine du _machine learning_,
la structure imposée par le modélisateur est minimale et ce sont plutôt
les algorithmes qui, sur des critères de performance statistique, vont
amener à choisir une loi mathématique qui correspond au mieux aux données ;
- En économétrie,
les hypothèses de structure des lois sont plus fortes (même dans un cadre semi ou non-paramétrique) et sont plus souvent imposées
par le modélisateur.

Dans cette partie du cours, nous allons principalement
parler de _machine learning_ car il s'agit d'une perspective
plus opérationnelle que l'économétrie qui est plus directement associée
à des concepts statistiques complexes comme la théorie asymptotique. 

L'adoption du _machine learning_ dans la littérature économique a été longue
car la structuration des données est souvent le
pendant empirique d'hypothèses théoriques sur le comportement des acteurs ou des marchés [@athey2019machine; @charpentier2018econometrics].
Pour caricaturer, l’économétrie s’attacherait à comprendre la causalité de certaines variables sur une autre.
Cela implique que ce qui intéresse l'économètre
est principalement de l'estimation des paramètres (et l'incertitude
sur l'estimation de ceux-ci) qui permettent de quantifier l'effet d'une
variation d'une variable sur une autre. 
Toujours pour caricaturer, 
le _machine learning_ se focaliserait
sur un simple objectif prédictif en exploitant les relations de corrélations entre les variables.
Dans cette perspective, l'important n'est pas la causalité mais le fait qu'une variation
de $x$% d'une variable permette d'anticiper un changement de $\beta x$ de la variable
d'intérêt ; peu importe la raison.
@MullainathanJEP ont ainsi, pour simplifier, proposé la différence fondamentale qui 
suit : l'économétrie se préoccupe de $\widehat{\beta}$ là où le _machine learning_
se focalise sur $\widehat{y}$. Les deux sont bien sûr reliés dans un cadre
linéaire mais cette différence d'approche a des implications importantes
sur la structure des modèles étudiés, notamment leur parcimonie[^3]. 

[^3]: Comme nous l'avons dit, cette différenciation est un peu 
caricaturale, notamment maintenant que les économistes sont
plus familiarisés aux concepts d'évaluation de performance
prédictive sur des sous-ensembles d'apprentissage et de test (mais
l'évolution est lente). 

    La recherche en _machine learning_ est quant à elle très dynamique 
sur la question de l'explicabilité et de l'interprétabilité
des modèles de _machine learning_, notamment autour du concept
de [valeurs de Shapley](https://shap.readthedocs.io/en/latest/index.html).



# Quelques définitions

Dans cette partie du cours nous allons employer un certain nombre
de termes devenus familiers aux praticiens du _machine learning_
mais qui méritent d'être explicités pour comprendre les prochains chapitres. 

## Entraînement et inférence

Le _machine learning_ est une approche opérationnelle: l'objectif est généralement 
d'estimer des relations entre variables observées pour avoir une règle de décision puis extrapoler celle-ci sur
un autre échantillon de données. Les deux prochains chapitres visent à présenter la démarche scientifique pour avoir une extrapolation de qualité. 

L'entraînement (ou apprentissage) est la phase du travail où un modèle de _machine learning_ affine des relations à partir d'un ensemble de données. Pour faire l'analogie avec l'apprentissage humain, il s'agit de la phase où le machine learning va réviser ses cours avant le contrôle.

L'inférence est la phase où la règle de décision est mise en oeuvre sur de nouvelles données, qui n'ont pas été vues lors de l'entraînement. Pour reprendre l'analogie précédente, il peut s'agir de nouvelles questions lors du contrôle (phase d'évaluation) ou de l'application au monde réel des connaissances acquises lors de l'apprentissage.


## _Machine learning_ et _deep learning_

Jusqu'à présent nous avons beaucoup utilisé, sans le définir, le
concept de _machine learning_, dont la traduction française est
apprentissage automatique mais le terme anglo-saxon est suffisamment
utilisé pour être considéré comme standard.

Le _machine learning_ est un ensemble de techniques algorithmiques 
qui permettent aux ordinateurs d'apprendre, à partir d'exemples, à ajuster un modèle
sans avoir explicitement défini celui-ci. A partir d'algorithmes itératifs et d'une
métrique de performance, des règles de classification ou de prédiction vont permettre
de mettre en relation des caractéristiques (_features_) avec une variable d'intérêt (_label_)[^4]. 

[^4]: Pour faire l'analogie avec le cadre économétrique, les _features_ sont les variables explicatives
ou _covariates_ (la matrice $X$) et le _label_ est la variable expliquée ($y$).

De nombreux algorithmes existent et se distinguent sur la manière d'introduire une structure plus ou
moins formelle dans la relation entre les variables observées. Nous n'allons voir que quelques-uns
de ces algorithmes : _support vector machine_ (SVM), régression logistique, arbres de décision, forêts
aléatoires, etc. Simples à mettre en oeuvre grâce à la librairie `Scikit-Learn`, ils permettront
déjà de comprendre la démarche originale du _machine learning_ que vous pourrez approfondir
ultérieurement.  

Au sein de la grande famille des algorithmes de _machine learning_, tendent de plus à plus à devenir
autonomes les techniques de réseaux de neurone. Les techniques qui s'appuient sur les réseaux de neurones sont regroupées
dans une famille qu'on
appelle _deep learning_ (apprentissage profond en Français).
Ces réseaux sont inspirés du fonctionnement du cerveau humain et sont composés de nombreuses couches de neurones interconnectés. 
La structure canonique bien connue est illustrée dans la @fig-nn. 
Le _deep learning_ est intéressant pour créer des modèles capables d'apprendre de représentations
de données complexes et abstraites à partir de données brutes,
ce qui évite parfois la complexe tâche de définir manuellement des caractéristiques spécifiques à cibler.
Les champs de l'analyse d'image (_computer vision_) ou du traitement du langage naturel sont les principaux
cas d'application de ces méthodes.


::: {#fig-nn}
![](neural-network1.png)

Exemple de structure simplifiée d'un réseau de neurones. 

La première couche (_input layer_) correspond aux variables introduites dans le modèle. La combinaison de celles-ci se fait dans des couches intermédiaires (_hidden layer_). Le passage entre deux couches se fait par le biais d'une fonction d'activation, par exemple une fonction _[sigmoid](https://fr.wikipedia.org/wiki/Sigmo%C3%AFde_(math%C3%A9matiques))_, construite à partir d'une moyenne pondérée (dont les poids seront ajustés lors de l'entraînement) des couches précédentes. La complexité du réseau mis en oeuvre ainsi que des relations entre les couches détermine le type de réseau mis en oeuvre (_feed forward network_, _convolutional network_, etc.).

:::


::: {.callout-note}

Les réseaux de neurone sont des modèles à la structure complexe. Sur des données volumineuses et complexes, ils peuvent être lourds, voire impossible à entraîner sur des machines classiques. Si les données qu'on possède correspondent à celles attendues par le modèle, il est tout à fait possible d'utiliser celui-ci pour l'inférence sans le ré-entraîner ou en mettant en oeuvre un apprentissage à la marge, dit [fine tuning](https://www.cnil.fr/fr/definition/ajustement-fine-tuning). Pour reprendre l'analogie avec l'apprentissage humain, le _fine tuning_ ressemble à la manière dont on va mettre à jour ses connaissances avec un nouveau cours avant un contrôle. Il n'est pas nécessaire de tout réapprendre, seulement de peaufiner ses connaissances avec les nouveautés du cours.

L'organisation `HuggingFace`, créatrice de la 
plateforme du même nom facilitant la réutilisation de modèles de _deep learning_. Elle propose
propose aussi des cours sur le sujet, notamment sur
le [traitement du langage naturel (NLP)](https://huggingface.co/learn/nlp-course/chapter1/2?fw=pt). 
Nous ferons du traitement du langage naturel dans la [prochaine partie](/content/NLP/index.qmd) de ce cours mais
de manière plus modeste en revenant sur les concepts nécessaires avant de mettre en oeuvre
une modélisation sophistiquée du langage. 
:::

Nous n'allons pas vraiment parler dans cette partie du cours de _deep learning_ car ces modèles, pour être pertinents, nécessitent
soit des données structurées d'un volume important, ce qui est rarement disponible
en _open data_, et pour lesquelles les relations entre variables sont complexes, soit
des données non structurées telles que des données textuelles, des images, des vidéos, etc. Les données textuelles sont l'objet de la prochaine partie du cours car elles font appel à des concepts spécifiques, qui nécessitent déjà la compréhension des enjeux de la modélisation sur données structurées. 



## Apprentissage supervisé ou non supervisé 


Une ligne de clivage importante entre les méthodes à mettre en oeuvre est le fait d'observer ou non
le _label_ (la variable $y$) qu'on désire modéliser. 

Prenons par exemple un site de commerce qui dispose
d'informations sur ses clients comme l'âge, le sexe, le lieu de résidence. 
Ce site peut désirer 
exploiter cette information de différentes manières pour modéliser le comportement d'achat. 

En premier lieu, ce site peut désirer
anticiper le volume d'achat d'un nouveau client ayant certaines caractéristiques. 
Dans ce cas, il est possible d'utiliser les montants dépensés par d'autres clients en fonction de leurs
caractéristiques. L'information pour notre nouveau client n'est pas mesurée mais elle peut s'appuyer
sur un ensemble d'observations de la même variable.

Mais il est tout à fait possible d'entraîner un modèle sur un _label_ qu'on ne mesure pas, en supposant
qu'il fasse sens. Par exemple notre site de commerce peut désirer déterminer, en fonction des
caractéristiques de notre nouveau client et de sa clientèle existante, s'il appartient à tel ou 
tel groupe de consommateurs : les dépensiers, les économes... Bien sûr on ne sait jamais _a priori_
à quel groupe appartient un consommateur mais le rapprochement entre consommateurs ayant un comportement
similaire permettra de donner du sens à cette catégorie. Dans ce cas, l'algorithme apprendra à reconnaître
quelles caractéristiques sont structurantes dans la constitution de groupes au comportement similaire et
permettra d'associer tout nouveau consommateur à un groupe. 

Ces deux exemples illustrent l'approche différente selon qu'on essaie de construire des modèles
sur un _label_ observé ou non. Cela constitue même l'une des dualités fondamentales dans les
techniques de _machine learning_ : 

* __Apprentissage supervisé__ : la valeur cible est connue et peut être utilisée pour évaluer la qualité d'un modèle ;
* __Apprentissage non supervisé__ : la valeur cible est inconnue et ce sont des critères statistiques qui vont amener
à sélectionner la structure de données la plus plausible. 

Cette partie du cours illustrera ces deux approches de manière différente à partir du même
jeu de données, les résultats des élections américaines.
Dans le cas de l'apprentissage supervisé, nous chercherons à modéliser directement
le résultat des candidats aux élections (soit le score, soit le gagnant). Dans 
le cas de l'apprentissage non supervisé, nous essaierons de regrouper les 
territoires au comportement de vote similaire en fonction de facteurs
socio-démographiques. 


## Classification et régression

Une deuxième dualité fondamentale qui est déterminante dans le choix de la méthode de _machine learning_
à mettre en oeuvre est la nature du _label_. S'agit-il d'une variable continue ou d'une variable
discrète, c'est-à-dire prenant un nombre limité de modalités ? 

Cette différence de nature entre les données amène à distinguer deux types d'approche :

- Dans les problématiques de __classification__, où notre label $y$ a un nombre fini de valeurs[^5],
on cherche à prédire dans quelle classe ou à quel groupe il est possible de rattacher nos données. 
Par exemple, si vous prenez du café le matin, faites-vous partie du groupe des personnes ronchons au lever ?
Les métriques de performance utilisent généralement la proportion de bonnes ou mauvaises classifications
pour estimer la qualité d'un modèle. 
- Dans les problématiques de __régression__, où notre label est une grandeur numérique, on
cherche à prédire directement la valeur de notre variable dans le modèle. Par exemple, si vous
avez tel ou tel âge, quel est votre dépense quotidienne en _fast food_ ? Les métriques
de performance sont généralement des moyennes plus ou moins sophistiquées d'écarts entre
la prédiction et la valeur observée. 

[^5]: Nous allons nous focaliser sur le cas binaire, le plus simple. Dans ce type de problèmes,
la variable $y$ a deux modalités : gagnant-perdant, 0-1, oui-non... Néanmoins il existe de 
nombreux cas d'usage où la variable dispose de plus de modalités, par exemples des
scores de satisfaction entre 0 et 5 ou A et D. La mise en oeuvre de modèles est plus
complexe mais l'idée générale est souvent de se ramener à un ensemble de modèles dichotomiques
pour pouvoir appliquer des métriques simples et stables. 


En résumé, l'aide-mémoire suivante, issue de l'aide de `Scikit-Learn`, peut déjà donner de premiers enseignements sur les différentes familles de modèles :

::: {#fig-algos-scikit}
![](https://scikit-learn.org/stable/_downloads/b82bf6cd7438a351f19fac60fbc0d927/ml_map.svg)

Une _cheatsheet_ des algorithmes disponibles dans [`Scikit-Learn`](https://scikit-learn.org)
:::


# Données

La plupart des exemples de cette partie s'appuient sur les résultats des
élections US 2020 au niveau comtés. Plusieurs bases sont utilisées pour 
cela :

* Les données électorales sont une reconstruction à partir des données du _MIT Election lab_
proposées sur `Github` par [`tonmcg`](https://github.com/tonmcg/US_County_Level_Election_Results_08-20)
ou directement disponibles sur le site du _[MIT Election Lab](https://electionlab.mit.edu/data)_.
* Les données socioéconomiques (population, données de revenu et de pauvreté, 
taux de chômage, variables d'éducation) proviennent de l'USDA ([source](https://www.ers.usda.gov/data-products/county-level-data-sets/))
* Le *shapefile* utilisé pour les cartes provient des données du *Census Bureau*. Le fichier peut
être téléchargé directement depuis cet url:
<https://www2.census.gov/geo/tiger/GENZ2019/shp/cb_2019_us_county_20m.zip>

Le code pour construire une base unique à partir de ces sources diverses
est visible ci-dessous, pour les curieux : 

<details>

<summary>

Voir le code {{< fa brands python >}} de récupération des données

</summary>

```{.python include="get_data.py"}
```

</details>

Cette partie n'est absolument pas exhaustive. Elle constitue un point
d'entrée sur la modélisation à partir d'une série d'exemples construits à partir d'un fil rouge. 
mériteraient d'être évoqués. Pour les personnes désirant en savoir plus sur les 
modèles économétriques, qui seront moins évoqués que ceux de _machine learning_,
je recommande la lecture de @Turrell2021.



## Références

::: {#refs}
:::


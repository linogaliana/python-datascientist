:::: {.content-visible when-profile="fr"}

::: {.callout-tip}
## Exercice 5 : Encoder des variables catégorielles

1. Créer `df` qui conserve uniquement les variables `state_name` et `county_name` dans `votes`.
2. Appliquer à `state_name` un `LabelEncoder`
*Note : Le résultat du label encoding est relativement intuitif, notamment quand on le met en relation avec le vecteur initial.*

3. Regarder la *dummy expansion* de `state_name`
4. Appliquer un `OrdinalEncoder` à `df[['state_name', 'county_name']]`
*Note : Le résultat du _ordinal encoding_ est cohérent avec celui du label encoding*

5. Appliquer un `OneHotEncoder` à `df[['state_name', 'county_name']]`

*Note : `scikit` optimise l'objet nécessaire pour stocker le résultat d'un modèle de transformation. Par exemple, le résultat de l'encoding One Hot est un objet très volumineux. Dans ce cas, `scikit` utilise une matrice Sparse.*

:::
::::

:::: {.content-visible when-profile="en"}

::: {.callout-tip}
## Exercise 5: Encoding Categorical Variables

1. Create `df` that retains only the `state_name` and `county_name` variables in `votes`.
2. Apply a `LabelEncoder` to `state_name`
*Note: The label encoding result is relatively intuitive, especially when related to the initial vector.*

3. Observe the dummy expansion of `state_name`
4. Apply an `OrdinalEncoder` to `df[['state_name', 'county_name']]`
*Note: The ordinal encoding result is consistent with the label encoding*

5. Apply a `OneHotEncoder` to `df[['state_name', 'county_name']]`

*Note: `scikit` optimizes the object required to store the result of a transformation model. For example, the One Hot encoding result is a very large object. In this case, `scikit` uses a Sparse matrix.*

:::
::::

```{python}
#1. Création de df
df = votes.loc[
  :,["state_name",'county_name']
]
```

::: {.content-visible when-profile="fr"}
Si on regarde les _labels_ et leurs transpositions numériques via `LabelEncoder`
:::

::: {.content-visible when-profile="en"}
If we examine the labels and their numeric transpositions via `LabelEncoder`
:::

```{python}
#2. Appliquer un LabelEncoder à stat_name
label_enc = preprocessing.LabelEncoder().fit(df['state_name'])
np.column_stack((label_enc.transform(df['state_name']),df['state_name']))
```


```{python}
# 3. dummy expansion de state_name
pd.get_dummies(df['state_name'])
```

::: {.content-visible when-profile="fr"}
Si on regarde l'`OrdinalEncoder`:
:::

::: {.content-visible when-profile="en"}
If we examine the `OrdinalEncoder`:
:::


```{python}
# 4. OrdinalEncoder
ord_enc = preprocessing.OrdinalEncoder().fit(df)
# ord_enc.transform(df[['state', 'county']])
ord_enc.transform(df)[:,0]
```


```{python}
# 5. OneHotEncoder
onehot_enc = preprocessing.OneHotEncoder().fit(df)
onehot_enc.transform(df)
```

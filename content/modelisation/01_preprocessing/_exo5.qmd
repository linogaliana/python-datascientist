:::: {.content-visible when-profile="fr"}


```{python}
from IPython.display import HTML
style = '''

    <style>
    .callout {
    border: 2px solid #d1d5db;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    background-color: #ffffff;
    padding: 15px;
}
.callout-header-note {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #47648a;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-tip {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #41745d;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-exercise {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #c46aad;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-warning {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #967b30;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-important {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #86252b;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-caution {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #a7663b;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}


.callout-body {
    margin: 10px 0;
}
    </style>
    
'''
content_html = '''

    <div class="callout callout-exercise">
        <div class="callout-header-exercise">
            <i class="fa-solid fa-pen-fancy"></i> Exercice 5 : Encoder des variables catégorielles
        </div>
        <div class="callout-body">
            <ol>
<li>Créer <code>df</code> qui conserve uniquement les variables <code>state_name</code> et <code>county_name</code> dans <code>votes</code>.</li>
<li>
<p>Appliquer à <code>state_name</code> un <code>LabelEncoder</code>
<em>Note : Le résultat du label encoding est relativement intuitif, notamment quand on le met en relation avec le vecteur initial.</em></p>
</li>
<li>
<p>Regarder la <em>dummy expansion</em> de <code>state_name</code></p>
</li>
<li>
<p>Appliquer un <code>OrdinalEncoder</code> à <code>df[[\'state_name\', \'county_name\']]</code>
<em>Note : Le résultat du <em>ordinal encoding</em> est cohérent avec celui du label encoding</em></p>
</li>
<li>
<p>Appliquer un <code>OneHotEncoder</code> à <code>df[[\'state_name\', \'county_name\']]</code></p>
</li>
</ol>
<p><em>Note : <code>scikit</code> optimise l\'objet nécessaire pour stocker le résultat d\'un modèle de transformation. Par exemple, le résultat de l\'encoding One Hot est un objet très volumineux. Dans ce cas, <code>scikit</code> utilise une matrice Sparse.</em></p>
        </div>
    </div>
    
'''
HTML(f'<script src="https://kit.fontawesome.com/3c27c932d3.js" crossorigin="anonymous"></script>\n{style}\n{content_html}')

```

::::

:::: {.content-visible when-profile="en"}


```{python}
from IPython.display import HTML
style = '''

    <style>
    .callout {
    border: 2px solid #d1d5db;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    background-color: #ffffff;
    padding: 15px;
}
.callout-header-note {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #47648a;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-tip {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #41745d;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-exercise {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #c46aad;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-warning {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #967b30;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-important {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #86252b;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-caution {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #a7663b;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}


.callout-body {
    margin: 10px 0;
}
    </style>
    
'''
content_html = '''

    <div class="callout callout-exercise">
        <div class="callout-header-exercise">
            <i class="fa-solid fa-pen-fancy"></i> Exercise 5: Encoding Categorical Variables
        </div>
        <div class="callout-body">
            <ol>
<li>Create <code>df</code> that retains only the <code>state_name</code> and <code>county_name</code> variables in <code>votes</code>.</li>
<li>
<p>Apply a <code>LabelEncoder</code> to <code>state_name</code>
<em>Note: The label encoding result is relatively intuitive, especially when related to the initial vector.</em></p>
</li>
<li>
<p>Observe the dummy expansion of <code>state_name</code></p>
</li>
<li>
<p>Apply an <code>OrdinalEncoder</code> to <code>df[[\'state_name\', \'county_name\']]</code>
<em>Note: The ordinal encoding result is consistent with the label encoding</em></p>
</li>
<li>
<p>Apply a <code>OneHotEncoder</code> to <code>df[[\'state_name\', \'county_name\']]</code></p>
</li>
</ol>
<p><em>Note: <code>scikit</code> optimizes the object required to store the result of a transformation model. For example, the One Hot encoding result is a very large object. In this case, <code>scikit</code> uses a Sparse matrix.</em></p>
        </div>
    </div>
    
'''
HTML(f'<script src="https://kit.fontawesome.com/3c27c932d3.js" crossorigin="anonymous"></script>\n{style}\n{content_html}')

```

::::

```{python}
#1. Création de df
df = votes.loc[
  :,["state_name",'county_name']
]
```

::: {.content-visible when-profile="fr"}
Si on regarde les _labels_ et leurs transpositions numériques via `LabelEncoder`
:::

::: {.content-visible when-profile="en"}
If we examine the labels and their numeric transpositions via `LabelEncoder`
:::

```{python}
#2. Appliquer un LabelEncoder à stat_name
label_enc = preprocessing.LabelEncoder().fit(df['state_name'])
np.column_stack((label_enc.transform(df['state_name']),df['state_name']))
```


```{python}
# 3. dummy expansion de state_name
pd.get_dummies(df['state_name'])
```

::: {.content-visible when-profile="fr"}
Si on regarde l'`OrdinalEncoder`:
:::

::: {.content-visible when-profile="en"}
If we examine the `OrdinalEncoder`:
:::


```{python}
# 4. OrdinalEncoder
ord_enc = preprocessing.OrdinalEncoder().fit(df)
# ord_enc.transform(df[['state', 'county']])
ord_enc.transform(df)[:,0]
```


```{python}
# 5. OneHotEncoder
onehot_enc = preprocessing.OneHotEncoder().fit(df)
onehot_enc.transform(df)
```

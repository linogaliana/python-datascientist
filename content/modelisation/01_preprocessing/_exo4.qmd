:::: {.content-visible when-profile="fr"}


```{python}
from IPython.display import HTML
style = '''

    <style>
    .callout {
    border: 2px solid #d1d5db;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    background-color: #ffffff;
    padding: 15px;
}
.callout-header-note {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #47648a;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-tip {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #41745d;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-exercise {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #c46aad;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-warning {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #967b30;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-important {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #86252b;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-caution {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #a7663b;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}


.callout-body {
    margin: 10px 0;
}
    </style>
    
'''
content_html = '''

    <div class="callout callout-exercise">
        <div class="callout-header-exercise">
            <i class="fa-solid fa-pen-fancy"></i> Exercice 4 : Normalisation
        </div>
        <div class="callout-body">
            <ol>
<li>A l\'aide de la documentation de la fonction <a href="https://scikit-learn.org/dev/modules/generated/sklearn.model_selection.train_test_split.html"><code>train_test_split</code></a> de <code>Scikit</code>, créer deux échantillons (respectivement 70% et 30% des données).</li>
<li>Normaliser la variable <code>Median_Household_Income_2021</code> (ne pas écraser les valeurs !) et regarder l\'histogramme avant/après normalisation.</li>
<li>Vérifier que la norme $\mathcal{l}_2$ est bien égale à 1 (grâce à la fonction <code>np.linalg.norm</code> et l\'argument <code>axis=1</code> pour les 10 premières observations, sur l\'ensemble d\'entraînement puis sur les autres observations.</li>
</ol>
        </div>
    </div>
    
'''
HTML(f'<script src="https://kit.fontawesome.com/3c27c932d3.js" crossorigin="anonymous"></script>\n{style}\n{content_html}')

```

::::

:::: {.content-visible when-profile="en"}


```{python}
from IPython.display import HTML
style = '''

    <style>
    .callout {
    border: 2px solid #d1d5db;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    background-color: #ffffff;
    padding: 15px;
}
.callout-header-note {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #47648a;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-tip {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #41745d;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-exercise {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #c46aad;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-warning {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #967b30;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-important {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #86252b;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-caution {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #a7663b;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}


.callout-body {
    margin: 10px 0;
}
    </style>
    
'''
content_html = '''

    <div class="callout callout-exercise">
        <div class="callout-header-exercise">
            <i class="fa-solid fa-pen-fancy"></i> Exercise 4: Normalization
        </div>
        <div class="callout-body">
            <ol>
<li>Using the documentation for the <a href="https://scikit-learn.org/dev/modules/generated/sklearn.model_selection.train_test_split.html"><code>train_test_split</code></a> function in <code>Scikit</code>, create two samples (70% and 30% of the data, respectively).</li>
<li>Normalize the <code>Median_Household_Income_2021</code> variable (do not overwrite the values!) and examine the histogram before and after normalization.</li>
<li>Verify that the $\mathcal{l}_2$ norm is indeed equal to 1 (using the <code>np.linalg.norm</code> function with the <code>axis=1</code> argument) for the first 10 observations in the training set and then for the other observations.</li>
</ol>
        </div>
    </div>
    
'''
HTML(f'<script src="https://kit.fontawesome.com/3c27c932d3.js" crossorigin="anonymous"></script>\n{style}\n{content_html}')

```


::::



```{python}
from sklearn.model_selection import train_test_split


X_train, X_test, y_train, y_test = train_test_split(
    df2.drop(columns = "winner"),
    df2['winner'], test_size=0.3
)
```

```{python}
# 1. Normalisation des variables et vérification sur Median_Household_Income_2021
scaler = preprocessing.Normalizer().fit(X_train)
X1 = pd.DataFrame(
  scaler.transform(X_train),
  columns = X_train.columns
)
X2 = pd.DataFrame(
  scaler.transform(X_test),
  columns = X_test.columns
)
```

```{python}
p1 = (
  ggplot(X_train, aes(x = "Median_Household_Income_2021")) +
  geom_histogram() +
  labs(x = "2019 Median household income ($)")
)
p2 = (
  ggplot(X1, aes(x = "Median_Household_Income_2021")) +
  geom_histogram() +
  labs(x = "2021 Median household income (normalized, training sample)")
)
p3 = (
  ggplot(X2, aes(x = "Median_Household_Income_2021")) +
  geom_histogram() +
  labs(x = "2021 Median household income (normalized, extrapolated sample)")
)
```


```{python}
#| fig-cap: "Question 2, avant normalisation"
p1
```

```{python}
#| fig-cap: "Question 2, variable transformée, sur l'échantillon de normalisation"
p2
```

```{python}
#| fig-cap: "Question 2, variable transformée, à partir des paramètres entraînés"
p3
```



::: {.content-visible when-profile="fr"}
Enfin, si on calcule la norme, on obtient bien le résultat attendu à la fois sur l'échantillon _train_ et sur l'échantillon extrapolé.
:::

::: {.content-visible when-profile="en"}
Finally, if we compute the norm, we obtain the expected result on both the train sample and the extrapolated sample.
:::


```{python}
# 3. Vérification de la norme L2
pd.DataFrame(
  {
    "X_train_norm2": np.linalg.norm(X1.head(10), axis=1),
    "X_test_norm2": np.linalg.norm(X2.head(10), axis=1)
  }
).head(5)
```
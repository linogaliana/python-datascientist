:::: {.content-visible when-profile="fr"}

::: {.exercise}
## Exercice 2 (optionnel) : Regarder les corrélations entre les variables

__Cet exercice est OPTIONNEL__

1. Créer un DataFrame `df2` plus petit avec les variables `winner`, `votes_gop`, `Unemployment_rate_2019`,
`Median_Household_Income_2019`,
`Percent of adults with less than a high school diploma, 2015-19`,
`Percent of adults with a bachelor's degree or higher, 2015-19`
2. Représenter grâce à un graphique la matrice de corrélation. Vous pouvez utiliser le _package_ `seaborn` et sa fonction `heatmap`.
3. Représenter une matrice de nuages de points des variables de la base `df2` avec `pd.plotting.scatter_matrix`
4. (optionnel) Refaire ces figures avec `Plotly` qui offre également la possibilité de faire une matrice de corrélation. 

:::
::::

:::: {.content-visible when-profile="en"}

::: {.exercise}
## Exercise 2 (Optional): Examining Correlations Between Variables

__This exercise is OPTIONAL__

1. Create a smaller DataFrame `df2` with the variables `winner`, `votes_gop`, `Unemployment_rate_2019`,
`Median_Household_Income_2019`,
`Percent of adults with less than a high school diploma, 2015-19`,
`Percent of adults with a bachelor's degree or higher, 2015-19`.
2. Use a graph to represent the correlation matrix. You can use the `seaborn` package and its `heatmap` function.
3. Display a scatter plot matrix of the variables in `df2` using `pd.plotting.scatter_matrix`.
4. (Optional) Recreate these figures using `Plotly`, which also offers the option to create a correlation matrix.

:::

::::


```{python}
#| output: false
#| echo: true

# 1. Créer le data.frame df2.
df2 = votes.set_index("GEOID").loc[
    : ,
    [
        "winner", "votes_gop",
        'Unemployment_rate_2019', 'Median_Household_Income_2019',
        'Percent of adults with less than a high school diploma, 2015-19',
        "Percent of adults with a bachelor's degree or higher, 2015-19"
    ]
]
```


::: {.content-visible when-profile="fr"}
La matrice construite avec `seaborn` (question 2) aura l'aspect suivant :
:::

::: {.content-visible when-profile="en"}
Matrix created with `seaborn` (question 2) will look as follows:
:::

```{python}
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

corr = df2.drop("winner", axis = 1).corr()

mask = np.zeros_like(corr, dtype=bool)
mask[np.triu_indices_from(mask)] = True

# Set up the matplotlib figure
fig = plt.figure()

# Generate a custom diverging colormap
cmap = sns.diverging_palette(220, 10, as_cmap=True)

# Draw the heatmap with the mask and correct aspect ratio
sns.heatmap(
    corr,
    mask=mask,     # Mask upper triangular matrix
    cmap=cmap,
    annot=True
    vmax=.3,
    vmin=-.3,
    center=0,      # The center value of the legend. With divergent cmap, where white is
    square=True,   # Force cells to be square
    linewidths=.5, # Width of lines that divide cells
    cbar_kws={"shrink": .5}  # Extra kwargs for the legend; in this case, shrink by 50%
)

plt.show(fig)
```


::: {.content-visible when-profile="fr"}
Alors que celle construite directement avec `corr` de `Pandas`
ressemblera plutôt à ce tableau :
:::

::: {.content-visible when-profile="en"}

Whereas the one constructed directly with `corr` from `Pandas` will look more like this table:
:::



```{python}
#| output: false
#| echo: true
# Construction directement avec pandas également possible
g2 = df2.drop("winner", axis = 1).corr().style.background_gradient(cmap='coolwarm').format('{:.2f}')
```

```{python}
g2
```

::: {.content-visible when-profile="fr"}
Le nuage de point obtenu à l'issue de la question 3 ressemblera à :
:::

::: {.content-visible when-profile="en"}
The scatter plot obtained after question 3 will look like:
:::


```{python}
#| echo: true
# 3. Matrice de nuages de points
pd.plotting.scatter_matrix(df2)
```

::: {.content-visible when-profile="fr"}
Le résultat de la question 4 devrait, quant à lui,
ressembler au graphique suivant :
:::

::: {.content-visible when-profile="en"}
The result of question 4, on the other hand, should look like the following chart:
:::


```{python}
#| echo: true
# 4. Matrice de corrélation avec plotly
import plotly
import plotly.express as px
htmlsnip2 = px.scatter_matrix(df2)
htmlsnip2.update_traces(diagonal_visible=False)
htmlsnip2.show()
```

---
title: "Git: un outil n√©cessaire pour les data scientists"
description: |
  Une partie annexe au cours pour d√©couvrir `Git`,
  un outil devenu indispensable pour les data scientists
  afin de mener des projets impliquant
  du code `Python`.
image: https://ensae-reproductibilite.github.io/website/snakedolls.jpg
categories:
  - Git
---


Cette partie du site pr√©sente un √©l√©ment qui n'est pas propre √†
`Python` mais qui est n√©anmoins indispensable : la pratique de `Git`.

Une grande partie du contenu de la partie provient
d'un [cours d√©di√© fait avec Romain Avouac](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/slides/complete.html)


<details>
<summary>

D√©rouler les _slides_ ci-dessous ou [cliquer ici](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/slides/complete.html#/partie-1-contr%C3%B4le-de-version-avec-git) pour afficher les slides en plein √©cran.

</summary>

```{=html}
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre><iframe class="sourceCode yaml code-with-copy" src="https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/slides/complete.html#/partie-1-contr%C3%B4le-de-version-avec-git"></iframe></div>
```


</details>



# Introduction

## Le probl√®me

La d√©marche naturelle quand on commence √† travailler longuement sur un projet pour lequel on veut √©viter d'effacer et perdre son code √† cause d'une erreur humaine est de dupliquer les fichiers et cr√©er des __versions multiples d'un m√™me code qui sont des instantan√©s √† un moment donn√©__ :

![Le contr√¥le de version artisanal](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/slides/img/fichiers_multiples.png){#fig-version-control-inferno}

Ceci est une mani√®re de sauvegarder l'√©volution de son code et donc la vie d'un projet. N√©anmoins c'est une mani√®re tr√®s artisanale de proc√©der qui n'efface pas l'erreur humaine puisqu'il est toujours possible de faire une erreur lors de la duplication du fichier ou d'oublier de sauvegarder une version qui nous satisfaisait.

Cette pratique pr√©sente de nombreux inconv√©nients. Le premier est le fait que la recherche d'information pertinente, par exemple sur l'introduction d'un bug, est compliqu√©e par cette structure dupliqu√©e. Il est difficile, sans rentrer dans le d√©tail de chaque fichier, de conna√Ætre son √©volution r√©elle entre deux dates. Pour l'extraction d'information, il serait beaucoup plus pertinent de construire des fichiers de l'√©volution entre telle ou telle version mais cela requiert de nombreux gestes manuels et un temps cons√©quent. Le deuxi√®me probl√®me est qu'on ne sait pas forc√©ment, quand on revient quelques jours plus tard sur le projet, pourquoi on a enregistr√© telle ou telle version : quand on est le 28 novembre, se souvient-on de ce qui distingue les versions du 4 mai 12:37 et 16:02 ?

Si on ajoute la dimension collaborative du travail sur le code, on voit rapidement d'autres inconv√©nients √† cette approche artisanale. En premier lieu, quelqu'un reprenant le projet aura du mal √† rentrer dans celui-ci. De plus, il sera encore plus difficile pour cette personne de rechercher l'information pertinente sur les choix de version faits: cet historique lui est finalement inutile. D'autant que se pose la question du partage de ces codes: par quel biais cet ensemble de fichiers est-il partag√© ? Par mails ? Sur un disque partag√© ? Mais que se passe-t-il si plusieurs participants du projet travaillent en m√™me temps dessus ? Comment organiser la collaboration et r√©concilier les changements s'ils ont lieu de mani√®re conjointe ? 

## La solution technique: `Git`

`Git` apporte une r√©ponse technique √† ces tr√®s nombreuses questions. Ce logiciel sp√©cialis√© dans le contr√¥le de version, c'est-√†-dire dans le suivi des √©volutions d'un projet, vient r√©soudre de nombreux probl√®mes li√©s √† la mise en oeuvre de projets de _data science_ dans les organisations. L'objet de ce chapitre est de pr√©senter quelques concepts n√©cessaires √† la compr√©hension de `Git` et pr√©senter la mani√®re dont celui-ci vient aider √† g√©rer l'√©volution d'un projet informatique. Le chapitre suivant introduira √† la mani√®re dont `Git` fluidifie la collaboration au sein d'√©quipes impliqu√©es dans des projets de _data science_. Ceci est devenu indispensable car l'√©poque o√π les _data scientists_ travaillaient tous seuls sur des _notebooks_ est r√©volue. Les projets de _data science_ sont devenus, dans la plupart des organisations, plus ambitieux et impliquent souvent plusieurs personnes avec des profils diverses[^miseenprod], il est donc n√©cessaire d'avoir de la discipline pour que la collaboration soit fluide. 

[^miseenprod]: Ce constat est le point de d√©part du cours de "Mise en production de projets _data science_" disponible sur [ensae-reproductibilite.github.io/website/](https://ensae-reproductibilite.github.io/website/) que Romain Avouac et moi donnons √† la fin de la scolarit√© de l'ENSAE. 

# Comment utiliser `Git` {{< fa brands git-alt >}} quand on fait du `Python` {{< fa brands python >}} ? 

`Git` est un logiciel de contr√¥le de version, c'est-√†-dire un logiciel en charge d'enregistrer les √©volutions d'un fichier dans le temps (ce qu'on appelle versionner). Ce n'est pas un _package_ `Python`, ce ne sera pas par ce biais que nous l'utiliserons.

Les utilisateurs de `Python` peuvent utiliser `Git` par le biais de deux interm√©diaires: par le biais de la ligne de commande ou par le biais d'extensions graphiques dans leurs environnements de d√©veloppement (`VSCode`, `Jupyter`, etc.). Sur le `SSPCloud`, l'infrastructure recommand√©e pour ce cours, nous avons la possibilit√© pour faire du `Git` par les deux approches mais nous allons principalement utiliser l'interface graphique de `VSCode` qui r√©duit le co√ªt d'entr√©e dans `Git`. 

::: {.callout-tip}
## O√π trouver de l'information compl√©mentaire √† ce cours ?

`Git` fait parti des pratiques collaboratives
devenues standards dans le domaine de l'_open-source_
mais √©galement de plus en plus communes dans les administrations et entreprises
de la _data science_. 

Il existe de
nombreuses ressources sur l'utilisation de `Git` sur internet. 
Malheureusement, beaucoup sont techniques et font l'hypoth√®se d'une connaissance d√©j√† pouss√©e de certaines notions informatiques utiles √† la compr√©hension de `Git`. Ce cours ne fera pas de telles hypoth√®ses, √† l'exception d'une connaissance minimale de la logique de _filesystem_, c'est-√†-dire de la mani√®re dont s'organisent des fichiers sur un ordinateur. 

En ce qui concerne les contenus proches de celui-ci, 
une s√©rie de ressources de formation a √©t√© rassembl√©e
par l'Insee [sur ce site](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/). 
:::

# Contenu de la partie

L'apprentissage de `Git` est d√©clin√© en deux chapitres:

* Le premier est consacr√© √† pr√©senter la logique g√©n√©rale de `Git`, les concepts importants et √† illustrer ceux-ci par la pratique dans un cadre de travail individuel.
* Le second chapitre est consacr√© aux enjeux li√©s au travail collaboratif

L'objectif g√©n√©ral de cette partie est de d√©mystifier `Git`. Si la d√©couverte en autodidacte peut √™tre particuli√®rement douloureuse, ce n'est pas le cas en √©tant accompagn√© par une ressource proposant une illustration des concepts importants par la pratique et complixifiant le cadre d'usage de `Git` de mani√®re progressive. 
[üëâÔ∏è Un certain nombre de termes nouveaux quand on d√©couvre `Git` mais qui constituent les concepts utiles √† sa compr√©hension sont d√©finis dans les marges des deux prochains chapitres comme cela est montr√© ici.]{.aside}

---
title: "Un cadavre exquis pour d√©couvrir Git"
draft: false
weight: 20
slug: exogit
tags:
  - Git
categories:
  - Exercice
  - Git
type: book
description: |
  Ce chapitre propose une mise en application de quelques principes
  centraux du langage Git vus pr√©c√©demment.
image: https://minio.lab.sspcloud.fr/lgaliana/generative-art/pythonds/cadavre_exquis_kids.png
---


# Un cadavre exquis pour d√©couvrir le travail collaboratif

Jusqu'√† pr√©sent, nous avons d√©couvert les vertus de `Git` dans un projet
individuel. Nous allons maintenant aller plus loin dans un projet 
collectif. 

## Le *workflow* adopt√©

Nous allons adopter le mode de travail le plus simple, le *Github Flow*. 
Il correspond √† cette forme caract√©ristique d'arbre:

1. La branche `main` constitue le tronc
2. Les branches partent de `main` et divergent
3. Lorsque les modifications aboutissent, elles sont int√©gr√©es √† `main` ; 
la branche en question dispara√Æt :

![](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/slides/img/ghflow.png)


Il existe des *workflows* plus complexes, notamment le `Git Flow` que j'utilise
pour d√©velopper ce cours. [Ce tutoriel](https://www.atlassian.com/fr/git/tutorials/comparing-workflows/gitflow-workflow), tr√®s bien fait, 
illustre avec un graphique la complexit√© accrue de ce flow : 

![](https://wac-cdn.atlassian.com/dam/jcr:8f00f1a4-ef2d-498a-a2c6-8020bb97902f/03%20Release%20branches.svg?cdnVersion=55)

Cette fois, une branche interm√©diaire, par exemple une branche `development`
int√®gre des modifications √† tester avant de les int√©grer dans la version 
officielle (`main`).

::: {.cell .markdown}
```{=html}
<div class="alert alert-warning" role="alert">
<h3 class="alert-heading"><i class="fa-solid fa-lightbulb"></i> Hint</h3>
```

Vous pourrez trouvez des dizaines d‚Äôarticles et d‚Äôouvrages sur ce sujet dont chacun pr√©tend avoir trouv√© la meilleure organisation du travail (`Git flow`, `GitHub flow`, `GitLab flow`...). Ne lisez pas trop ces livres et articles sinon vous serez perdus (un peu comme avec les magazines destin√©s aux jeunes parents...).

La m√©thode de travail la plus simple est le *Github flow* qu'on vous a propos√© d'adopter. L'arborescence est reconnaissable : des branches divergent et reviennent syst√©matiquement vers `main`. 

Pour des projets plus complexes dans des √©quipes d√©veloppant des applications, on pourra utiliser d'autres m√©thodes de travail, notamment le `Git flow`. Il n'existe pas de r√®gles universelles pour d√©terminer la m√©thode de travail ; l'important c'est, avant tout, de se mettre d'accord sur des r√®gles communes de travail avec votre √©quipe.

```{=html}
</div>
```
:::

## M√©thode pour les merges

Les merges vers `main` doivent imp√©rativement passer par `Github` (ou `Gitlab`). Cela permet de garder une trace explicite de ceux-ci (par exemple [ici](https://github.com/linogaliana/python-datascientist/pulls?q=is%3Apr+is%3Aclosed)), sans avoir √† chercher dans l'arborescence, parfois complexe, d'un projet.

La bonne pratique veut qu'on fasse un `squash commit` pour √©viter une inflation du nombre de commits dans `main`: les branches ont vocation √† proposer une multitude de petits commits, les modifications dans `main` doivent √™tre simples √† tracer d'o√π le fait de modifier des petits bouts de code. 

Comme on l'a fait dans un exercice pr√©c√©dent, il est tr√®s pratique d‚Äôajouter dans le corps du message  `close #xx` o√π `xx` est le num√©ro d'une *issue* associ√©e √† la `pull request`. Lorsque la `pull request` sera fusionn√©e, l‚Äô*issue* sera automatiquement ferm√©e et un lien sera cr√©√© entre l'`issue` et la `pull request`. Cela vous permettra de comprendre, plusieurs mois ou ann√©es plus tard comment et pourquoi telle ou telle fonctionnalit√© a √©t√© impl√©ment√©e.

En revanche, l'int√©gration des derni√®res modifications de `main` vers une branche se fait en local. Si votre branche est en conflit, **le conflit doit √™tre r√©solu dans la branche et pas dans main**. 
`main` doit toujours rester propre. 

## Mise en pratique

::: {.cell .markdown}
```{=html}
<div class="alert alert-success" role="alert">
<h3 class="alert-heading"><i class="fa-solid fa-pencil"></i> Exercice 9 : Interactions avec le d√©p√¥t distant</h3>
```


Cet exercice se fait par groupe de trois ou quatre. Il y aura deux r√¥les dans ce sc√©nario :

- Une personne aura la responsabilit√© d'√™tre **mainteneur**
- Deux √† trois personnes seront **d√©veloppeurs**. 

1Ô∏è‚É£ Le mainteneur cr√©e un d√©p√¥t sur `Github`. Il/Elle donne des droits au(x) d√©veloppeur(s) du projet (`Settings > Manage Access > Invite a collaborator`).

2Ô∏è‚É£ Chaque membre du projet, cr√©e une copie locale du projet gr√¢ce √† la commande `git clone` ou
avec le bouton `Clone a repository` de `JupyterLab`.

Pour cela, r√©cup√©rer l'url HTTPS du d√©p√¥t en copiant l'url du d√©p√¥t que vous pouvez trouver, par exemple, dans la page d'accueil du d√©p√¥t, en dessous de `Quick setup ‚Äî if you‚Äôve done this kind of thing before`

En ligne de commande, cela donnera :

~~~shell
git clone https://github.com/<username>/<reponame>.git
~~~

3Ô∏è‚É£ Chaque membre du projet cr√©e un fichier avec son nom et son pr√©nom, selon cette structure `nom-prenom.md` en √©vitant les caract√®res sp√©ciaux. Il √©crit dedans trois phrases de son choix **sans ponctuation ni majuscules** (pour pouvoir effectuer une correction ult√©rieurement). Enfin, il commit sur le projet.

Pour rappel, en ligne de commande cela donnera les commandes suivantes √† modifier

~~~shell
git add nom-prenom.md
git commit -m "C'est l'histoire de XXXXX"
~~~

4Ô∏è‚É£ Chacun essaie d'envoyer (*push*) ses modifications locales sur le d√©p√¥t:

~~~shell
git push origin main
~~~


5Ô∏è‚É£ A ce stade, une seule personne (la plus rapide) devrait ne pas avoir rencontr√© de rejet du `push`. C'est normal, avant d'accepter une modification `Git` v√©rifie en premier lieu la coh√©rence de la branche avec le d√©p√¥t distant. Le premier ayant fait un `push` a modifi√© le d√©p√¥t commun ; les autres doivent int√©grer ces modifications dans leur version locale (*pull*) avant d'avoir le droit de proposer un  changement.

Pour celui/celle/ceux dont le `push` a √©t√© refus√©, faire

~~~shell
git pull origin main
~~~

pour ramener les modifications distantes en local. 

6Ô∏è‚É£ Taper `git log` et regarder la mani√®re dont a √©t√© int√©gr√© la modification de votre camarade ayant pu faire son `push`

Vous remarquerez que les commits de vos camarades sont int√©gr√©s tels quels √† 
l'histoire du d√©p√¥t. 

7Ô∏è‚É£ Faire √† nouveau 

~~~shell
git pull origin main
~~~

Le dernier doit refaire, √† nouveau, les √©tapes 5 √† 7 (dans une √©quipe de quatre
il faudra encore le refaire une fois).

```{=html}
</div>
```
:::

::: {.cell .markdown}
```{=html}
<div class="alert alert-danger" role="alert">
<i class="fa-solid fa-triangle-exclamation"></i> Warning √† nouveau: ne JAMAIS FAIRE <code>git push force</code></h3>
```

Quand on fait face √† un rejet du `push`, on est tent√© de faire passer en force le `push` malgr√© la mise en garde pr√©c√©dente.

Il faut **imm√©diatement oublier cette solution**, elle cr√©e de nombreux probl√®mes et, en fait, ne r√©sout rien. L'un des risques est de r√©√©crire enti√®rement l'historique rendant les copies locales, et donc les modifications de vos collaborateurs, caduques. Cela vous vaudra, √† raison, des remontrances de vos partenaires qui perdent le b√©n√©fice de leur historique `Git` qui, s'ils ont des versions sans `push` depuis longtemps peuvent avoir diverger fortement du d√©p√¥t ma√Ætre. 

```{=html}
</div>
```
:::


::: {.cell .markdown}
```{=html}
<div class="alert alert-success" role="alert">
<h3 class="alert-heading"><i class="fa-solid fa-pencil"></i> Exercice 10 : G√©rer les conflits quand on travaille sur le m√™me fichier</h3>
```

Dans la continuit√© de l'exercice pr√©c√©dent, chaque personne va travailler sur les fichiers des autres membres de l'√©quipe.

1Ô∏è‚É£ Les deux ou trois d√©veloppeurs ajoutent la ponctuation et les majuscules du fichier du premier d√©veloppeur.

2Ô∏è‚É£ Ils sautent une ligne et ajoutent une phrase (pas tous la m√™me).

3Ô∏è‚É£ Valider les r√©sultats (`git add .` et `commit`) et faire un `push`

4Ô∏è‚É£ La personne la plus rapide n'a, normalement, rencontr√© aucune difficult√© (elle peut s'arr√™ter temporairement pour regarder ce qui va se passer chez les voisins). Les autres voient leur `push` refus√© et doivent faire un `pull`. 

üí• Il y a conflit, ce qui doit √™tre signal√© par un message du type :

~~~shell
Auto-merging XXXXXX
CONFLICT (content): Merge conflict in XXXXXX.md
Automatic merge failed; fix conflicts and then commit the result.
~~~

5Ô∏è‚É£ Etudier le r√©sultat de `git status` 

6Ô∏è‚É£ Si vous ouvrez les fichiers incrimin√©s, vous devriez voir des balises du type

```{python}
#| output: asis
#| echo: false
print(
"""~~~markdown
<<<<<<< HEAD
this is some content to mess with
content to append
=======
totally different content to merge later
>>>>>>> new_branch_to_merge_later
~~~
"""
)
```

7Ô∏è‚É£ Corriger √† la main les fichiers en choisissant, pour chaque ligne, la version qui vous convient et en retirant les balises. Valider en faisant: 

~~~shell
git add . && git commit -m "R√©solution du conflit par XXXX"
~~~

Remplacer XXXX par votre nom. La balise `&&` permet d'encha√Æner, en une seule ligne de code, les deux commandes.

8Ô∏è‚É£ Faire un push. Pour la derni√®re personne, refaire les op√©rations 4 √† 8

```{=html}
</div>
```
:::
`Git` permet donc de travailler, en m√™me temps, sur le m√™me fichier et de limiter le nombre de gestes manuels n√©cessaires pour faire la fusion. Lorsqu'on travaille sur des bouts diff√©rents du m√™me fichier, on n'a m√™me pas besoin de faire de modification manuelle, la fusion peut √™tre automatique.

`Git` est un outil tr√®s puissant. Mais, il ne remplace pas une bonne organisation du travail. Vous l'avez vu, ce mode de travail uniquement sur `main` peut √™tre p√©nible. Les branches prennent tout leur sens dans ce cas. 

::: {.cell .markdown}
```{=html}
<div class="alert alert-success" role="alert">
<h3 class="alert-heading"><i class="fa-solid fa-pencil"></i> Exercice 11 : Gestion des branches</h3>
```

1Ô∏è‚É£ Le mainteneur va contribuer directement dans `main` et ne cr√©e pas de branche. Chaque d√©veloppeur cr√©e une branche, en local nomm√©e `contrib-XXXXX` o√π `XXXXX` est le pr√©nom: 

~~~shell
git checkout -b contrib-XXXXX
~~~

2Ô∏è‚É£ Chaque membre du groupe cr√©e un fichier `README.md` o√π il √©crit une phrase sujet-verbe-compl√©ment. Le mainteneur est le seul √† ajouter un titre dans le README (qu'il commit dans main).

3Ô∏è‚É£ Chacun push le produit de son subconscient sur le d√©p√¥t.

4Ô∏è‚É£ Les d√©veloppeurs ouvrent, chacun, une `pull request` sur `Github` de leur branche vers `main`. Ils lui donnent un titre explicite. 

5Ô∏è‚É£ Dans la discussion de chaque `pull request`, le mainteneur demande au d√©veloppeur d'int√©grer le titre qu'il a √©crit.  

6Ô∏è‚É£ Chaque d√©veloppeur, en local, int√®gre cette modification en faisant


```shell
# Pour √™tre s√ªr d'√™tre sur sa propre branche
git checkout branche-XXXX
git merge main
```

R√©gler le conflit et valider (`add` et `commit`). Pousser le r√©sultat. Le mainteneur choisit une des `pull request` et la valide avec l'option `squash commits`. V√©rifier sur la page d'accueil le r√©sultat.

7Ô∏è‚É£ L'auteur (si 2 d√©veloppeurs)  ou les deux auteurs (si 3 d√©veloppeurs) de la `pull request` non valid√©e doivent √† nouveau r√©p√©ter l'op√©ration 6. 

8Ô∏è‚É£ Une fois le conflit de version r√©gl√© et pouss√©, le mainteneur valide la `pull request` selon la m√™me proc√©dure que pr√©c√©demment. 

9Ô∏è‚É£ V√©rifier l'arborescence du d√©p√¥t dans `Insights > Network`. Votre arbre doit avoir une forme caract√©ristique de ce qu'on appelle le `Github flow`:

![](https://linogaliana.gitlab.io/collaboratif/pics/03_git/flow4_discuss.png)
```{=html}
</div>
```
:::

---
title: "Un cadavre exquis pour découvrir le travail collaboratif `Git`"
tags:
  - Git
categories:
  - Exercice
  - Git
description: |
  Ce chapitre propose une mise en application de quelques principes
  centraux du langage Git vus précédemment.
image: https://minio.lab.sspcloud.fr/lgaliana/generative-art/pythonds/cadavre_exquis_kids.png
---


# Un cadavre exquis pour découvrir le travail collaboratif

Jusqu'à présent, nous avons découvert les vertus de `Git` dans un projet
individuel. Nous allons maintenant aller plus loin dans un projet 
collectif. Pour rappel, dans le chapitre précédent nous avons évoqué les concepts natifs de `Git` que sont dépôts local et distant (`remote`), l'opération de `clone`, _staging area_, `commit`, `push`, `pull`, les branches. Nous avons aussi évoqué certains concepts liés à la forge `Github` que sont l'authentification et les _issues_.

Maintenant, nous allons évoquer les enjeux liés au travail collaboratif, ce qui nous amènera, notamment, à évoquer les enjeux de la gestion de conflits. 


# Le *workflow* adopté

Nous allons adopter le mode de travail le plus simple, le *Github flow*. Nous l'avons déjà adopté lors du dernier exercice du chapitre précédent, consacré à l'utilisation des branches.

Le _Github flow_ correspond à cette forme caractéristique d'arbre:

1. La branche `main` constitue le tronc
2. Les branches partent de `main` et divergent
3. Lorsque les modifications aboutissent, elles sont intégrées à `main` ; 
la branche en question disparaît :

![](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/slides/img/ghflow.png)


Il existe des *workflows* plus complexes, notamment le `Git Flow` que j'utilise
pour développer ce cours. [Ce tutoriel](https://www.atlassian.com/fr/git/tutorials/comparing-workflows/gitflow-workflow), très bien fait, 
illustre avec un graphique la complexité accrue de ce flow : 

![](https://wac-cdn.atlassian.com/dam/jcr:8f00f1a4-ef2d-498a-a2c6-8020bb97902f/03%20Release%20branches.svg?cdnVersion=55)

Cette fois, une branche intermédiaire, par exemple une branche `development`,
intègre des modifications à tester avant de les intégrer dans la version 
officielle (`main`).

::: {.tip}
Vous pourrez trouvez des dizaines d’articles et d’ouvrages sur ce sujet dont chacun prétend avoir trouvé la meilleure organisation du travail (_Git flow_, _GitHub flow_, _GitLab flow_...). Ne lisez pas trop ces livres et articles sinon vous serez perdus (un peu comme avec les magazines destinés aux jeunes parents...).

La méthode de travail la plus simple est le *Github flow* qu'on vous a proposé d'adopter. L'arborescence est reconnaissable : des branches divergent et reviennent systématiquement vers `main`. 

Pour des projets plus complexes dans des équipes développant des applications, on pourra utiliser d'autres méthodes de travail, notamment le `Git flow`. Il n'existe pas de règles universelles pour déterminer la méthode de travail ; l'important c'est, avant tout, de se mettre d'accord sur des règles communes de travail avec votre équipe.

:::

## Les conflits

Au cours du dernier exercice du chapitre précédent, nous avons, sans vraiment l'expliquer, découvert le principe du _merge_ (ou fusion, en Français). Les fusions de versions consistent à réconcilier deux versions d'un code. Cela peut se faire en privilégiant l'une sur l'autre ou bien en choisissant, dans les passages qui divergent, parfois l'une et parfois l'autre. On parle de conflits pour désigner une situation où un même fichier présente deux versions différentes qui doivent être réconciliées. 

`Git` simplifie énormément la gestion de conflits, c'est l'une des raisons de son succès. Si vous avez déjà partagé du code par mail en équipe, vous devez savoir que réconcilier des versions est extrêmement fastidieux : il faut, plus ou moins ligne à ligne, vérifier que la version que vous avez reçu par mail ne diffère pas de la vôtre, que vous avez fait évoluer en parallèle. Grâce au suivi fin de l'évolution d'un fichier que permet `Git`, cette gestion de conflits sera facilitée. Il faudra tout de même privilégier une version sur l'autre mais cela sera plus rapide et plus fiable. 

Si `Git` offre des fonctionnalités intéressantes, pour la gestion des conflits, ce n'est néanmoins pas une excuse pour être désorganisé. Comme nous allons le voir dans les prochains exercices, on a certes des chapitres

::: {.tip}
## Méthode pour les merges

Lors du chapitre précédent, nous avons fait un _merge_ de notre branche `issue-1` vers `main`, notre branche principale. Nous sommes passés par l'interface de `Github` pour faire cela. Il s'agit de la méthode recommandée pour les _merges_ vers `main`. Cela permet de garder une trace explicite de ceux-ci (par exemple [ici](https://github.com/linogaliana/python-datascientist/pulls?q=is%3Apr+is%3Aclosed)), sans avoir à chercher dans l'arborescence, parfois complexe, d'un projet.

La bonne pratique veut qu'on fasse un `squash commit` pour éviter une inflation du nombre de commits dans `main`: les branches ont vocation à proposer une multitude de petits commits, les modifications dans `main` doivent être simples à tracer d'où le fait de modifier des petits bouts de code. 

Comme on l'a fait dans un exercice précédent, il est très pratique d’ajouter dans le corps du message  `close #xx` où `xx` est le numéro d'une *issue* associée à la `pull request`. Lorsque la `pull request` sera fusionnée, l’*issue* sera automatiquement fermée et un lien sera créé entre l'`issue` et la `pull request`. Cela vous permettra de comprendre, plusieurs mois ou années plus tard comment et pourquoi telle ou telle fonctionnalité a été implémentée.

En revanche, l'intégration des dernières modifications de `main` vers une branche se fait en local. Si votre branche est en conflit, **le conflit doit être résolu dans la branche et pas dans main**. 
`main` doit toujours rester propre. 
:::

## Divergence d'historique: les différentes situations

### Cas simple

Imaginons deux personnes qui collaborent sur un projet, Alice et Bob. Bob a mis de côté le projet quelques jours. Il veut récupérer les avancées faites par Alice pendant cette période. Celle-ci a fait évoluer le projet, supposons avec un seul _commit_ puisque cela ne change rien. 

![](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/slides/img/ff.png){#fig-history-simple}

L'historique de Bob est cohérent avec celui sur `Github`, il lui manque juste le dernier _commit_ en bleu (@fig-history-simple). Il suffit donc à Bob de récupérer ce _commit_ en local avant de commencer à éditer ses fichiers.

Ce type de fusion est un _fast-forward merge_. Le commit distant est rajouté à l’historique local, sans difficulté. Le dépôt local est à nouveau à jour avec le dépôt distant. 

Il s'agit du _merge_ idéal car celui-ci peut être automatisé, il n'y a aucun risque d'écraser des modifications faites par Bob par celles d'Alice. Une organisation d'équipe adéquate permettra de s'assurer que la plupart des _merges_ seront de ce type. 

### Cas plus compliqué

Maintenant, imaginons le cas plus compliqué où Bob avait fait évoluer son code en parallèle, sans récupérer les modifications d'Alice avant de revenir sur le projet. 

Son historique local diverge donc de l'historique distant:

![](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/slides/img/ff.png){#fig-history-complicated}

Les derniers commits ne sont pas les mêmes. `Git` ne peut pas résoudre de lui-même la divergence. C'est à Bob de trancher sur la version qu'il préfère. Deux stratégies pour réconcilier les historiques sont accessibles:

* Le _merge_ ;
* Le _rebase_.

![](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/slides/img/merge.png){#fig-history-merge}

Le rapatriement des modifications d'Alice dans l'historique de Bob crée un premier commit de merge. Les fichiers en question présenteront alors des balises permettant d'identifier la divergence de version et la source de celle-ci. Dans le fichier brut, cela donnera

  ```python
  import pandas as pd

  <<<<<<< main
  toto = pd.read_csv("source.csv")
  =======
  toto = pd.read_csv("source.csv", sep = ";")
  >>>>>>> zyx911fhjehzafoldfkjknvjnvjnj;

  toto.head(2)
  ```

`VSCode`, grâce à l'extension `Git`, propose une visualisation native de ce bout de code et propose, en clique-bouton, différentes manières de réconcilier les versions. Il est bien sûr toujours possible d'éditer ces fichiers : il suffit de supprimer les balises et modifier les lignes en question. 

![](./img/conflict.png)

Une fois les versions réconciliées, il ne reste plus qu'à faire un nouveau _commit_. Cette histoire réconcilie les versions d'Alice et Bob. L'inconvénient est qu'elle rend l'historique non linéaire (voir la [documentation d'Atlassian](https://www.atlassian.com/fr/git/tutorials/using-branches/git-merge) pour plus de détails) mais c'est `Git` qui a géré automatiquement ce sujet en créant une branche temporaire. Jusqu'à récemment, ceci était le comportement par défaut de `Git`. 

Une autre approche est accessible, le _rebase_. 

![](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/slides/img/rebase1.png){#fig-history-rebase1}

`Git` effectue trois étapes: 

1. Supprime temporairement le _commit_ local
2. Réalise un _fast forward merge_ maintenant que le _commit_ local n'est plus là
3. Rajoute le commit local au bout de l'historique

![](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/slides/img/rebase2.png){#fig-history-rebase2}

Le _commit_ local a changé d'identité, ce qui explique son nouveau SHA. Cette approche présente l'avantage de garder un historique linéaire. Néanmoins, elle peut avoir des effects de bord et est donc à utiliser avec précaution (plus d'explications dans [la documentation de `Git`](https://git-scm.com/book/fr/v2/Les-branches-avec-Git-Rebaser-Rebasing#s_rebase_peril))


# Mise en pratique

::: {.exercise}
## Exercice 1 : Interactions avec le dépôt distant


Cet exercice se fait par groupe de trois ou quatre. Il y aura deux rôles dans ce scénario :

- Une personne aura la responsabilité d'être **mainteneur**
- Deux à trois personnes seront **développeurs**. 

1️⃣ Le.la mainteneur.e crée un dépôt sur `Github` avec un `README` et un `.gitignore`. Il/Elle donne des droits au(x) développeur.euse(s) du projet (`Settings > Manage Access > Invite a collaborator`).

2️⃣ Chaque membre du projet, crée une copie locale du projet (un _clone_). Si vous avez un trou de mémoire, vous pouvez retourner au chapitre précédent pour vérifier la démarche.

3️⃣ Chaque membre du projet crée un fichier avec son nom et son prénom, selon cette structure `nom-prenom.md` en évitant les caractères spéciaux. Il écrit dedans trois phrases de son choix **sans ponctuation ni majuscules** (pour pouvoir effectuer une correction ultérieurement). Enfin, il _commit_ sur le projet.

Pour rappel, en ligne de commande cela donnera les commandes suivantes à modifier

~~~shell
git add nom-prenom.md
git commit -m "C'est l'histoire de XXXXX"
~~~

4️⃣ Chacun essaie d'envoyer (*push*) ses modifications locales sur le dépôt. En ligne de commande, cela donne

~~~shell
git push origin main
~~~


5️⃣ A ce stade, une seule personne (la plus rapide) devrait ne pas avoir rencontré de rejet du `push`. C'est normal, avant d'accepter une modification `Git` vérifie en premier lieu la cohérence de la branche avec le dépôt distant. Le premier ayant fait un `push` a modifié le dépôt commun ; les autres doivent intégrer ces modifications dans leur version locale (*pull*) avant d'avoir le droit de proposer un  changement.

Pour celui/celle/ceux dont le `push` a été refusé, il faudra aller dans le terminal et faire

~~~shell
git pull origin main
~~~

pour essayer de ramener les modifications distantes en local. Celui-ci devrait échouer et `Git` devrait vous afficher le message suivant:

```python
hint: You have divergent branches and need to specify how to reconcile them.
hint: You can do so by running one of the following commands sometime before
hint: your next pull:
hint:
hint:   git config pull.rebase false  # merge
hint:   git config pull.rebase true   # rebase
hint:   git config pull.ff only       # fast-forward only
hint:
hint: You can replace "git config" with "git config --global" to set a default
hint: preference for all repositories. You can also pass --rebase, --no-rebase,
hint: or --ff-only on the command line to override the configured default per
hint: invocation.
fatal: Need to specify how to reconcile divergent branches.
```

Copier l'une des règles proposées et coller dans votre terminal. Il est recommandé de choisir la règle `git config pull.rebase false` mais cela n'aura, si vous suivez les consignes, par d'incidence si vous privilégiez `git config pull.rebase true`. 

6️⃣ Taper `git log` et regarder la manière dont a été intégré la modification de votre camarade ayant pu faire son `push`

Vous remarquerez que les commits de vos camarades sont intégrés tels quels à 
l'histoire du dépôt. 

7️⃣ Faire à nouveau 

~~~shell
git pull origin main
~~~

Le dernier doit refaire, à nouveau, les étapes 5 à 7 (dans une équipe de quatre
il faudra encore le refaire une fois).

:::

__❓ Question : que se serait-il passé si les différents membres du groupe avaient effectué leurs modifications sur un seul et même fichier ?__

Le prochain exercice offre une réponse à cette question.

::: {.exercise}
## Exercice 2 : Gérer les conflits quand on travaille sur le même fichier

Dans la continuité de l'exercice précédent, chaque personne va travailler sur les fichiers des autres membres de l'équipe.

1️⃣ Les deux ou trois développeurs ajoutent la ponctuation et les majuscules du fichier du premier développeur.

2️⃣ Ils sautent une ligne et ajoutent une phrase (pas tous la même).

3️⃣ Valider les résultats (`git add .` et `commit`) et faire un `push`

4️⃣ La personne la plus rapide n'a, normalement, rencontré aucune difficulté (elle peut s'arrêter temporairement pour regarder ce qui va se passer chez les voisins). Les autres voient leur `push` refusé et doivent faire un `pull`. 

💥 Il y a conflit, ce qui doit être signalé par un message du type :

```python
Auto-merging XXXXXX
CONFLICT (content): Merge conflict in XXXXXX.md
Automatic merge failed; fix conflicts and then commit the result.
```

5️⃣ Etudier le résultat de `git status` 

6️⃣ Si vous ouvrez les fichiers incriminés, vous devriez voir des balises du type

```python
<<<<<<< HEAD
this is some content to mess with
content to append
=======
totally different content to merge later
>>>>>>> new_branch_to_merge_later
```

7️⃣ Corriger à la main les fichiers en choisissant, pour chaque ligne, la version qui vous convient et en retirant les balises. Valider en faisant: 

~~~python
git add . && git commit -m "Résolution du conflit par XXXX"
~~~

Remplacer `XXXX` par votre nom. La balise `&&` permet d'enchaîner, en une seule ligne de code, les deux commandes.

8️⃣ Faire un push. Pour la dernière personne, refaire les opérations 4 à 8

:::

`Git` permet donc de travailler, en même temps, sur le même fichier et de limiter le nombre de gestes manuels nécessaires pour faire la fusion. Lorsqu'on travaille sur des bouts différents du même fichier, on n'a même pas besoin de faire de modification manuelle, la fusion peut être automatique.

`Git` est un outil très puissant. Mais, il ne remplace pas une bonne organisation du travail. Vous l'avez vu, ce mode de travail uniquement sur `main` peut être pénible. Les branches prennent tout leur sens dans ce cas. 

::: {.exercise}
## Exercice 3 : Gestion des branches

1️⃣ Le.la mainteneur.euse va contribuer directement dans `main` et ne crée pas de branche. Chaque développeur crée une branche, en local nommée `contrib-XXXXX` où `XXXXX` est le prénom: 

~~~shell
git checkout -b contrib-XXXXX
~~~

2️⃣ Chaque membre du groupe crée un fichier `README.md` où il écrit une phrase sujet-verbe-complément. Le mainteneur est le seul à ajouter un titre dans le README (qu'il _commit_ dans `main`).

3️⃣ Chacun _push_ le produit de son subconscient sur le dépôt.

4️⃣ Les développeurs ouvrent, chacun, une _pull request_ sur `Github` de leur branche vers `main`. Ils lui donnent un titre explicite. 

5️⃣ Dans la discussion de chaque `pull request`, le mainteneur demande au développeur d'intégrer le titre qu'il a écrit.  

6️⃣ Chaque développeur, en local, intègre cette modification en faisant


```shell
# Pour être sûr d'être sur sa propre branche
git checkout branche-XXXX
git merge main
```

Régler le conflit et valider (`add` et `commit`). Pousser le résultat. Le mainteneur choisit une des `pull request` et la valide avec l'option `squash commits`. Vérifier sur la page d'accueil le résultat.

7️⃣ L'auteur (si 2 développeurs)  ou les deux auteurs (si 3 développeurs) de la `pull request` non validée doivent à nouveau répéter l'opération 6. 

8️⃣ Une fois le conflit de version réglé et poussé, le mainteneur valide la `pull request` selon la même procédure que précédemment. 

9️⃣ Vérifier l'arborescence du dépôt dans `Insights > Network`. Votre arbre doit avoir une forme caractéristique de ce qu'on appelle le `Github flow`:

![](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/slides/img/ghflow.png)

:::

Il n'est absolument pas obligatoire que chaque projet collaboratif choisisse ce mode de collaboration. Pour de nombreux projets, où on édite pas le même bout de fichier en même temps, passer directement par `main` est suffisant. Le mode ci-dessus est important pour des projets conséquents, où la branche `main` se doit d'être irréprochable parce que, par exemple, elle entraîne une série de tests automatisés et le déploiement automatisé d'un livrable. Mais pour des projets plus modestes, il n'est pas indispensable d'aller dans un formalisme extrême. Le bon usage de `Git` est un usage pragmatique où celui-ci est utilisé pour ses avantages et où l'organisation du travail s'adapte à ceux-ci. 


# Conclusion

Ces chapitres consacrés à `Git` ont permis de démystifier ce logiciel en illustrant, par la pratique, les principaux concepts et la gymnastique quotidienne. Ils visent à faire économiser de précieuses heures car l'apprentissage de `Git` en autodidacte est souvent frustrant et incomplet. Il est indispensable de garder cette habitude de faire du `Git` sur ses projets. Ces derniers seront de meilleure qualité.

Nous n'avons vu que les fonctionnalités basiques de `Git` et de `Github`. L'objet du cours de 3e année de l'ENSAE de ["Mise en production de projets _data science_"](https://ensae-reproductibilite.github.io/website/) est de faire découvrir d'autres fonctionnalités de `Git` et `Github` qui permettent de produire des projets plus ambitieux, plus fiables et plus évolutifs.
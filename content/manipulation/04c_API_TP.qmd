---
title: "Récupérer des données avec des API depuis Python"
title-en: "Retrieve data with APIs from Python"
tags:
  - API
  - JSON
  - openfood
  - Exercice
  - Manipulation
categories:
  - Exercice
  - Manipulation
description: |
  Les __API__ (_Application Programming Interface_) sont un mode d'accès aux
  données en expansion. Grâce aux API, l'automatisation de scripts
  est facilitée puisqu'il n'est plus nécessaire de stocker un fichier,
  et gérer ses différentes versions, mais uniquement de requêter une base
  et laisser au producteur de données le soin de gérer les mises à jour de
  la base.  
description-en: |
  __APIs__ (_Application Programming Interface_) are an expanding way of accessing data. Thanks to APIs, script automation is facilitated since it is no longer necessary
  to store a file and manage its different versions, but only to query a database
  and let the data producer handle the updates.
image: map_buffer.png
echo: false
---

::: {.content-visible when-format="html"}

:::: {.content-visible when-profile="fr"}
Pour essayer les exemples présents dans ce tutoriel : 
::::
:::: {.content-visible when-profile="en"}
If you want to try the examples in this tutorial:
::::

{{< include "../../build/_printBadges.qmd" >}}

:::

::: {.content-visible when-format="ipynb"}
{{warninglang}}
:::



::: {.content-visible when-profile="fr"}

# Introduction : Qu'est-ce qu'une API ?  

## Définition

Pour expliquer le principe d'une API, nous allons reprendre le début de 
la fiche dédiée aux API dans la documentation collaborative sur le logiciel `R` (un logiciel de traitement statistique proche de `Python`)
[utilitR](https://www.book.utilitr.org/api.html) que je recommande de lire :

> Une *Application Programming Interface* (ou API) est une interface de programmation qui permet d’utiliser une application existante pour restituer des données. Le terme d’API peut être paraître intimidant, mais il s’agit simplement d’une façon de mettre à disposition des données : plutôt que de laisser l’utilisateur consulter directement des bases de données (souvent volumineuses et complexes), l’API lui propose de formuler une requête qui est traitée par le serveur hébergeant la base de données, puis de recevoir des données en réponse à sa requête.
> 
> D’un point de vue informatique, une API est une porte d’entrée clairement identifiée par laquelle un logiciel offre des services à d’autres logiciels (ou utilisateurs). L’objectif d’une API est de fournir un point d’accès à une fonctionnalité qui soit facile à utiliser et qui masque les détails de la mise en oeuvre. Par exemple, l’API Sirene permet de récupérer la raison sociale d’une entreprise à partir de son identifiant Siren en interrogeant le référentiel disponible sur Internet directement depuis un script R, sans avoir à connaître tous les détails du répertoire Sirene.
>
> À l’Insee comme ailleurs, la connexion entre les bases de données pour les nouveaux projets tend à se réaliser par des API. L’accès à des données par des API devient ainsi de plus en plus commun et est amené à devenir une compétence de base de tout utilisateur de données.
>
> [`utilitR`](https://www.book.utilitr.org/api.html)

:::

::: {.content-visible when-profile="en"}

# Introduction: What is an API?

## Definition

To explain the principle of an API, I will use the beginning of the dedicated section in the collaborative documentation on `R` (a statistical software close to `Python`) named [utilitR](https://www.book.utilitr.org/api.html) that I recommend reading:

> An *Application Programming Interface* (or API) is a programming interface that allows the use of an existing application to retrieve data. The term API might seem intimidating, but it is simply a way of making data available: instead of letting the user directly access databases (often large and complex), the API allows them to submit a request that is processed by the server hosting the database, and then receive data in response to their request.
> 
> From a computing perspective, an API is a clearly identified entry point through which software offers services to other software (or users). The goal of an API is to provide an access point to a functionality that is easy to use and hides the implementation details. For example, the Sirene API allows retrieving the legal name of a company from its Siren identifier by querying the available reference on the Internet directly from an R script, without needing to know all the details of the Sirene directory.
>
> At Insee and elsewhere, the connection between databases for new projects tends to be done via APIs. Access to data through APIs is becoming increasingly common and is expected to become a basic skill for any data user.
>
> [`utilitR`](https://www.book.utilitr.org/api.html)

:::


::: {.content-visible when-profile="fr"}

## Avantages des API

A nouveau, citons la documentation [utilitR](https://www.book.utilitr.org/api.html) :

Les API présentent de multiples avantages :

> * Les API rendent les programmes plus reproductibles. En effet, grâce aux API, il est possible de mettre à jour facilement les données utilisées par un programme si celles-ci évoluent. Cette flexibilité accrue pour l’utilisateur évite au producteur de données d’avoir à réaliser de multiples extractions, et réduit le problème de la coexistence de versions différentes des données.
> * Grâce aux API, l’utilisateur peut extraire facilement une petite partie d’une base de données plus conséquente.
> * Les API permettent de mettre à disposition des données tout en limitant le nombre de personnes ayant accès aux bases de données elles-mêmes.
> * Grâce aux API, il est possible de proposer des services sur mesure pour les utilisateurs (par exemple, un accès spécifique pour les gros utilisateurs).
>
> [`utilitR`](https://www.book.utilitr.org/api.html)

L'utilisation accrue d'API dans le cadre de stratégies open-data est l'un
des piliers des 15 feuilles de route ministérielles
en matière d’ouverture, de circulation et de valorisation des données publiques.

:::

::: {.content-visible when-profile="en"}

## Benefits of APIs

Again, quoting the [utilitR](https://www.book.utilitr.org/api.html) documentation:

APIs offer multiple advantages:

> * APIs make programs more reproducible. Indeed, with APIs, it is possible to easily update the data used by a program if it changes. This increased flexibility for the user saves the data producer from having to perform multiple extractions and reduces the issue of coexisting different versions of the data.
> * With APIs, the user can easily extract a small part of a larger database.
> * APIs allow data to be made available while limiting the number of people who have access to the databases themselves.
> * APIs can provide customized services for users (e.g., specific access for heavy users).
>
> [`utilitR`](https://www.book.utilitr.org/api.html)

The increased use of APIs as part of open-data strategies is one of the pillars of the 15 ministerial roadmaps on the openness, circulation, and valorization of public data.

:::

::: {.content-visible when-profile="fr"}

## Utilisation des API

Citons encore une fois
la documentation [`utilitR`](https://www.book.utilitr.org/api.html) :

> Une API peut souvent être utilisée de deux façons : par une interface Web, et par l’intermédiaire d’un logiciel (R, Python…). Par ailleurs, les API peuvent être proposées avec un niveau de liberté variable pour l’utilisateur :
> 
> * soit en libre accès (l’utilisation n’est pas contrôlée et l’utilisateur peut utiliser le service comme bon lui semble) ;
> * soit via la génération d’un compte et d’un jeton d’accès qui permettent de sécuriser l’utilisation de l’API et de limiter le nombre de requêtes.
>
> [`utilitR`](https://www.book.utilitr.org/api.html)

De nombreuses API nécessitent une authentification, c'est-à-dire un 
compte utilisateur afin de pouvoir accéder aux données. 
Dans un premier temps, 
nous regarderons exclusivement les API ouvertes sans restriction d'accès.  
Certains exercices et exemples permettront néanmoins d'essayer des API
avec restrictions d'accès. 

:::

::: {.content-visible when-profile="en"}

## Using APIs

Once again, quoting the [`utilitR`](https://www.book.utilitr.org/api.html) documentation:

> An API can often be used in two ways: through a web interface or through software (R, Python, etc.). Moreover, APIs can be offered with varying degrees of freedom for the user:
> 
> * either with free access (use is not controlled, and the user can use the service as they see fit);
> * or by generating an account and an access token that secure the use of the API and limit the number of requests.
>
> [`utilitR`](https://www.book.utilitr.org/api.html)

Many APIs require authentication, meaning a user account to access the data. Initially, we will focus exclusively on open APIs without access restrictions. However, some exercises and examples will allow you to try out APIs with access restrictions.

:::

::: {.content-visible when-profile="fr"}

# Requêter une API

## Principe général

> L’utilisation de l’interface Web est utile dans une démarche exploratoire mais trouve rapidement ses limites, notamment lorsqu’on consulte régulièrement l’API. L’utilisateur va rapidement se rendre compte qu’il est beaucoup plus commode d’utiliser une API via un logiciel de traitement pour automatiser la consultation ou pour réaliser du téléchargement de masse. De plus, l’interface Web n’existe pas systématiquement pour toutes les API.
> 
> Le mode principal de consultation d’une API consiste à adresser une requête à cette API via un logiciel adapté (R, Python, Java…). Comme pour l’utilisation d’une fonction, l’appel d’une API comprend des paramètres qui sont détaillées dans la documentation de l’API. 
>
> [`utilitR`](https://www.book.utilitr.org/api.html)


Voici les éléments importants à avoir en tête sur les requêtes (j'emprunte encore
à [`utilitR`](https://www.book.utilitr.org/api.html)) :

* Le __point d’entrée__ d’un service offert par une API se présente sous la forme d’une URL (adresse web).
Chaque service proposé par une API a sa propre URL. Par exemple, dans le cas de l’OpenFood Facts,
l'URL à utiliser pour obtenir des informations sur un produit particulier (l'identifiant `737628064502`)
est <https://world.openfoodfacts.org/api/v0/product/737628064502.json>
* Cette URL doit être complétée avec différents paramètres qui précisent la requête (par exemple l’identifiant Siren). Ces paramètres viennent s’ajouter à l’URL, souvent à la suite de `?`. Chaque service proposé par une API a ses propres paramètres, détaillés dans la documentation. 
* Lorsque l’utilisateur soumet sa requête, l’API lui renvoie une réponse structurée contenant l’ensemble des informations demandées. Le résultat envoyé par une API est majoritairement aux formats `JSON` ou `XML` (deux formats dans lesquels les informations sont hiérarchisées de manière emboitée). Plus rarement, certains services proposent une information sous forme plate (de type csv).

Du fait de la dimension hiérarchique des formats `JSON` ou `XML`,
le résultat n’est pas toujours facile à récupérer mais
`Python` propose d'excellents outils pour cela (meilleurs que ceux de `R`).
Certains packages, notamment `json`, facilitent l’extraction de champs d’une sortie d’API.
Dans certains cas, des _packages_ spécifiques à une API ont été créés pour simplifier l’écriture d’une requête ou la récupération du résultat. Par exemple, le package
[`pynsee`](https://github.com/InseeFrLab/Py-Insee-Data/tree/main/pynsee)
propose des options qui seront retranscrites automatiquement dans l'URL de 
requête pour faciliter le travail sur les données Insee. 

:::

::: {.content-visible when-profile="en"}

# Querying an API

## General principle

> Using the web interface is useful in an exploratory approach but quickly reaches its limits, especially when regularly consulting the API. The user will quickly realize that it is much more convenient to use an API through processing software to automate queries or perform bulk downloads. Moreover, a web interface does not always exist for all APIs.
> 
> The primary way to access an API is by sending a request to it through appropriate software (R, Python, Java, etc.). As with using a function, calling an API involves parameters that are detailed in the API documentation.
>
> [`utilitR`](https://www.book.utilitr.org/api.html)

Here are the important elements to keep in mind about requests (again borrowing from [`utilitR`](https://www.book.utilitr.org/api.html)):

* The __entry point__ of a service offered by an API is presented as a URL (web address). Each service provided by an API has its own URL. For example, in the case of OpenFood Facts, the URL to use to get information on a specific product (identifier `737628064502`) is <https://world.openfoodfacts.org/api/v0/product/737628064502.json>
* This URL must be supplemented with different parameters that specify the request (e.g., the Siren identifier). These parameters are added to the URL, often following a `?`. Each service provided by an API has its own parameters, detailed in the documentation.
* When the user submits their request, the API sends back a structured response containing all the requested information. The result returned by an API is mainly in `JSON` or `XML` formats (two formats where information is nested hierarchically). More rarely, some services provide information in a flat format (like csv).

Due to the hierarchical nature of the `JSON` or `XML` formats, the result is not always easy to retrieve, but `Python` offers excellent tools for this (better than those in `R`). Some packages, particularly `json`, facilitate the extraction of fields from an API output. In some cases, specific packages for an API have been created to simplify writing a request or retrieving the result. For example, the [`pynsee`](https://github.com/InseeFrLab/Py-Insee-Data/tree/main/pynsee) package offers options that are automatically translated into the request URL to facilitate working with Insee data.

:::

::: {.content-visible when-profile="fr"}

## Illustration avec une API de l'Ademe pour obtenir des diagnostics énergétiques

Le diagnostic de performance énergétique (DPE)
renseigne sur la performance énergétique d’un logement ou d’un bâtiment,
en évaluant sa consommation d’énergie et son impact en termes d’émissions de gaz à effet de serre.

Les données des performances énergétiques des bâtiments sont 
mises à disposition par l'[Ademe](https://data.ademe.fr/datasets/dpe-france).
Comme ces données sont relativement
volumineuses, une API peut être utile lorsqu'on ne s'intéresse
qu'à un sous-champ des données.
Une documentation et un espace de test de l'API sont disponibles
sur le site [API GOUV](https://api.gouv.fr/documentation/api_dpe_logements)^[La documentation est également disponible [ici](https://koumoul.com/openapi-viewer/?proxy=false&hide-toolbar=true&url=https://koumoul.com/s/data-fair/api/v1/datasets/dpe-france/api-docs.json)].

Supposons qu'on désire récupérer une centaine de valeurs pour la commune
de Villieu-Loyes-Mollon dans l'Ain (code Insee 01450).

L'API comporte plusieurs points d'entrée. Globalement, la racine 
commune est :

> https://koumoul.com/data-fair/api/v1/datasets/dpe-france

Ensuite, en fonction de l'API désirée, on va ajouter des éléments
à cette racine. En l'occurrence, on va utiliser 
l'API `field` qui permet de récupérer des lignes en fonction d'un
ou plusieurs critères (pour nous, la localisation géographique):

L'exemple donné dans la documentation technique est 

> GET https://koumoul.com/data-fair/api/v1/datasets/dpe-france/values/{field}

ce qui en `Python` se traduira par l'utilisation de la méthode `get` du
package `Request`
sur un url dont la structure est la suivante :

- il commencera par `https://koumoul.com/data-fair/api/v1/datasets/dpe-france/values/` ;
- il sera ensuite suivi par des paramètres de recherche. Le champ `{field}` 
commence ainsi généralement par un `?` qui permet ensuite de spécifier des paramètres
sous la forme `nom_parameter=value`

A la lecture de la documentation, les premiers paramètres qu'on désire :

- Le nombre de pages, ce qui nous permet d'obtenir un certain nombre d'échos. On
va seulement récupérer 10 pages ce qui correspond à une centaine d'échos. On va
néanmoins préciser qu'on veut 100 échos
- Le format de sortie. On va privilégier le `JSON` qui est un format standard dans le
monde des API. `Python` offre beaucoup de flexibilité grâce à l'un de
ses objets de base, à savoir le dictionnaire (type `dict`), pour manipuler de tels 
fichiers
- Le code commune des données qu'on désire obtenir. Comme on l'a évoqué,
on va récupérer les données dont le code commune est `01450`. D'après la doc, 
il convient de passer le code commune sous le format:
`code_insee_commune_actualise:{code_commune}`. Pour éviter tout risque de 
mauvais formatage, on va utiliser `%3A` pour signifier `:`,  `%2A` pour signifier `*` et 
`%22` pour signifier `"`.
- D'autres paramètres annexes, suggérés par la documentation

Cela nous donne ainsi un URL dont la structure est la suivante :

:::

::: {.content-visible when-profile="en"}

## Example using an Ademe API to get energy diagnostics

The energy performance diagnostic (DPE) provides information on the energy performance of a home or building by assessing its energy consumption and its impact in terms of greenhouse gas emissions in France.

The energy performance data of buildings is made available by [Ademe](https://data.ademe.fr/datasets/dpe-france). Since this data is relatively large, an API can be useful when only interested in a subset of the data. Documentation and a testing area for the API are available on the [API GOUV](https://api.gouv.fr/documentation/api_dpe_logements) site^[Documentation is also available [here](https://koumoul.com/openapi-viewer/?proxy=false&hide-toolbar=true&url=https://koumoul.com/s/data-fair/api/v1/datasets/dpe-france/api-docs.json)].

Suppose we want to retrieve about a hundred values for the commune of Villieu-Loyes-Mollon in Ain (Insee code 01450).

The API has several entry points. Generally, the common root is:

> https://koumoul.com/data-fair/api/v1/datasets/dpe-france

Then, depending on the desired API, we will add elements to this root. In this case, we will use the `field` API, which allows us to retrieve rows based on one or more criteria (for us, the geographic location):

The example given in the technical documentation is

> GET https://koumoul.com/data-fair/api/v1/datasets/dpe-france/values/{field}

which in `Python` will translate to using the `get` method from the `Request` package on a URL structured as follows:

- it will start with `https://koumoul.com/data-fair/api/v1/datasets/dpe-france/values/`;
- it will then be followed by search parameters. The `{field}` field typically starts with a `?`, allowing us to specify parameters in the format `parameter_name=value`.

Based on the documentation, the first parameters we want are:

- The number of pages, allowing us to get a certain number of results. We will only retrieve 10 pages, which corresponds to about 100 results. However, we will specify that we want 100 results.
- The output format. We will prefer `JSON`, which is a standard format in the API world. `Python` offers great flexibility with one of its basic objects, the dictionary (type `dict`), for handling such files.
- The commune code of the data we want to retrieve. As mentioned earlier, we will retrieve data where the commune code is `01450`. According to the documentation, the commune code should be passed in the format: `code_insee_commune_actualise:{commune_code}`. To avoid any risk of misformatting, we will use `%3A` to denote `:`, `%2A` to denote `*`, and `%22` to denote `"`.
- Other ancillary parameters suggested by the documentation.

This gives us a URL with the following structure:

:::

{{< include "04_api/_example_dpe_root.qmd" >}}


::: {.content-visible when-profile="fr"}

Si vous introduisez cet URL dans votre navigateur, vous devriez aboutir
sur un `JSON` non formaté[^1]. En `Python`,
on peut utiliser `requests` pour récupérer les données[^2] :


[^1]: Le JSON est un format très apprécié dans le domaine du *big data*
car il permet d'empiler des données
qui ne sont pas complètes. Il 
s'agit d'un des formats privilégiés du paradigme No-SQL pour lequel
cet [excellent cours](http://b3d.bdpedia.fr/) propose plus de détails.

[^2]: Suivant les API, nous avons soit besoin de rien de plus si nous parvenons directement à obtenir un json, soit devoir utiliser un *parser* comme `BeautifulSoup` dans le cas contraire. Ici, le JSON peut être formaté relativement aisément.

:::

::: {.content-visible when-profile="en"}

If you enter this URL into your browser, you should land on an unformatted `JSON`[^1]. In `Python`, you can use `requests` to retrieve the data[^2]:

[^1]: JSON is a highly appreciated format in the field of *big data* because it allows stacking incomplete data. It is one of the preferred formats of the No-SQL paradigm, for which this [excellent course](http://b3d.bdpedia.fr/) offers a gentle introduction.

[^2]: Depending on the API, we either need nothing more if we directly obtain a JSON, or we may need to use a parser like `BeautifulSoup` otherwise. Here, the JSON can be formatted relatively easily.

:::

```{python}
#| echo: true
import requests
import pandas as pd

req = requests.get(url_api)
wb = req.json()
```

::: {.content-visible when-profile="fr"}

Prenons par exemple les 1000 premiers caractères du résultat, pour se donner
une idée du résultat et se convaincre que notre filtre au niveau
communal est bien passé :

:::

::: {.content-visible when-profile="en"}
Let's take, for example, the first 1000 characters of the result to get an idea of the output and confirm that our filter at the communal level has been correctly applied:
:::

```{python}
#| echo: true
#| output: asis
print(req.content[:1000])
```

::: {.content-visible when-profile="fr"}

Ici, il n'est même pas nécessaire en première approche 
d'utiliser le package `json`, l'information
étant déjà tabulée dans l'écho renvoyé (on a la même information pour tous les pays):
On peut donc se contenter de `Pandas` pour transformer nos données en 
`DataFrame` et `Geopandas` pour convertir en données
géographiques :

:::

{{< include "04_api/_example_dpe.qmd" >}}

::: {.content-visible when-profile="en"}
Here, it is not even necessary at first to use the `json` package since the information is already tabulated in the echoed output (we have the same information for all countries):
So we can simply use `Pandas` to transform our data into a `DataFrame` and `Geopandas` to convert it into geographical data:

:::

::: {.content-visible when-profile="fr"}

## Un catalogue incomplet d'API existantes

De plus en plus de sites mettent des API à disposition des développeurs et autres curieux. 

Pour en citer quelques-unes très connues : 

- `Twitter` <i class="fab fa-twitter"></i> : <https://dev.twitter.com/rest/public>
- `Facebook` <i class="fab fa-facebook"></i> : <https://developers.facebook.com/>
- `Instagram` <i class="fab fa-instagram"></i> : <https://www.instagram.com/developer/>
- `Spotify` <i class="fab fa-spotify"></i> : <https://developer.spotify.com/web-api/>

Cependant, il est intéressant de ne pas se restreindre à celles-ci dont les 
données ne sont pas toujours les plus intéressantes. Beaucoup
de producteurs de données, privés comme publics, mettent à disposition 
leurs données sous forme d'API.

- [API gouv](https://api.gouv.fr/) : beaucoup d'API officielles de l'Etat français 
et accès à de la documentation
- Insee : https://api.insee.fr/catalogue/ et [`pynsee`](https://github.com/InseeFrLab/Py-Insee-Data/tree/main/pynsee)
- Pôle Emploi : https://www.emploi-store-dev.fr/portail-developpeur-cms/home.html
- SNCF : https://data.sncf.com/api
- Banque Mondiale : https://datahelpdesk.worldbank.org/knowledgebase/topics/125589

:::

::: {.content-visible when-profile="en"}

## An incomplete catalog of existing APIs

More and more websites are providing APIs for developers and curious individuals alike.

To name a few well-known ones:

- `Twitter` <i class="fab fa-twitter"></i>: <https://dev.twitter.com/rest/public>
- `Facebook` <i class="fab fa-facebook"></i>: <https://developers.facebook.com/>
- `Instagram` <i class="fab fa-instagram"></i>: <https://www.instagram.com/developer/>
- `Spotify` <i class="fab fa-spotify"></i>: <https://developer.spotify.com/web-api/>

However, it is worth not limiting ourselves to these, whose data is not always the most interesting. Many data producers, both private and public, make their data available through APIs.

- [API gouv](https://api.gouv.fr/): many official APIs from the French government and access to documentation
- Insee: https://api.insee.fr/catalogue/ and [`pynsee`](https://github.com/InseeFrLab/Py-Insee-Data/tree/main/pynsee)
- Pôle Emploi: https://www.emploi-store-dev.fr/portail-developpeur-cms/home.html
- SNCF: https://data.sncf.com/api
- World Bank: https://datahelpdesk.worldbank.org/knowledgebase/topics/125589

:::


::: {.content-visible when-profile="fr"}

# L'API DVF : accéder à des données de transactions immobilières simplement

::::: {.important}
Cette partie nécessite une mise à jour pour privilégier l'API DVF du Cerema
:::::

Le site `DVF` (demandes de valeurs foncières) permet de visualiser toutes les données relatives aux mutations à titre onéreux (ventes de maisons, appartements, garages...) réalisées durant les 5 dernières années.

Un site de visualisation est disponible sur <https://app.dvf.etalab.gouv.fr/>.

Ce site est très complet quand il s'agit de connaître le prix moyen au mètre
carré d'un quartier ou de comparer des régions entre elles. 
L'API DVF permet d'aller plus loin afin de récupérer les résultats dans 
un logiciel de traitement de données. Elle a été réalisée par
[Christian Quest](https://github.com/cquest) et le code
source est disponible sur Github <a href="https://github.com/cquest/dvf_as_api" class="github"><i class="fab fa-github"></i></a>.

Les critères de recherche sont les suivants :
- `code_commune` = code INSEE de la commune (ex: 94068)
- `section` = section cadastrale (ex: 94068000CQ)
- `numero_plan` = identifiant de la parcelle, (ex: 94068000CQ0110)
- `lat` + `lon` + `dist` (optionnel): pour une recherche géographique, dist est par défaut un rayon de 500m
- `code_postal`

Les filtres de sélection complémentaires :
- `nature_mutation` (Vente, etc)
- `type_local` (Maison, Appartement, Local, Dépendance)

Les requêtes sont de la forme : `http://api.cquest.org/dvf?code_commune=29168`. 

:::

::: {.content-visible when-profile="en"}

# The DVF API: accessing real estate transaction data easily

::::: {.important}
This section needs updating to prioritize the Cerema DVF API
:::::


The `DVF` (demand for property values) website allows users to view all data related to transactions (sales of houses, apartments, garages, etc.) conducted over the past five years.

A visualization site is available at <https://app.dvf.etalab.gouv.fr/>.

This site is very comprehensive when it comes to knowing the average price per square meter of a neighborhood or comparing regions. The DVF API allows you to go further by retrieving results in a data processing software. It was created by [Christian Quest](https://github.com/cquest) and the source code is available on Github <a href="https://github.com/cquest/dvf_as_api" class="github"><i class="fab fa-github"></i></a>.

The search criteria are as follows:

- `code_commune` = INSEE code of the municipality (e.g., 94068)
- `section` = cadastral section (e.g., 94068000CQ)
- `numero_plan` = plot identifier (e.g., 94068000CQ0110)
- `lat` + `lon` + `dist` (optional): for a geographical search, `dist` is by default a 500m radius
- `code_postal`

Additional selection filters:
- `nature_mutation` (Sale, etc.)
- `type_local` (House, Apartment, Local, Dependency)

Requests are of the form: `http://api.cquest.org/dvf?code_commune=29168`.

:::


{{< include "04_api/_exo1.qmd" >}}
{{< include "04_api/_exo1_solution.qmd" >}}


::: {.content-visible when-profile="fr"}

On va faire une carte des ventes en affichant le prix de l'achat.
La cartographie réactive sera présentée dans les chapitres
consacrés à la visualisation de données.

Supposons que le DataFrame des ventes s'appelle `ventes`. Il faut d'abord le
convertir
en objet `geopandas`. 

:::

::: {.content-visible when-profile="en"}

Let's create a map of the sales, displaying the purchase price.
The interactive map will be presented in the chapters on data visualization.

Assuming the sales DataFrame is called `ventes`, we first need to convert it into a `geopandas` object.

:::

```{python}
#| eval: false

ventes = ventes.dropna(subset = ['lat','lon'])
ventes = gpd.GeoDataFrame(ventes, geometry=gpd.points_from_xy(ventes.lon, ventes.lat))
ventes
```

::: {.content-visible when-profile="fr"}

Avant de faire une carte, on va convertir 
les limites de la commune de Plogoff en geoJSON pour faciliter 
sa représentation avec `folium`
([voir la doc `geopandas` à ce propos](https://geopandas.readthedocs.io/en/latest/gallery/polygon_plotting_with_folium.html#Add-polygons-to-map)):

:::

::: {.content-visible when-profile="en"}

Before making a map, we will convert the boundaries of the Plogoff municipality to GeoJSON for easier representation with `folium` ([see the `geopandas` documentation](https://geopandas.readthedocs.io/en/latest/gallery/polygon_plotting_with_folium.html#Add-polygons-to-map)):

:::

```{python}
#| eval: false
geo_j = plgf.to_json()
```

::: {.content-visible when-profile="fr"}

Pour représenter graphiquement, on peut utiliser le code suivant (essayez de
le comprendre et pas uniquement de l'exécuter). 

:::

::: {.content-visible when-profile="en"}

To graphically represent this, you can use the following code (try to understand it, not just execute it).

:::

```{python}
#| output: hide
#| eval: false
import folium
import numpy as np

ventes['map_color'] = pd.qcut(ventes['valeur_fonciere'], [0,0.8,1], labels = ['lightblue','red'])
ventes['icon'] = np.where(ventes['type_local']== 'Maison', "home", "")
ventes['num_voie_clean'] = np.where(ventes['numero_voie'].isnull(), "", ventes['numero_voie'])
ventes['text'] = ventes.apply(lambda s: "Adresse: {num} {voie} <br>Vente en {annee} <br>Prix {prix:.0f} €".format(
                        num = s['num_voie_clean'],
                        voie = s["voie"],
                        annee = s['date_mutation'].split("-")[0],
                        prix = s["valeur_fonciere"]),
             axis=1)
             
center = ventes[['lat', 'lon']].mean().values.tolist()
sw = ventes[['lat', 'lon']].min().values.tolist()
ne = ventes[['lat', 'lon']].max().values.tolist()

m = folium.Map(location = center, tiles='OpenStreetMap')

# I can add marker one by one on the map
for i in range(0,len(ventes)):
    folium.Marker([ventes.iloc[i]['lat'], ventes.iloc[i]['lon']],
                  popup=ventes.iloc[i]['text'],
                  icon=folium.Icon(color=ventes.iloc[i]['map_color'], icon=ventes.iloc[i]['icon'])).add_to(m)

m.fit_bounds([sw, ne])
```


```{python}
#| echo : true
#| eval: false
# Afficher la carte
m
```



::: {.content-visible when-profile="fr"}

# Géocoder des données grâce aux API officielles

Pour pouvoir faire cet exercice 

:::

::: {.content-visible when-profile="en"}

# Geocode data using official APIs

To be able to do this exercise

:::

```{python}
#| output: false
#| echo: true
!pip install xlrd
```


::: {.content-visible when-profile="fr"}

Jusqu'à présent, nous avons travaillé sur des données où la dimension
géographique était déjà présente ou relativement facile à intégrer. 

Ce cas idéal ne se rencontre pas nécessairement dans la pratique. 
On dispose parfois de localisations plus ou moins précises et plus ou
moins bien formattées pour déterminer la localisation de certains
lieux. 

Depuis quelques années, un service officiel de géocodage a été mis en place.
Celui-ci est gratuit et permet de manière efficace de coder des adresses
à partir d'une API. Cette API, connue sous le
nom de la __Base d'Adresses Nationale (BAN)__ a bénéficié de la mise en commun de données de plusieurs
acteurs (collectivités locales, Poste) et de compétences d'acteurs
comme Etalab. La documentation de celle-ci est disponible à l'adresse
<https://api.gouv.fr/les-api/base-adresse-nationale>.


Pour illustrer la manière de géocoder des données avec `Python`, nous
allons partir de la base
[des résultats des auto-écoles à l'examen du permis sur l'année 2018](https://www.data.gouv.fr/fr/datasets/taux-de-reussite-auto-ecole-par-auto-ecole-en-2018/).

Ces données nécessitent un petit peu de travail pour être propres à une 
analyse statistique.
Après avoir renommé les colonnes, nous n'allons conserver que
les informations relatives au permis B (permis voiture classique) et
les auto-écoles ayant présenté au moins 20 personnes à l'examen. 

:::

::: {.content-visible when-profile="en"}

Up until now, we have worked on data where the geographical dimension was already present or relatively easy to integrate.

This ideal case is not necessarily encountered in practice. Sometimes we have more or less precise and more or less well-formatted locations to determine the location of certain places.

For a few years now, an official geocoding service has been set up. This service is free and allows us to efficiently code addresses using an API. This API, known as the __Base d'Adresses Nationale (BAN)__, has benefited from the pooling of data from several actors (local authorities, Post Office) and the skills of actors such as Etalab. The documentation for this API is available at the address <https://api.gouv.fr/les-api/base-adresse-nationale>.

To illustrate how to geocode data with `Python`, we will start with the database of [driving school results for the driving test in 2018](https://www.data.gouv.fr/fr/datasets/taux-de-reussite-auto-ecole-par-auto-ecole-en-2018/).

This data requires a bit of work to be suitable for statistical analysis. After renaming the columns, we will only keep the information related to the B license (standard car license) and driving schools that have presented at least 20 people to the exam.

:::

{{< include "04_api/_exo2_preliminary1.qmd" >}}


::: {.content-visible when-profile="fr"}

Nos informations géographiques prennent la forme suivante : 

:::

::: {.content-visible when-profile="en"}

Our geographical information takes the following form:

:::

```{python}
#| echo: true
df.loc[:,['Adresse','CP','Ville']].head(5)
```

::: {.content-visible when-profile="fr"}

Autrement dit, nous disposons d'une adresse, d'un code postal et d'un nom de ville. Ces informations peuvent servir à faire une recherche sur la localisation d'une auto-école puis, éventuellement, de se restreindre à un sous-échantillon.

:::

::: {.content-visible when-profile="en"}

In other words, we have an address, a zip code, and a city name. This information can be used to search for the location of a driving school and possibly restrict it to a subsample.

:::

::: {.content-visible when-profile="fr"}

## Utiliser l'API BAN

La [documentation officielle de l'API](https://adresse.data.gouv.fr/api-doc/adresse) propose un certain nombre d'exemples de manière de géolocaliser des données. Dans notre situation, deux points d'entrée paraissent intéressants:

* __L'API `/search/`__ qui représente un point d'entrée avec des URL de la forme `https://api-adresse.data.gouv.fr/search/?q=\<adresse\>&postcode=\<codepostal\>&limit=1`
* __L'API `/search/csv`__ qui prend un CSV en entrée et retourne ce même CSV avec les observations géocodées. La requête prend la forme suivante, en apparence moins simple à mettre en oeuvre : `curl -X POST -F data=@search.csv -F columns=adresse -F columns=postcode https://api-adresse.data.gouv.fr/search/csv/`

La tentation serait forte d'utiliser la première méthode avec une boucle sur les lignes de notre `DataFrame` pour géocoder l'ensemble de notre jeu de données. Cela serait néanmoins une mauvaise idée car les communications entre notre session `Python` et les serveurs de l'API seraient beaucoup trop nombreuses pour offrir des performances satisfaisantes.

Pour vous en convaincre, vous pouvez exécuter le code suivant sur un petit échantillon de données (par exemple 100 comme ici) et remarquer que le temps d'exécution est assez important

:::

::: {.content-visible when-profile="en"}

## Using the BAN API

The [official API documentation](https://adresse.data.gouv.fr/api-doc/adresse) provides several examples of how to geolocate data. In our situation, two entry points seem interesting:

* __The `/search/` API__ which represents an entry point with URLs of the form `https://api-adresse.data.gouv.fr/search/?q=\<address\>&postcode=\<zipcode\>&limit=1`
* __The `/search/csv` API__ which takes a CSV as input and returns the same CSV with the geocoded observations. The request takes the following form, which seems less simple to implement: `curl -X POST -F data=@search.csv -F columns=address -F columns=zipcode https://api-adresse.data.gouv.fr/search/csv/`

The temptation would be strong to use the first method with a loop over the rows of our `DataFrame` to geocode our entire dataset. However, this would be a bad idea because the communications between our `Python` session and the API servers would be too numerous to offer satisfactory performance.

To convince yourself, you can run the following code on a small sample of data (for example, 100 as here) and notice that the execution time is quite significant.

:::

{{< include "04_api/_exo2_preliminary2.qmd" >}}


::: {.content-visible when-profile="fr"}

Comme l'indique la documentation, si on désire industrialiser notre processus de géocodage, on va privilégier l'API CSV.

Pour obtenir une requête `CURL` cohérente avec le format désiré par l'API on va à nouveau utiliser `Requests` mais cette fois avec des paramètres supplémentaires:

* `data` va nous permettre de passer des paramètres à `CURL` (équivalents aux `-F` de la requête `CURL`) :
    + `columns`: Les colonnes utilisées pour localiser une donnée. En l'occurrence, on utilise l'adresse et la ville (car les codes postaux n'étant pas uniques, un même nom de voirie peut se trouver dans plusieurs villes partageant le même code postal) ;
    + `postcode`: Le code postal de la ville. Idéalement nous aurions utilisé le code Insee mais nous ne l'avons pas dans nos données ;
    + `result_columns`: on restreint les données échangées avec l'API aux colonnes qui nous intéressent. Cela permet d'accélérer les processus (on échange moins de données) et de réduire l'impact carbone de notre activité (moins de transferts = moins d'énergie dépensée). En l'occurrence, on ne ressort que les données géolocalisées et un score de confiance en la géolocalisation ;
* `files`: permet d'envoyer un fichier via `CURL`.

Les données sont récupérées avec `request.post`. Comme il s'agit d'une chaîne de caractère, nous pouvons directement la lire avec `Pandas` en utilisant `io.StringIO` pour éviter d'écrire des données intermédiaires.

Le nombre d'échos semblant être limité, il est proposé de procéder par morceaux (ici, le jeu de données est découpé en 5 morceaux).

:::

::: {.content-visible when-profile="en"}

As indicated in the documentation, if we want to industrialize our geocoding process, we will prefer the CSV API.

To obtain a `CURL` request consistent with the format desired by the API, we will again use `Requests` but this time with additional parameters:

* `data` will allow us to pass parameters to `CURL` (equivalent to the `-F` of the `CURL` request):
    + `columns`: The columns used to locate data. In this case, we use the address and the city (since zip codes are not unique, the same street name can be found in several cities sharing the same zip code);
    + `postcode`: The zip code of the city. Ideally, we would have used the INSEE code, but we do not have it in our data;
    + `result_columns`: we restrict the data exchanged with the API to the columns that interest us. This allows us to speed up the processes (we exchange less data) and reduce the carbon footprint of our activity (less data transfer = less energy spent). In this case, we only return the geolocated data and a confidence score for the geolocation;
* `files`: allows sending a file via `CURL`.

The data is retrieved with `request.post`. Since it is a string, we can directly read it with `Pandas` using `io.StringIO` to avoid writing intermediate data.

The number of echoes seeming to be limited, it is proposed to proceed in chunks (here, the dataset is divided into 5 chunks).

:::

{{< include "04_api/_exo2_preliminary3.qmd" >}}

::: {.content-visible when-profile="fr"}

Vous pouvez aller plus loin avec l'exercice suivant.

:::


::: {.content-visible when-profile="en"}

You can go further with the following exercise.

:::

{{< include "04_api/_exo2.qmd" >}}
{{< include "04_api/_exo2_solution.qmd" >}}



::: {.content-visible when-profile="fr"}

# Exercices supplémentaires

## Découvrir l'API d'`OpenFoodFacts`

Pour vous aidez, vous pouvez regarder une exemple de structure du JSON ici :
<https://world.openfoodfacts.org/api/v0/product/3274080005003.json> en particulier la catégorie `nutriments`.

:::

::: {.content-visible when-profile="en"}

# Additional exercises

## Discover the `OpenFoodFacts` API

To help you, you can look at an example of the JSON structure here: <https://world.openfoodfacts.org/api/v0/product/3274080005003.json>, particularly the `nutriments` category.

:::


{{< include "04_api/_exo3.qmd" >}}
{{< include "04_api/_exo3_solution.qmd" >}}



```{python}
#| echo: true
#| output: false
#| label: load-idf
idf = carti_download(
      values = ["11"],
      crs = 4326,
      borders = "DEPARTEMENT",
      vectorfile_format="geojson",
      filter_by="REGION",
      source="EXPRESS-COG-CARTO-TERRITOIRE",
      year=2022)

petite_couronne_departements = (
  idf
  .loc[idf['INSEE_DEP'].isin(["75","92","93","94"])]
  .to_crs(2154)
)
```

::: {.exercise}
## Exercice 3: importer et explorer les données velib

On commence par récupérer les données nécessaires à la production
de cette carte.

1. Vérifier la projection géographique de `station` (attribut `crs`). Si celle-ci est différente des données communales, reprojeter ces
dernières dans le même système de projection que les stations de vélib
2. Ne conserver que les 50 principales stations (variable `capacity`)

On peut maintenant construire la carte de manière séquentielle avec la méthode `plot` en s'aidant de [cette documentation](https://geopandas.org/en/stable/docs/user_guide/mapping.html#maps-with-layers)

3. En premier lieu, grâce à `boundary.plot`, 
représenter la couche de base des limites des communes et arrondissements:
    + Utiliser les options `edgecolor = "black"` et `linewidth = 0.5`
    + Nommer cet objet `base`

4. Ajouter la couche des départements avec les options `edgecolor = "blue"` et `linewidth = 0.7`

5. Ajouter les positions des stations
et ajuster la taille en fonction de la variable `capacity`. L'esthétique des points obtenus peut être contrôlé grâce aux options `color = "red"` et `alpha = 0.4`.

6. Retirer les axes et ajouter un titre avec les options ci-dessous:

```python
base.set_axis_off()
base.set_title("Les 50 principales stations de Vélib")
```

7. En suivant le modèle suivant, grâce au _package_ `contextily`, ajouter un fond de carte contextuel _openstreetmap_

```python
import contextily as ctx
ax = ...
ctx.add_basemap(ax, source = ctx.providers.OpenStreetMap.Mapnik)
```

⚠️ `contextily` attend des données dans le système de représentation _Pseudo Mercator_ ([EPSG: 3857](https://epsg.io/3857)), il sera donc nécessaire de reprojeter vos données avant de réaliser la carte.


:::

::: {.content-visible when-profile="fr"}

::: {.exercise}
## Exercice 1

1. On va d'abord s'occuper d'extraire le jour de naissance. 
    + Le premier chiffre du jour est 0, 1, 2 ou 3. Traduire cela sous la forme d'une séquence `[X-X]`
    + Le deuxième chiffre du jour est lui entre 0 et 9. Traduire cela sous la séquence adéquate
    + Remarquez que le premier jour est facultatif. Intercaler entre les deux classes de caractère adéquate 
     le quantifieur qui convient
    + Ajouter le slash à la suite du motif
    + Tester avec `re.findall`. Vous devriez obtenir beaucoup plus d'échos que nécessaire.
      C'est normal, à ce stade la 
      regex n'est pas encore finalisée
2. Suivre la même logique pour les mois en notant que les mois du calendrier grégorien ne dépassent
  jamais la première dizaine. Tester avec `re.findall`
3. De même pour les années de naissance en notant que jusqu'à preuve du contraire, pour des personnes vivantes
aujourd'hui, les millénaires concernés sont restreints. Tester avec `re.findall`
4. Cette regex n'est pas naturelle, on pourrait très bien se satisfaire de classes de
caractères génériques `\d` même si elles pourraient, en pratique, nous sélectionner des
dates de naissance non possibles (`43/78/4528` par exemple). Cela permettrait
d'alléger la regex afin de la rendre plus intelligible. Ne pas oublier l'utilité des quantifieurs.
5. Comment adapter la regex pour qu'elle soit toujours valide pour nos cas mais permette aussi de
capturer les dates de type `YYYY/MM/DD` ? Tester sur `1998/07/12`


:::

:::

::: {.content-visible when-profile="en"}

::: {.exercise}
## Exercise 1

1. First, extract the day of birth.
    + The first digit of the day is 0, 1, 2, or 3. Translate this into a `[X-X]` sequence.
    + The second digit of the day is between 0 and 9. Translate this into the appropriate sequence.
    + Note that the first digit of the day is optional. Insert the appropriate quantifier between the two character classes.
    + Add the slash after the pattern.
    + Test with `re.findall`. You should get many more matches than needed. This is normal; at this stage, the regex is not yet finalized.
2. Follow the same logic for the months, noting that Gregorian calendar months never exceed the first dozen. Test with `re.findall`.
3. Do the same for the birth years, noting that, unless proven otherwise, for people alive today, the relevant millennia are limited. Test with `re.findall`.
4. This regex is not natural; one could be satisfied with generic character classes `\d`, even though they might practically select impossible birth dates (e.g., `43/78/4528`). This would simplify the regex, making it more readable. Don’t forget the usefulness of quantifiers.
5. How can the regex be adapted to always be valid for our cases but also capture dates of the type `YYYY/MM/DD`? Test with `1998/07/12`.

:::

:::

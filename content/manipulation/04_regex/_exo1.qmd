::: {.content-visible when-profile="fr"}


```{python}
from IPython.display import HTML
style = '''

    <style>
    .callout {
    border: 2px solid #d1d5db;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    background-color: #ffffff;
    padding: 15px;
}
.callout-header-note {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #47648a;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-tip {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #41745d;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-exercise {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #c46aad;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-warning {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #967b30;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-important {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #86252b;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-caution {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #a7663b;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}


.callout-body {
    margin: 10px 0;
}
    </style>
    
'''
content_html = '''

    <div class="callout callout-exercise">
        <div class="callout-header-exercise">
            <i class="fa-solid fa-pen-fancy"></i> Exercice 1
        </div>
        <div class="callout-body">
            <ol>
<li>On va d\'abord s\'occuper d\'extraire le jour de naissance. <ul>
<li>Le premier chiffre du jour est 0, 1, 2 ou 3. Traduire cela sous la forme d\'une séquence <code>[X-X]</code></li>
<li>Le deuxième chiffre du jour est lui entre 0 et 9. Traduire cela sous la séquence adéquate</li>
<li>Remarquez que le premier jour est facultatif. Intercaler entre les deux classes de caractère adéquate 
 le quantifieur qui convient</li>
<li>Ajouter le slash à la suite du motif</li>
<li>Tester avec <code>re.findall</code>. Vous devriez obtenir beaucoup plus d\'échos que nécessaire.
  C\'est normal, à ce stade la 
  regex n\'est pas encore finalisée</li>
</ul>
</li>
<li>Suivre la même logique pour les mois en notant que les mois du calendrier grégorien ne dépassent
  jamais la première dizaine. Tester avec <code>re.findall</code></li>
<li>De même pour les années de naissance en notant que jusqu\'à preuve du contraire, pour des personnes vivantes
aujourd\'hui, les millénaires concernés sont restreints. Tester avec <code>re.findall</code></li>
<li>Cette regex n\'est pas naturelle, on pourrait très bien se satisfaire de classes de
caractères génériques <code>\d</code> même si elles pourraient, en pratique, nous sélectionner des
dates de naissance non possibles (<code>43/78/4528</code> par exemple). Cela permettrait
d\'alléger la regex afin de la rendre plus intelligible. Ne pas oublier l\'utilité des quantifieurs.</li>
<li>Comment adapter la regex pour qu\'elle soit toujours valide pour nos cas mais permette aussi de
capturer les dates de type <code>YYYY/MM/DD</code> ? Tester sur <code>1998/07/12</code></li>
</ol>
        </div>
    </div>
    
'''
HTML(f'<script src="https://kit.fontawesome.com/3c27c932d3.js" crossorigin="anonymous"></script>\n{style}\n{content_html}')

```


:::

::: {.content-visible when-profile="en"}


```{python}
from IPython.display import HTML
style = '''

    <style>
    .callout {
    border: 2px solid #d1d5db;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    background-color: #ffffff;
    padding: 15px;
}
.callout-header-note {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #47648a;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-tip {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #41745d;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-exercise {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #c46aad;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-warning {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #967b30;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-important {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #86252b;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-caution {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #a7663b;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}


.callout-body {
    margin: 10px 0;
}
    </style>
    
'''
content_html = '''

    <div class="callout callout-exercise">
        <div class="callout-header-exercise">
            <i class="fa-solid fa-pen-fancy"></i> Exercise 1
        </div>
        <div class="callout-body">
            <ol>
<li>First, extract the day of birth.<ul>
<li>The first digit of the day is 0, 1, 2, or 3. Translate this into a <code>[X-X]</code> sequence.</li>
<li>The second digit of the day is between 0 and 9. Translate this into the appropriate sequence.</li>
<li>Note that the first digit of the day is optional. Insert the appropriate quantifier between the two character classes.</li>
<li>Add the slash after the pattern.</li>
<li>Test with <code>re.findall</code>. You should get many more matches than needed. This is normal; at this stage, the regex is not yet finalized.</li>
</ul>
</li>
<li>Follow the same logic for the months, noting that Gregorian calendar months never exceed the first dozen. Test with <code>re.findall</code>.</li>
<li>Do the same for the birth years, noting that, unless proven otherwise, for people alive today, the relevant millennia are limited. Test with <code>re.findall</code>.</li>
<li>This regex is not natural; one could be satisfied with generic character classes <code>\d</code>, even though they might practically select impossible birth dates (e.g., <code>43/78/4528</code>). This would simplify the regex, making it more readable. Don’t forget the usefulness of quantifiers.</li>
<li>How can the regex be adapted to always be valid for our cases but also capture dates of the type <code>YYYY/MM/DD</code>? Test with <code>1998/07/12</code>.</li>
</ol>
        </div>
    </div>
    
'''
HTML(f'<script src="https://kit.fontawesome.com/3c27c932d3.js" crossorigin="anonymous"></script>\n{style}\n{content_html}')

```


:::

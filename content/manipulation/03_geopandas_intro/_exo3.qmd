```{python}
#| echo: true
#| output: false
#| label: load-idf
idf = carti_download(
      values = ["11"],
      crs = 4326,
      borders = "DEPARTEMENT",
      vectorfile_format="geojson",
      filter_by="REGION",
      source="EXPRESS-COG-CARTO-TERRITOIRE",
      year=2022)

petite_couronne_departements = (
  idf
  .loc[idf['INSEE_DEP'].isin(["75","92","93","94"])]
  .to_crs(2154)
)
```

::: {.content-visible when-profile="fr"}
:
```{python}
from IPython.display import HTML
style = '''

    <style>
    .callout {
    border: 2px solid #d1d5db;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    background-color: #ffffff;
    padding: 15px;
}
.callout-header-note {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #47648a;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-tip {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #41745d;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-exercise {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #c46aad;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-warning {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #967b30;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-important {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #86252b;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-caution {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #a7663b;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}


.callout-body {
    margin: 10px 0;
}
    </style>
    
'''
content_html = '''

    <div class="callout callout-exercise">
        <div class="callout-header-exercise">
            <i class="fa-solid fa-pen-fancy"></i> Exercice 3: importer et explorer les données velib
        </div>
        <div class="callout-body">
            <p>On commence par récupérer les données nécessaires à la production
de cette carte.</p>
<ol>
<li>Vérifier la projection géographique de <code>station</code> (attribut <code>crs</code>). Si celle-ci est différente des données communales, reprojeter ces
dernières dans le même système de projection que les stations de vélib</li>
<li>Ne conserver que les 50 principales stations (variable <code>capacity</code>)</li>
</ol>
<p>On peut maintenant construire la carte de manière séquentielle avec la méthode <code>plot</code> en s\'aidant de <a href="https://geopandas.org/en/stable/docs/user_guide/mapping.html#maps-with-layers">cette documentation</a></p>
<ol>
<li>
<p>En premier lieu, grâce à <code>boundary.plot</code>, 
représenter la couche de base des limites des communes et arrondissements:</p>
<ul>
<li>Utiliser les options <code>edgecolor = "black"</code> et <code>linewidth = 0.5</code></li>
<li>Nommer cet objet <code>base</code></li>
</ul>
</li>
<li>
<p>Ajouter la couche des départements avec les options <code>edgecolor = "blue"</code> et <code>linewidth = 0.7</code></p>
</li>
<li>
<p>Ajouter les positions des stations
et ajuster la taille en fonction de la variable <code>capacity</code>. L\'esthétique des points obtenus peut être contrôlé grâce aux options <code>color = "red"</code> et <code>alpha = 0.4</code>.</p>
</li>
<li>
<p>Retirer les axes et ajouter un titre avec les options ci-dessous:</p>
</li>
</ol>
<p>~~~python
base.set_axis_off()
base.set_title("Les 50 principales stations de Vélib")
~~~</p>
<ol>
<li>En suivant le modèle suivant, grâce au <em>package</em> <code>contextily</code>, ajouter un fond de carte contextuel <em>openstreetmap</em></li>
</ol>
<p>~~~python
import contextily as ctx
ax = ...
ctx.add_basemap(ax, source = ctx.providers.OpenStreetMap.Mapnik)
~~~</p>
<p>⚠️ <code>contextily</code> attend des données dans le système de représentation <em>Pseudo Mercator</em> (<a href="https://epsg.io/3857">EPSG: 3857</a>), il sera donc nécessaire de reprojeter vos données avant de réaliser la carte.</p>
        </div>
    </div>
    
'''
HTML(f'<script src="https://kit.fontawesome.com/3c27c932d3.js" crossorigin="anonymous"></script>\n{style}\n{content_html}')

```
:

:::

::: {.content-visible when-profile="en"}

:
```{python}
from IPython.display import HTML
style = '''

    <style>
    .callout {
    border: 2px solid #d1d5db;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    background-color: #ffffff;
    padding: 15px;
}
.callout-header-note {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #47648a;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-tip {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #41745d;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-exercise {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #c46aad;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-warning {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #967b30;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-important {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #86252b;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-caution {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #a7663b;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}


.callout-body {
    margin: 10px 0;
}
    </style>
    
'''
content_html = '''

    <div class="callout callout-exercise">
        <div class="callout-header-exercise">
            <i class="fa-solid fa-pen-fancy"></i> Exercise 3: Import and explore the Velib data
        </div>
        <div class="callout-body">
            <p>Let\'s start by retrieving the data needed to produce this map.</p>
<ol>
<li>Check the geographic projection of <code>station</code> (attribute <code>crs</code>). If it is different from the commune data, reproject the latter to the same projection system as the Velib stations.</li>
<li>Keep only the top 50 stations (variable <code>capacity</code>).</li>
</ol>
<p>We can now build the map sequentially using the <code>plot</code> method, with the help of <a href="https://geopandas.org/en/stable/docs/user_guide/mapping.html#maps-with-layers">this documentation</a>.</p>
<ol>
<li>
<p>First, use <code>boundary.plot</code> to represent the base layer of commune and arrondissement boundaries:</p>
<ul>
<li>Use the options <code>edgecolor = "black"</code> and <code>linewidth = 0.5</code></li>
<li>Name this object <code>base</code></li>
</ul>
</li>
<li>
<p>Add the layer of departments with the options <code>edgecolor = "blue"</code> and <code>linewidth = 0.7</code>.</p>
</li>
<li>
<p>Add the positions of the stations and adjust the size according to the <code>capacity</code> variable. The aesthetics of the obtained points can be controlled with the options <code>color = "red"</code> and <code>alpha = 0.4</code>.</p>
</li>
<li>
<p>Remove the axes and add a title with the options below:</p>
</li>
</ol>
<p>~~~python
base.set_axis_off()
base.set_title("The 50 main Velib stations")
~~~</p>
<ol>
<li>Following the model below, use the <code>contextily</code> package to add a contextual OpenStreetMap base map:</li>
</ol>
<p>~~~python
import contextily as ctx
ax = ...
ctx.add_basemap(ax, source = ctx.providers.OpenStreetMap.Mapnik)
~~~</p>
<p>⚠️ <code>contextily</code> expects data in the Pseudo Mercator representation system (<a href="https://epsg.io/3857">EPSG: 3857</a>), so it will be necessary to reproject your data before creating the map.</p>
        </div>
    </div>
    
'''
HTML(f'<script src="https://kit.fontawesome.com/3c27c932d3.js" crossorigin="anonymous"></script>\n{style}\n{content_html}')

```
:

:::

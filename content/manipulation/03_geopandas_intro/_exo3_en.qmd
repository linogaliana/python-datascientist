```{python}
#| echo: true
#| output: false
#| label: load-idf
idf = carti_download(
      values = ["11"],
      crs = 4326,
      borders = "DEPARTEMENT",
      vectorfile_format="geojson",
      filter_by="REGION",
      source="EXPRESS-COG-CARTO-TERRITOIRE",
      year=2022)

petite_couronne_departements = (
  idf
  .loc[idf['INSEE_DEP'].isin(["75","92","93","94"])]
  .to_crs(2154)
)
```


::: {.exercise}
## Exercise 3: Import and explore the Velib data

Let's start by retrieving the data needed to produce this map.

1. Check the geographic projection of `station` (attribute `crs`). If it is different from the commune data, reproject the latter to the same projection system as the Velib stations.
2. Keep only the top 50 stations (variable `capacity`).

We can now build the map sequentially using the `plot` method, with the help of [this documentation](https://geopandas.org/en/stable/docs/user_guide/mapping.html#maps-with-layers).

3. First, use `boundary.plot` to represent the base layer of commune and arrondissement boundaries:
    + Use the options `edgecolor = "black"` and `linewidth = 0.5`
    + Name this object `base`

4. Add the layer of departments with the options `edgecolor = "blue"` and `linewidth = 0.7`.

5. Add the positions of the stations and adjust the size according to the `capacity` variable. The aesthetics of the obtained points can be controlled with the options `color = "red"` and `alpha = 0.4`.

6. Remove the axes and add a title with the options below:

```python
base.set_axis_off()
base.set_title("The 50 main Velib stations")
```

7. Following the model below, use the `contextily` package to add a contextual OpenStreetMap base map:

```python
import contextily as ctx
ax = ...
ctx.add_basemap(ax, source = ctx.providers.OpenStreetMap.Mapnik)
```

⚠️ `contextily` expects data in the Pseudo Mercator representation system ([EPSG: 3857](https://epsg.io/3857)), so it will be necessary to reproject your data before creating the map.

:::

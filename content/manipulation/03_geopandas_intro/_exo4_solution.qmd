```{python}
#| label: exo4-q1
# Question 1
stations_info = gpd.sjoin(stations, petite_couronne, predicate = 'within')
```

```{python}
#| output: asis
#| echo: false
if lang == "fr":
    print("A l'issue de la jointure spatiale, le jeu de données présente la structure suivante")
else:
    print("After the spatial join, the dataset presents the following structure:")
```

```{python}
stations_info.head(2)
```

```{python}
#| output: asis
#| echo: false
if lang == "fr":
    print("On peut donc calculer des statistiques par arrondissement, comme on le ferait avec un `DataFrame Pandas` (question 2):")
else:
    print("We can therefore calculate statistics by district, just as we would with a `Pandas DataFrame` (question 2):")
```


```{python}
#| label: exo4-q2
# Question 2
stations_info.groupby("NOM").agg({"capacity": ['count', 'median']}).reset_index().sort_values(('capacity', 'count'), ascending = True)
```

```{python}
#| label: exo4-q3
# Question 3
stations_19 = stations_info.loc[stations_info['NOM'].str.contains("19e")]
arrondissement_19e = petite_couronne.loc[petite_couronne['NOM'].str.contains("19e")]
```

```{python}
#| output: asis
#| echo: false
if lang == "fr":
    print("Néanmoins des cartes seront sans doute plus parlante. Pour commencer, avec la question 3, on peut représenter les stations du 19e arrondissement, d'abord dans l'ensemble de Paris.")
else:
    print("However, maps will probably be more illustrative. To begin with question 3, we can represent the stations of the 19th arrondissement, first within the whole of Paris.")
```


```{python}
#| label: exo4-q4
# Question 4a
base = petite_couronne.loc[petite_couronne['INSEE_DEP']=="75"].boundary.plot(edgecolor = "k", linewidth=0.5)
arrondissement_19e.boundary.plot(ax = base, edgecolor = "red", linewidth=0.9)
stations_19.plot(ax = base, color = "red", alpha = 0.4)
base.set_axis_off()
base.set_title("Les stations Vélib du 19e arrondissement")
base
```

```{python}
#| output: asis
#| echo: false
if lang == "fr":
    print("On peut ensuite zoomer sur cet arrondissement et faire une carte avec un fond plus travaillé:")
else:
    print("We can then zoom in on this arrondissement and create a map with a more detailed background:")
```


```{python}
#| label: exo4-q4b
# Question 4b
base = (
  arrondissement_19e
  .loc[petite_couronne['INSEE_DEP']=="75"]
  .to_crs(3857)
  .boundary.plot(edgecolor = "red", linewidth=0.5)
)
(
  stations_19
  .to_crs(3857)
  .plot(ax = base, color = "red", alpha = 0.4)
)
base.set_axis_off()
base.set_title("Les stations Vélib du 19e arrondissement")
ctx.add_basemap(base, source = ctx.providers.OpenStreetMap.Mapnik)
base
```

```{python}
#| output: asis
#| echo: false
if lang == "fr":
    print("Carte obtenue à la question 5 :")
else:
    print("Our map after question 5 looks like the following one")
```


```{python}
#| label: exo4-q5
# Question 5
stations_agg = (
  stations_info
  .groupby("INSEE_COG")
  .agg({"stationcode": "nunique", "capacity": "sum"})
  .reset_index()
)

petite_couronne_count = petite_couronne.merge(
  stations_agg
).to_crs(2154)

petite_couronne_count = petite_couronne_count.loc[petite_couronne_count["INSEE_DEP"]== "75"]
aplat = petite_couronne_count.plot(
    column = "capacity", cmap="coolwarm", legend=True)
aplat.set_axis_off()
aplat
```


```{python}
# Question 6
petite_couronne_count['area'] = petite_couronne_count.area
petite_couronne_count['area'] = petite_couronne_count['area'].div(1e6)
petite_couronne_count['density'] = petite_couronne_count['capacity']/petite_couronne_count['area']

aplatq6 = petite_couronne_count.plot(
    column = "density", cmap="coolwarm", legend=True)
aplatq6.set_axis_off()
aplatq6
```
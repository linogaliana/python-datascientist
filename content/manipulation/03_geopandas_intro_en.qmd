

# Enrichments through the spatial dimension: spatial joins

## Principle

The previous map already illustrates the power of cartographic representation. With just a few lines of code and minimal operations on our data, we already gain a better understanding of the phenomenon we wish to observe. Specifically, we clearly detect a center-periphery structure in our data, which is not surprising but reassuring to find at first glance.

We also notice that the most used stations, outside of the hypercenter of Paris, are generally located on major roads or near parks. Again, nothing surprising, but it is reassuring to see this in our data.

Now, we can explore the structure of our dataset more thoroughly. However, if we look at it, we notice that we have limited information in the raw dataset.

```{python}
#| echo: true
#| label: visualise-before-spatial-joins
stations.head(2)
```

In the previous chapter, we presented how associating datasets through a common dimension can enhance their value. In that case, it involved matching data based on common information in both datasets.

Now we have an additional implicit information in our two datasets: the geographical dimension. Spatial join refers to the association of datasets based on the geographical dimension. There are many different types of spatial joins: finding points within a polygon, finding intersections between multiple areas, linking a point to its nearest neighbor in another source, etc.


## Example: locating stations in their neighborhood

In this exercise, we will assume that:

- The locations of the `velib` stations are stored in a dataframe named `stations`.
- The administrative data is in a dataframe named `petite_couronne`.


{{< include "03_geopandas_intro/_exo4_en.qmd" >}}
{{< include "03_geopandas_intro/_exo4_solution.qmd" >}}


With this map, based on color gradients (choropleth map), the reader falls victim to a classic illusion. The most visible arrondissements on the map are the largest ones. It is logical that these areas are also better equipped with Vélib stations. Although the availability of Vélib stations is likely more related to population density and infrastructure, the size effect is likely the most visible phenomenon on our map, even though it might not be the primary factor in reality.

If we instead represent the capacity in terms of density, to account for the varying sizes of the arrondissements, the conclusions are reversed and better align with the expectations of a center-periphery model. The central arrondissements are better equipped. If we made a map with proportional circles rather than a choropleth map, this would be even more visible; however, cartography is not the focus of this chapter.

```{python}
aplatq6
```

## Additional exercise

The previous exercises allowed for familiarization with the processing of spatial data. However, it is often necessary to juggle more complex geometric dimensions. This can include, for example, changing territorial scales in the data or introducing merges/dissolutions of geometries.

We will illustrate this with an additional exercise that demonstrates how to work with data in urban economic models where we assume movement to the nearest point ([Hotelling's model](https://en.wikipedia.org/wiki/Hotelling%27s_law)).

Let's imagine that each Vélib user moves exclusively to the nearest station (assuming there is never a shortage or overcapacity). What is the map of Vélib coverage? To answer this type of question, we frequently use the [Voronoi tessellation](https://en.wikipedia.org/wiki/Voronoi_diagram), a classic operation for transforming points into polygons.

The following exercise allows for familiarization with the construction of Voronoi[^notevoronoi].

[^notevoronoi]: In [this working paper](https://www.insee.fr/en/statistiques/4925202) on mobile phone data, it is shown that this approach is not without bias in phenomena where the spatial proximity hypothesis is overly simplistic.

{{< include "03_geopandas_intro/_exo5_en.qmd" >}}
{{< include "03_geopandas_intro/_exo5_solution.qmd" >}}

The first coverage map, at the agglomeration level, shows the higher density of Velib stations in central Paris:

```{python}
base = petite_couronne.boundary.plot(figsize = (10,10), color='black')
stations_info.plot(ax=base, color='red', markersize=5)
masked_voronoi.boundary.plot(ax=base, color='blue')
base.set_axis_off()
```


If we zoom in on Paris intramuros, we also see heterogeneity in coverage.
There is less heterogeneity in coverage areas since the density is high, but we still notice divergences between certain areas.

```{python}
base = (
  petite_couronne
  .loc[petite_couronne["INSEE_DEP"] == "75"]
  .to_crs(3857)
  .boundary.plot(figsize = (10,10), color='black')
)
(
  stations_info
  .loc[stations_info["INSEE_DEP"] == "75"]
  .to_crs(3857)
  .plot(ax=base, color='red', markersize=5)
)
(
  masked_voronoi
    .loc[masked_voronoi["INSEE_DEP"] == "75"]
    .to_crs(3857)
    .boundary.plot(ax=base, color='blue')
)
ctx.add_basemap(base, source = ctx.providers.OpenStreetMap.Mapnik)
base.set_axis_off()
```




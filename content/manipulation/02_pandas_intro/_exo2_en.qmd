::: {.exercise}
## Exercise 2: Discovering the <code>Pandas</code> Verbs for Data Manipulation

First, let's get familiar with operations on columns.

1. Create a `DataFrame` `emissions_copy` keeping only the columns `INSEE commune`, `Commune`, `Autres transports`, and `Autres transports international`.

<details>
<summary>
Hint for this question
</summary>

![](https://minio.lab.sspcloud.fr/lgaliana/generative-art/pythonds/select_pandas.png){fig-width=50%}

</details>

2. Since the variable names are not practical, rename them as follows:
    + `INSEE commune` $\to$ `code_insee`
    + `Autres transports` $\to$ `transports`
    + `Autres transports international` $\to$ `transports_international`

<details>
<summary>
Hint for this question
</summary>

![](https://minio.lab.sspcloud.fr/lgaliana/generative-art/pythonds/rename_pandas.png){fig-width=50%}

</details>

3. For simplicity, replace missing values (`NA`) with 0. Use the [`fillna`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.fillna.html) method to transform missing values into 0.

4. Create the following variables:
    - `dep`: the department. This can be created using the first two characters of `code_insee` by applying the `str` method;
    - `transports_total`: the emissions of the transport sector (sum of the two variables).

<details>
<summary>
Hint for this question
</summary>

![](https://minio.lab.sspcloud.fr/lgaliana/generative-art/pythonds/mutate_pandas.png){fig-width=50%}

</details>

5. Order the data from the biggest polluter to the smallest, then order the data from the biggest polluter to the smallest by department (from 01 to 95).

<details>
<summary>
Hint for this question
</summary>

![](https://minio.lab.sspcloud.fr/lgaliana/generative-art/pythonds/arrange_pandas.png){fig-width=50%}

</details>

6. Keep only the municipalities belonging to departments 13 or 31. Order these municipalities from the biggest polluter to the smallest.

<details>
<summary>
Hint for this question
</summary>

![](https://minio.lab.sspcloud.fr/lgaliana/generative-art/pythonds/filter_pandas.png){fig-width=50%}

</details>

Return to the initial `emission` dataset.

7. Calculate the total emissions by sector. Calculate the share of each sector in total emissions. Convert the volumes to tons before displaying the results.

8. Calculate the total emissions for each municipality after imputing missing values to 0. Keep the top 100 emitting municipalities. Calculate the share of each sector in this emission. Understand the factors that may explain this ranking.

<details>
<summary>
Help if you are struggling with question 8
</summary>

Play with the `axis` parameter when constructing an aggregate statistic.

</details>

:::

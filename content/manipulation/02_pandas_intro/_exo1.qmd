::: {.content-visible when-profile="fr"}

:
```{python}
from IPython.display import HTML
style = '''

    <style>
    .callout {
    border: 2px solid #d1d5db;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    background-color: #ffffff;
    padding: 15px;
}
.callout-header-note {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #47648a;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-tip {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #41745d;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-exercise {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #c46aad;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-warning {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #967b30;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-important {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #86252b;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-caution {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #a7663b;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}


.callout-body {
    margin: 10px 0;
}
    </style>
    
'''
content_html = '''

    <div class="callout callout-exercise">
        <div class="callout-header-exercise">
            <i class="fa-solid fa-pen-fancy"></i> Exercice 1: Importer un CSV et explorer la structure de données
        </div>
        <div class="callout-body">
            <ol>
<li>Importer les données de l\'Ademe à l\'aide du package <code>Pandas</code> et de la commande consacrée pour l\'import de csv. Nommer le <code>DataFrame</code> obtenu <code>emissions</code>[^nomdf-fr].</li>
<li>Utiliser les méthodes adéquates afin d\'afficher pour les 10 premières valeurs, les 15 dernières et un échantillon aléatoire de 10 valeurs grâce aux méthodes adéquates du <em>package</em> <code>Pandas</code>. </li>
<li>Tirer 5 pourcents de l\'échantillon sans remise.</li>
<li>Ne conserver que les 10 premières lignes et tirer aléatoirement dans celles-ci pour obtenir un DataFrame de 100 données.</li>
<li>Faire 100 tirages à partir des 6 premières lignes avec une probabilité de 1/2 pour la première observation et une probabilité uniforme pour les autres.</li>
</ol>
<details>
<summary>
En cas de blocage à la question 1
</summary>

Lire la documentation de `read_csv` (très bien faite) ou chercher des exemples
en ligne pour découvrir cette fonction.

</details>
        </div>
    </div>
    
'''
HTML(f'<script src="https://kit.fontawesome.com/3c27c932d3.js" crossorigin="anonymous"></script>\n{style}\n{content_html}')

```
:

[^nomdf-fr]: Par manque d'imagination, on est souvent tenté d'appeler notre
_dataframe_ principal `df` ou `data`. C'est souvent une mauvaise idée puisque
ce nom n'est pas très informatif quand on relit le code quelques semaines
plus tard. L'autodocumentation, approche qui consiste à avoir un code
qui se comprend de lui-même, est une bonne pratique et il est donc recommandé
de donner un nom simple mais efficace pour connaître la nature du _dataset_ en question.

:::


::: {.content-visible when-profile="en"}

:
```{python}
from IPython.display import HTML
style = '''

    <style>
    .callout {
    border: 2px solid #d1d5db;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    background-color: #ffffff;
    padding: 15px;
}
.callout-header-note {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #47648a;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-tip {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #41745d;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-exercise {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #c46aad;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-warning {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #967b30;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-important {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #86252b;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-caution {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #a7663b;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}


.callout-body {
    margin: 10px 0;
}
    </style>
    
'''
content_html = '''

    <div class="callout callout-exercise">
        <div class="callout-header-exercise">
            <i class="fa-solid fa-pen-fancy"></i> Exercise 1: Importing a CSV and Exploring Data Structure
        </div>
        <div class="callout-body">
            <ol>
<li>Import the data from Ademe using the <code>Pandas</code> package and the dedicated command for importing CSVs. Name the obtained <code>DataFrame</code> <code>emissions</code>[^nomdf-en].</li>
<li>Use the appropriate methods to display the first 10 values, the last 15 values, and a random sample of 10 values using the appropriate methods from the <code>Pandas</code> package.</li>
<li>Draw 5 percent of the sample without replacement.</li>
<li>Keep only the first 10 rows and randomly draw from these to obtain a DataFrame of 100 data points.</li>
<li>Make 100 draws from the first 6 rows with a probability of 1/2 for the first observation and a uniform probability for the others.</li>
</ol>
<details>
<summary>
If you get stuck on question 1
</summary>

Read the documentation for `read_csv` (very well done) or look for examples online to discover this function.

</details>
        </div>
    </div>
    
'''
HTML(f'<script src="https://kit.fontawesome.com/3c27c932d3.js" crossorigin="anonymous"></script>\n{style}\n{content_html}')

```
:


[^nomdf-en]: Due to a lack of imagination, we are often tempted to call our main _dataframe_ `df` or `data`. This is often a bad idea because the name is not very informative when you read the code a few weeks later. Self-documenting code, an approach that consists of having code that is self-explanatory, is a good practice, and it is recommended to give a simple yet effective name to know the nature of the dataset in question.

:::

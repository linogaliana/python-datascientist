---
title: "Données spatiales : découverte de geopandas"
draft: false
weight: 40
slug: geopandas
tags:
  - geopandas
  - Velib
  - Tutoriel
  - Cartographie
  - Manipulation
categories:
  - Tutoriel
  - Manipulation
type: book
description: |
  Les données géolocalisées se sont multipliées depuis quelques années, qu'il
  s'agisse de données open-data ou de traces numériques géolocalisées de
  type _big-data_. Pour les données spatiales, le package `GeoPandas`
  étend les fonctionalités de l'écosystème `Pandas` afin de permettre
  de manipuler des données géographiques complexes de manière simple.
image: featured_geopandas_tutorial.png
eval: true
---



# Opérations sur les attributs et les géométries



## Opérations sur les attributs

Toutes les opérations possibles sur un objet `Pandas` le sont également
sur un objet `GeoPandas`. Pour manipuler les données, et non la géométrie,
on parlera d'opérations sur les attributs. 

Par exemple, si on désire 
connaître quelques statistiques sur la taille des stations, l'approche
est identique à si on avait un objet `Pandas` classique :

```{python}
stations.describe()
```

Pour classer les départements de la petite couronne, du plus grand au plus petit,
procédons en deux étapes:

1. Récupérons le contour des communes
grâce à `cartiflette`.
Notons qu'on pourrait récupérer directement les contours départementaux mais
pour l'exercice, nous allons le créer nous-mêmes comme agrégation
des contours communaux
(voir plus bas ainsi que [ce notebook `Observable`](https://observablehq.com/@linogaliana/cartiflette-demo) pour la méthode plus
légère qui utilise pleinement les fonctionnalités de `cartiflette`). 

2. Calculons la surface totale de ce territoire (méthode `area` sur un objet `GeoPandas.GeoDataFrame` ramenée en km², attention néamoins au système de projection comme cela est expliqué plus bas)


```{python}
shp_communes['surface'] = shp_communes.area.div(10**6)
```

Les plus grands départements s'obtiennent par une agrégation des
surfaces communales :

```{python}
shp_communes.groupby('INSEE_DEP').sum(numeric_only = True).sort_values('surface', ascending = False)
```

Si on veut directement les plus
grandes communes de la petite couronne parisienne :

```{python}
shp_communes.sort_values('surface', ascending = False).head(10)
```

Lors des étapes d'agrégation, `groupby` ne conserve pas les géométries. Autrement
dit, si on effectue, par exemple, une somme en fonction d'une variable de groupe avec
le combo `groupby(...).sum(...)` , on perd
la dimension géographique. 

Il est néanmoins possible d'aggréger à la fois les géométries et les 
attribus avec la méthode `dissolve`: 

```{python}
fig,ax = plt.subplots(figsize=(10, 10))
shp_communes.dissolve(by='INSEE_DEP', aggfunc='sum').plot(ax = ax, column = "surface")
ax.set_axis_off()
ax
```

Pour produire l'équivalent de cette carte à un niveau France entière, il est néanmoins plus simple de directement
récupérer les fonds officiels des départements plutôt que d'agréger les
contours des communes:

```{python}
#| output: false
dep = carti_download(
    values = ["France"],
    crs = 4326,
    borders = "DEPARTEMENT",
    vectorfile_format="geojson",
    filter_by="FRANCE_ENTIERE",
    source="EXPRESS-COG-CARTO-TERRITOIRE",
    year=2022)
dep = dep.loc[dep["INSEE_DEP"].str.len() == 2]

dep["area"] = dep.to_crs(2154).area
```

Avant de calculer les surfaces des départements, pour éviter les déformations liées au
système `Mercator`, nous faisons une reprojection des données à la volée. Plus de détails
par la suite. 

```{python}
dep.sort_values('area', ascending = False).head(3)
```

```{python}
ax = dep.plot(column = "area")
ax.set_axis_off()
```


## Opérations sur les géométries


Outre la représentation graphique simplifiée,
sur laquelle nous reviendrons ultérieurement, l'intérêt principal d'utiliser
`GeoPandas` est l'existence de méthodes efficaces pour
manipuler la dimension spatiale. Un certain nombre proviennent du 
package
[`Shapely`](https://shapely.readthedocs.io/en/latest/manual.html#general-attributes-and-methods). 


::: {.cell .markdown}
```{=html}
<div class="alert alert-danger" role="alert">
<i class="fa-solid fa-triangle-exclamation"></i> Warning</h3>
```

Les données sont en système de coordonnées WGS 84 ou pseudo-Mercator (epsg: `4326`) et ne sont pas projetées.
C'est un format approprié lorsqu'il s'agit d'utiliser un fonds
de carte `OpenStreetMap`, `Stamen`, `Google Maps`, etc.

Mais ce n'est pas un
format sur lequel on désire faire des calculs car les distances sont faussées sans utiliser de projection. D'ailleurs, `geopandas` refusera certaines opérations
sur des données dont le crs est `4326`. On reprojette ainsi les données 
dans la projection officielle pour la métropole, le Lambert 93
(epsg: `2154`).

```{=html}
</div>
```
:::

Comme indiqué ci-dessus, nous reprojetons les données
dans le système Lambert 93 qui ne fausse pas les
calculs de distance et d'aires.

```{python}
communes = shp_communes.to_crs(2154)
stations = stations.to_crs(2154)
```

Par exemple, on peut recalculer la taille d'une commune ou d'arrondissement
avec la méthode `area` (et diviser par $10^6$ pour avoir des $km^2$ au lieu
des $m^2$):

```{python}
communes['superficie'] = communes.area.div(10**6)
communes.head(3)
```

Une méthode qu'on utilise régulièrement est `centroid` qui, comme son nom l'indique,
recherche le centroïde de chaque polygone et transforme ainsi des données
surfaciques en données ponctuelles. Par exemple, pour
représenter approximativement les centres des villages de la
Haute-Garonne (31), après avoir téléchargé le fonds de carte adapté,
fera

```{python}
communes_31 = carti_download(
      values = ["31"],
      crs = 4326,
      borders="COMMUNE",
      vectorfile_format="geojson",
      filter_by="DEPARTEMENT",
      source="EXPRESS-COG-CARTO-TERRITOIRE",
      year=2022)

# on reprojete en 3857 pour le fond de carte
communes_31 = communes_31.to_crs(3857)

# on calcule le centroide
dep_31 = communes_31.copy()
communes_31['geometry'] = communes_31['geometry'].centroid

ax = communes_31.plot(figsize = (10,10), color = 'red', alpha = 0.4, zorder=2)
dep_31.to_crs(3857).plot(ax = ax, zorder=1, edgecolor = "black", facecolor="none",
                                                           color = None)
#ctx.add_basemap(ax, source = ctx.providers.Stamen.Toner)
ax.set_axis_off()
ax
```


# Gérer le système de projection

Précédemment, nous avons appliqué une méthode `to_crs` pour reprojeter
les données dans un système de projection différent de celui du fichier
d'origine :

```{python}
communes = communes.to_crs(2154)
stations = stations.to_crs(2154)
```


Concernant la gestion des projections avec `GeoPandas`,
la [documentation officielle](https://geopandas.org/projections.html) est très bien
faite. Elle fournit notamment l'avertissement suivant qu'il est
bon d'avoir en tête :

> Be aware that most of the time you don’t have to set a projection. Data loaded from a reputable source (using the geopandas.read_file() command) should always include projection information. You can see an objects current CRS through the GeoSeries.crs attribute.
> 
> From time to time, however, you may get data that does not include a projection. In this situation, you have to set the CRS so geopandas knows how to interpret the coordinates.

![*Image empruntée à XKCD <https://xkcd.com/2256/> qu'on peut également trouver sur <https://blog.chrislansdown.com/2020/01/17/a-great-map-projection-joke/>*](https://imgs.xkcd.com/comics/bad_map_projection_south_america.png)


Pour déterminer le système de projection d'une base de données, on peut vérifier l'attribut `crs` :

```{python}
communes.crs
```

Les deux principales méthodes pour définir le système de projection utilisé sont :

* **`df.set_crs`** : cette commande sert à préciser quel est le système de projection utilisé, c'est-à-dire comment les coordonnées *(x,y)* sont reliées à la surface terrestre. **Cette commande ne doit pas être utilisée pour transformer le système de coordonnées, seulement pour le définir**. 
* **`df.to_crs`** : **cette commande sert à projeter les points d'une géométrie dans une autre, c'est-à-dire à recalculer les coordonnées selon un autre système de projection.** 

Dans le cas particulier de production de carte avec un fond `OpenStreetMaps` ou une carte dynamique `leaflet`, il est nécessaire de dé-projeter les données (par exemple à partir du Lambert-93) pour atterrir dans le système non-projeté WGS 84 (code EPSG 4326). Ce site [dédié aux projections géographiques](https://epsg.io/) peut être utile pour retrouver le système de projection d'un fichier où il n'est pas indiqué. 

La définition du système de projection se fait de la manière suivante (:warning: avant de le faire, se souvenir de l'avertissement !) :

~~~python
communes = communes.set_crs(2154)
~~~

Alors que la reprojection (projection Albers : `5070`) s'obtient de la manière suivante :

```{python}
shp_region = carti_download(
    values = ["France"],
    crs = 4326,
    borders = "REGION",
    vectorfile_format="geojson",
    filter_by="FRANCE_ENTIERE",
    source="EXPRESS-COG-CARTO-TERRITOIRE",
    year=2022)
shp_region = shp_region.loc[shp_region['INSEE_REG']>10]
fig,ax = plt.subplots(figsize=(10, 10))
shp_region.to_crs(5070).plot(ax = ax)
ax
```


```{python}
#| echo: false
ax.set_axis_off()
ax
plt.tight_layout(pad=0, h_pad = 0)
plt.show()
#plt.savefig('reproj1.png', bbox_inches='tight')
```

On le voit, cela modifie totalement la représentation de l'objet dans l'espace.
Clairement, cette projection n'est pas adaptée aux longitudes et latitudes françaises.
C'est normal, il s'agit d'une projection adaptée au continent 
nord-américain (et encore, pas dans son ensemble !).

```{python}
world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))

fig,ax = plt.subplots(figsize=(10, 10))
world[world.continent == "North America"].to_crs(5070).plot(alpha = 0.2, edgecolor = "k", ax = ax)
ax
```


```{python}
#| echo: false

plt.tight_layout(pad=0, h_pad = 0)
plt.show()
#plt.savefig('reproj2.png', bbox_inches='tight')
```



# Joindre des données

## Joindre des données sur des attributs

Ce type de jointure se fait entre un objet géographique et un
deuxième objet, géographique ou non. A l'exception de la question 
des géométries, il n'y a pas de différence par rapport à `Pandas`. 

La seule différence avec `Pandas` est dans la dimension géographique.
Si on désire conserver la dimension géographique, il faut faire 
attention à faire :

~~~~python
geopandas_object.merge(pandas_object)
~~~~

Si on utilise deux objets géographiques mais ne désire conserver qu'une seule
dimension géographique[^2], on fera

~~~~python
geopandas_object1.merge(geopandas_object2)
~~~~

Seule la géométrie de l'objet de gauche
sera conservée, même si on fait un *right join*. 


[^2]: Il est techniquement possible d'avoir un `DataFrame` comportant plusieurs
géographies. Par exemple une géométrie polygone et une géométrie point
(le centroid). C'est néanmoins souvent compliqué à gérer et donc peu
recommandable.



## Prolongation possible : joindre des données sur dimension géographique

Le chapitre suivant permettra de mettre en oeuvre des 
jointures géographiques.


::: {.cell .markdown}
```{=html}
<div class="alert alert-warning" role="alert">
<h3 class="alert-heading"><i class="fa-solid fa-lightbulb"></i> Hint</h3>
```

Les jointures spatiales peuvent être très gourmandes en ressources (car il peut être nécessaire de croiser toutes les géométries de `x` avec toutes les géométries de `y`). Voici deux conseils qui peuvent vous aider :

- Il est préférable de tester les jointures géographiques sur un petit échantillon de données, pour estimer le temps et les ressources nécessaires à la réalisation de la jointure.
- Il est parfois possible d'écrire une fonction qui réduit la taille du problème. Exemple: vous voulez déterminer dans quelle commune se situe un logement dont vous connaissez les coordonnées et le département; vous pouvez écrire une fonction qui réalise pour chaque département une jointure spatiale entre les logements situés dans ce département et les communes de ce département, puis empiler les 101 tables de sorties.

```{=html}
</div>
```
:::


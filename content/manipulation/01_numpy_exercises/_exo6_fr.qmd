
```{python}
from IPython.display import HTML
style = '''

    <style>
    .callout {
    border: 2px solid #d1d5db;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    background-color: #ffffff;
    padding: 15px;
}
.callout-header-note {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #47648a;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-tip {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #41745d;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-exercise {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #c46aad;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-warning {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #967b30;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-important {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #86252b;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-caution {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #a7663b;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}


.callout-body {
    margin: 10px 0;
}
    </style>
    
'''
content_html = '''

    <div class="callout callout-exercise">
        <div class="callout-header-exercise">
            <i class="fa-solid fa-pen-fancy"></i> Exercice (un peu plus corsé)
        </div>
        <div class="callout-body">
            <ol>
<li>Créer <code>X</code> un tableau à deux dimensions (i.e. une matrice) comportant 10 lignes
et 2 colonnes. Les nombres dans le tableau sont aléatoires.</li>
<li>Importer le module <code>matplotlib.pyplot</code> sous le nom <code>plt</code>. Utiliser
<code>plt.scatter</code> pour représenter les données sous forme de nuage de points. </li>
<li>Constuire une matrice 10x10 stockant, à l\'élément $(i,j)$, la distance euclidienne entre les points $X[i,]$ et $X[j,]$. Pour cela, il va falloir jouer avec les dimensions en créant des tableaux emboîtés à partir par des appels à <code>np.newaxis</code> :</li>
<li>En premier lieu, utiliser <code>X1 = X[:, np.newaxis, :]</code> pour transformer la matrice en tableau emboîté. Vérifier les dimensions</li>
<li>Créer <code>X2</code> de dimension <code>(1, 10, 2)</code> à partir de la même logique</li>
<li>En déduire, pour chaque point, la distance avec les autres points pour chaque coordonnées. Elever celle-ci au carré</li>
<li>A ce stade, vous devriez avoir un tableau de dimension <code>(10, 10, 2)</code>. La réduction à une matrice s\'obtient en sommant sur le dernier axe. Regarder dans l\'aide de <code>np.sum</code> comme effectuer une somme sur le dernier axe. </li>
<li>Enfin, appliquer la racine carrée pour obtenir une distance euclidienne en bonne et due forme. </li>
<li>Vérifier que les termes diagonaux sont bien nuls (distance d\'un point à lui-même...)</li>
<li>Il s\'agit maintenant de classer, pour chaque point, les points dont les valeurs sont les plus similaires. Utiliser <code>np.argsort</code> pour obtenir, pour chaque ligne, le classement des points les plus proches</li>
<li>On va s\'intéresser aux k-plus proches voisins. Pour le moment, fixons k=2. Utiliser <code>argpartition</code> pour réordonner chaque ligne de manière à avoir les 2 plus proches voisins de chaque point d\'abord et le reste de la ligne ensuite</li>
<li>Utiliser le morceau de code ci-dessous</li>
</ol>
        </div>
    </div>
    
'''
HTML(f'<script src="https://kit.fontawesome.com/3c27c932d3.js" crossorigin="anonymous"></script>\n{style}\n{content_html}')

```


::: {.cell .markdown}
```{=html}
<details><summary>Un indice pour représenter graphiquement les plus proches voisins</summary>
```


~~~python
plt.scatter(X[:, 0], X[:, 1], s=100)

# draw lines from each point to its two nearest neighbors
K = 2

for i in range(X.shape[0]):
    for j in nearest_partition[i, :K+1]:
        # plot a line from X[i] to X[j]
        # use some zip magic to make it happen:
        plt.plot(*zip(X[j], X[i]), color='black')
~~~


```{=html}
</details>
```
:::

```{python}
from IPython.display import HTML
style = '''

    <style>
    .callout {
    border: 2px solid #d1d5db;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    background-color: #ffffff;
    padding: 15px;
}
.callout-header-note {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #47648a;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-tip {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #41745d;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-exercise {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #c46aad;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-warning {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #967b30;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-important {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #86252b;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}

.callout-header-caution {
    font-weight: bold;
    margin-bottom: 10px;
    color: #ffffff;
    background-color: #a7663b;
    padding: 10px;
    border-radius: 6px 6px 0 0;
}


.callout-body {
    margin: 10px 0;
}
    </style>
    
'''
content_html = '''

    <div class="callout callout-exercise">
        <div class="callout-header-exercise">
            <i class="fa-solid fa-pen-fancy"></i> Exercise (a bit more challenging)
        </div>
        <div class="callout-body">
            <ol>
<li>Create <code>X</code>, a two-dimensional array (i.e., a matrix) with 10 rows and 2 columns. The numbers in the array are random.</li>
<li>Import the <code>matplotlib.pyplot</code> module as <code>plt</code>. Use <code>plt.scatter</code> to plot the data as a scatter plot.</li>
<li>Construct a 10x10 matrix storing, at element $(i,j)$, the Euclidean distance between points $X[i,]$ and $X[j,]$. To do this, you will need to work with dimensions by creating nested arrays using <code>np.newaxis</code>:</li>
<li>First, use <code>X1 = X[:, np.newaxis, :]</code> to transform the matrix into a nested array. Check the dimensions.</li>
<li>Create <code>X2</code> of dimension <code>(1, 10, 2)</code> using the same logic.</li>
<li>Deduce, for each point, the distance with other points for each coordinate. Square this distance.</li>
<li>At this stage, you should have an array of dimension <code>(10, 10, 2)</code>. The reduction to a matrix is obtained by summing over the last axis. Check the help of <code>np.sum</code> on how to sum over the last axis.</li>
<li>Finally, apply the square root to obtain a proper Euclidean distance.</li>
<li>Verify that the diagonal elements are zero (distance of a point to itself...).</li>
<li>Now, sort for each point the points with the most similar values. Use <code>np.argsort</code> to get the ranking of the closest points for each row.</li>
<li>We are interested in the k-nearest neighbors. For now, set k=2. Use <code>argpartition</code> to reorder each row so that the 2 closest neighbors of each point come first, followed by the rest of the row.</li>
<li>Use the code snippet below to graphically represent the nearest neighbors.</li>
</ol>
        </div>
    </div>
    
'''
HTML(f'<script src="https://kit.fontawesome.com/3c27c932d3.js" crossorigin="anonymous"></script>\n{style}\n{content_html}')

```



::: {.cell .markdown}
```{=html}
<details><summary>A hint for graphically representing the nearest neighbors</summary>
```

~~~python
plt.scatter(X[:, 0], X[:, 1], s=100)

# draw lines from each point to its two nearest neighbors
K = 2

for i in range(X.shape[0]):
    for j in nearest_partition[i, :K+1]:
        # plot a line from X[i] to X[j]
        # use some zip magic to make it happen:
        plt.plot(*zip(X[j], X[i]), color='black')
~~~


```{=html}
</details>
```
:::


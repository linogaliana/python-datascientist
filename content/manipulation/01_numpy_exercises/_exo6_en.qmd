::: {.exercise}
## Exercise (a bit more challenging)

1. Create `X`, a two-dimensional array (i.e., a matrix) with 10 rows and 2 columns. The numbers in the array are random.
2. Import the `matplotlib.pyplot` module as `plt`. Use `plt.scatter` to plot the data as a scatter plot.
3. Construct a 10x10 matrix storing, at element $(i,j)$, the Euclidean distance between points $X[i,]$ and $X[j,]$. To do this, you will need to work with dimensions by creating nested arrays using `np.newaxis`:
  + First, use `X1 = X[:, np.newaxis, :]` to transform the matrix into a nested array. Check the dimensions.
  + Create `X2` of dimension `(1, 10, 2)` using the same logic.
  + Deduce, for each point, the distance with other points for each coordinate. Square this distance.
  + At this stage, you should have an array of dimension `(10, 10, 2)`. The reduction to a matrix is obtained by summing over the last axis. Check the help of `np.sum` on how to sum over the last axis.
  + Finally, apply the square root to obtain a proper Euclidean distance.
4. Verify that the diagonal elements are zero (distance of a point to itself...).
5. Now, sort for each point the points with the most similar values. Use `np.argsort` to get the ranking of the closest points for each row.
6. We are interested in the k-nearest neighbors. For now, set k=2. Use `argpartition` to reorder each row so that the 2 closest neighbors of each point come first, followed by the rest of the row.
7. Use the code snippet below to graphically represent the nearest neighbors.

:::


::: {.cell .markdown}
```{=html}
<details><summary>A hint for graphically representing the nearest neighbors</summary>
```

~~~python
plt.scatter(X[:, 0], X[:, 1], s=100)

# draw lines from each point to its two nearest neighbors
K = 2

for i in range(X.shape[0]):
    for j in nearest_partition[i, :K+1]:
        # plot a line from X[i] to X[j]
        # use some zip magic to make it happen:
        plt.plot(*zip(X[j], X[i]), color='black')
~~~


```{=html}
</details>
```
:::


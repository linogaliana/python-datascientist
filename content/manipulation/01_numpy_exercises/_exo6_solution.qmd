```{python}
#| output: false

# Correction

# Question 1
X = np.random.rand(10, 2)

# Question 2 
import matplotlib.pyplot as plt
print(X[:,0])
print(X[:,1])
plt.scatter(X[:, 0], X[:, 1], s=100)
```


```{python}
#| echo: false
#| output: asis
if lang == "fr":
    print("Pour la question 2, vous devriez obtenir un graphique ayant cet aspect :")
else:
    print("For question 2, you should get a graph that looks like this:")
```


```{python}
fig = plt.figure()
plt.scatter(X[:, 0], X[:, 1], s=100)
fig
plt.show()
```


```{python}
#| output: false

# Question 3
print(X.shape)
X1 = X[:, np.newaxis, :]
print("dimension X1 : ", X1.shape)
X2 = X[np.newaxis, :,:]
print("dimension X2 : ", X2.shape)
dist1 = (X1 - X2) ** 2
print("dimension dist1 : ", dist1.shape)
dist = np.sqrt(np.sum((X1 - X2) ** 2, axis=-1))
print("dimension dist : ", dist.shape)

# Question 4
print(dist)
print(dist.diagonal())

# Question 5 
np.argsort(dist)

# Question 6
K = 2
nearest_partition = np.argpartition(dist, K + 1, axis=1)
print(nearest_partition) # NB: closest point is always itself !
```

```{python}
#| echo: false
#| output: asis
if lang == "fr":
    print("Le r√©sultat de la question 7 est le suivant : ")
else:
    print("Question 7 result is :")
```


```{python}
# Question 7 
# Each point in the plot has lines drawn to its two nearest neighbors.
fig = plt.figure()
for i in range(X.shape[0]):
    for j in nearest_partition[i, :K+1]:
        # plot a line from X[i] to X[j]
        # use some zip magic to make it happen:
        plt.plot(*zip(X[j], X[i]), color='black')
fig
plt.savefig("knn.png", bbox_inches='tight')
```
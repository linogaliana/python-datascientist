```{python}
#| output: false

# Question 1. Reset index and order
df1 = df1.reset_index().sort_values("sum_counts", ascending = False)
df2 = df2.reset_index().sort_values("sum_counts", ascending = False)
```

```{python}
#| output: false
import seaborn as sns
import matplotlib.pyplot as plt

# 2. Graphique avec sns.catplot
g = sns.catplot(
    x='sum_counts', y='nom_compteur',
    data=df1, kind = "bar",
    height = 5, aspect = 4,
    color = "red")
```

::: {.content-visible when-profile="fr"}
À l'issue de la question 2, c'est-à-dire en utilisant `seaborn` pour reproduire de manière minimale un _barplot_, on obtient :
:::

::: {.content-visible when-profile="en"}
At the end of question 2, that is, by using `seaborn` to minimally reproduce a _barplot_, we get:
:::


```{python}
#| echo: false
g
plt.show()
```

::: {.content-visible when-profile="fr"}
Après quelques réglages esthétiques, à l'issue des questions 3 et 4, on obtient une figure proche de celle du portail _open data_ parisien.
:::

::: {.content-visible when-profile="en"}
After some aesthetic adjustments, at the end of questions 3 and 4, we get a figure close to that of the Paris _open data_ portal.
:::


```{python}
#| output: false

# Question 3
g = sns.catplot(
    x='sum_counts', y='nom_compteur',
    data=df1,
    kind = "bar", height = 5, aspect = 4, color = "red"
)
g.set_axis_labels('Moyenne du comptage par heure sur la période sélectionnée', 'Nom du compteur')
plt.title('Les 10 compteurs avec la moyenne horaire la plus élevée')
```

::: {.content-visible when-profile="fr"}
Les paramètres supplémentaires proposés à la question 4 permettent finalement d'obtenir la figure
:::

::: {.content-visible when-profile="en"}
The additional parameters proposed in question 4 ultimately allow us to obtain the figure
:::

```{python}
#| output: false

# Question 4
sns.set_style("ticks", {"xtick.color": "red"})
g = sns.catplot(x='sum_counts', y='nom_compteur', data=df1, kind = "bar", height = 10, aspect = 2, color = "red")
g.set_axis_labels('Moyenne du comptage par heure sur la période sélectionnée', 'Nom du compteur')
plt.title('Les 10 compteurs avec la moyenne horaire la plus élevée')
plt.savefig('top10_sns.png', bbox_inches='tight')
```

```{python}
#| echo: false
g
plt.show()
```


::: {.content-visible when-profile="fr"}
# Découvrir `Plotnine`, la grammaire des graphiques en `Python`

`plotnine` est le nouveau venu dans l'écosystème de la visualisation en `Python`. Cette librairie est développée par `Posit`, l'entreprise à l'origine de l'éditeur `RStudio` et de l'écosystème du _tidyverse_ si central dans le langage `R`. Cette librairie vise à importer la logique de `ggplot` en `Python`, c'est-à-dire une grammaire des graphiques normalisée, lisible et flexible héritée de @wilkinson2011grammar.

Dans cette approche, un graphique est vu comme une succession de couches qui, une fois superposées, donneront la figure suivante. En soi, ce principe n'est pas différent de celui de `matplotlib`. Néanmoins, la grammaire utilisée par `plotnine` est beaucoup plus intuitive et normalisée, ce qui offrira beaucoup plus d'autonomie pour modifier sa figure.

![La logique de `ggplot` (et `plotnine`) image empruntée à [Andrew Heiss {{< fa arrow-up-right-from-square >}}](https://datavizf24.classes.andrewheiss.com/lesson/04-lesson.html#changing-colors-shapes-and-sizes-with-scale_){target="_blank"}](https://datavizf24.classes.andrewheiss.com/slides/img/03/ggplot-layers@4x.png){width=60%}

Avec `plotnine`, il n'y a plus de point d'entrée dual figure-axe. Comme l'illustrent les slides ci-dessous :

1. On initialise une figure
2. On met à jour les couches (_layers_), un niveau d'abstraction très général concernant aussi bien les données représentées que les échelles des axes ou la couleur
3. À la fin, on peut jouer sur l'esthétique en modifiant les labels des axes, de la légende, les titres, etc.
:::

::: {.content-visible when-profile="en"}
# And here enters `Plotnine`, a pythonic grammar of graphics

`plotnine` is the newcomer to the `Python` visualization ecosystem. This library is developed by `Posit`, the company behind the `RStudio` editor and the _tidyverse_ ecosystem, which is central to the `R` language. This library aims to bring the logic of `ggplot` to `Python`, meaning a standardized, readable, and flexible grammar of graphics inspired by @wilkinson2011grammar.

In this approach, a chart is viewed as a succession of layers that, when combined, create the final figure. This principle is not inherently different from that of `matplotlib`. However, the grammar used by `plotnine` is far more intuitive and standardized, offering much more autonomy for modifying a chart.
![`ggplot` (and `plotnine`) logic, picture borrowed to [Andrew Heiss {{< fa arrow-up-right-from-square >}}](https://datavizf24.classes.andrewheiss.com/lesson/04-lesson.html#changing-colors-shapes-and-sizes-with-scale_){target="_blank"}](https://datavizf24.classes.andrewheiss.com/slides/img/03/ggplot-layers@4x.png){width=60%}


With `plotnine`, there is no longer a dual figure-axis entry point. As illustrated in the slides below:

1. A figure is initialized
2. Layers are updated, a very general abstraction level that applies to the data represented, axis scales, colors, etc.
3. Finally, aesthetics can be adjusted by modifying axis labels, legend labels, titles, etc.
:::

::: {.content-visible when-profile="fr"}
Nous allons avoir besoin de données hiérarchisées pour avoir des barres ordonnées de manière cohérente:
:::


::: {.content-visible when-profile="en"}
We will need hierarchical data to have bars ordered in a consistent manner:
:::

```{python}
#| echo: true
df1["nom_compteur"] = pd.Categorical(
    df1["nom_compteur"],
    categories = df1["nom_compteur"][::-1],
    ordered=True
)
```


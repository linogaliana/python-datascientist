::: {.content-visible when-profile="fr"}
## Comprendre, en quelques mots, le principe de `matplotlib`

`matplotlib` date du début des années 2000 et a émergé pour proposer une alternative en `Python` à la création de graphiques sous `Matlab`, un logiciel propriétaire de calcul numérique. `matplotlib` est donc une librairie assez ancienne, antérieure à l'émergence de `Python` dans l'écosystème du traitement de données. Cela s'en ressent sur la logique de construction de `matplotlib` qui n'est pas toujours intuitive lorsqu'on est familier de l'écosystème moderne de la _data science_. Heureusement, il existe de nombreuses librairies qui s'appuient sur `matplotlib` mais qui visent à fournir une syntaxe plus familière aux _data scientists_.

`matplotlib` propose principalement deux niveaux d'abstraction: la figure et les axes. La figure est, en quelque sorte, la "toile" globale qui contient un ou plusieurs axes dans lesquels s'inséreront des graphiques. Selon les cas, il faudra jouer avec les paramètres de figure ou d'axe, ce qui rend très flexible la construction d'un graphique mais peut également être déroutant car on ne sait jamais trop quel niveau d'abstraction il faut modifier pour mettre à jour sa figure[^chatGPT]. Comme le montre la @fig-matplotlib, tous les éléments d'une figure sont paramétrables.

[^chatGPT]: Heureusement, comme il existe un énorme corpus de code en ligne utilisant `matplotlib`, les assistants de code comme `ChatGPT` ou `Github Copilot` sont précieux pour construire un graphique à partir d'instructions.

![Comprendre l'architecture d'une figure `matplotlib` (Source: [documentation officielle](https://matplotlib.org/stable/users/explain/quick_start.html))](https://matplotlib.org/stable/_images/anatomy.png){#fig-matplotlib width=50%}

En pratique, il existe deux manières de créer et mettre à jour sa figure selon qu'on préfère passer par:

- l'approche explicite, héritière d'une logique de programmation orientée objet, où on crée des objets `Figure` et `Axes` et met à jour ceux-ci.
- l'approche implicite, basée sur l'interface `pyplot` qui utilise une succession de fonctions pour mettre à jour les objets créés implicitement.
:::

::: {.content-visible when-profile="en"}
## Understanding the Basics of `matplotlib`

`matplotlib` dates back to the early 2000s and emerged as a `Python` alternative for creating charts, similar to `Matlab`, a proprietary numerical computation software. Thus, `matplotlib` is quite an old library, predating the rise of `Python` in the data processing ecosystem. This is reflected in its design, which may not always feel intuitive to those familiar with the modern _data science_ ecosystem. Fortunately, many libraries build upon `matplotlib` to provide syntax more familiar to _data scientists_.

`matplotlib` primarily offers two levels of abstraction: the figure and the axes. The figure is essentially the "canvas" that contains one or more axes, where the charts are placed. Depending on the situation, you might need to modify figure or axis parameters, which makes chart creation highly flexible but also potentially confusing, as it’s not always clear which abstraction level to modify[^chatGPT-en]. As shown in @fig-matplotlib, every element of a figure is customizable.

[^chatGPT-en]: Thankfully, with a vast amount of online code using `matplotlib`, code assistants like `ChatGPT` or `Github Copilot` are invaluable for creating charts based on instructions.

![Understanding the Anatomy of a `matplotlib` Figure (Source: [Official Documentation](https://matplotlib.org/stable/users/explain/quick_start.html))](https://matplotlib.org/stable/_images/anatomy.png){#fig-matplotlib}

In practice, there are two ways to create and update your figure, depending on your preference:

- The explicit approach, inheriting an object-oriented programming logic, where `Figure` and `Axes` objects are created and updated directly.
- The implicit approach, based on the `pyplot` interface, which uses a series of functions to update implicitly created objects.
:::

:::: {.content-visible when-profile="fr"}

::: {.panel-tabset group="matplotlib-abstraction"}
## Approche explicite (approche orientée POO)

{{< include "01_matplotlib/_matplotlib_poo.qmd" >}}

Source: [Documentation officielle de `matplotlib`](https://matplotlib.org/stable/users/explain/quick_start.html)

## Approche implicite

{{< include "01_matplotlib/_matplotlib_pyplot.qmd" >}}

Source: [Documentation officielle de `matplotlib`](https://matplotlib.org/stable/users/explain/quick_start.html)

::::

Ces éléments constituent le minimum pour comprendre la logique de `matplotlib`. Pour être plus à l'aise avec ces concepts, la pratique répétée est indispensable.

:::

:::: {.content-visible when-profile="en"}

::: {.panel-tabset group="matplotlib-abstraction"}
## Explicit Approach (Object-Oriented Approach)

{{< include "01_matplotlib/_matplotlib_poo.qmd" >}}

Source: [Official `matplotlib` Documentation](https://matplotlib.org/stable/users/explain/quick_start.html)

## Implicit Approach

{{< include "01_matplotlib/_matplotlib_pyplot.qmd" >}}

Source: [Official `matplotlib` Documentation](https://matplotlib.org/stable/users/explain/quick_start.html)

:::

These elements are the minimum required to understand the logic of `matplotlib`. To become more comfortable with these concepts, repeated practice is essential.

::::
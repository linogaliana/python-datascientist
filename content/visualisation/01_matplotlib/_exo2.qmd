::: {.content-visible when-profile="fr"}
Nous allons nous contenter de reproduire la @fig-figure1-exo1-fr avec `seaborn`. Pour cela, voici le code nécessaire afin d'avoir un `DataFrame` prêt à l'emploi: 
:::

::: {.content-visible when-profile="en"}
We will simply reproduce @fig-figure1-exo1-en with `seaborn`. To do this, here is the code needed to have a ready-to-use `DataFrame`:
:::

```{python}
#| echo: true
#| label: preparation-exo2
#| code-fold: true
df1 = (
    df
    .groupby('nom_compteur')
    .agg({'sum_counts': "mean"})
    .sort_values('sum_counts', ascending = False)
    .head(10)
    .sort_values('sum_counts')
)


df1 = df1.reset_index().sort_values("sum_counts", ascending = False)

df1.head()
```

:::: {.content-visible when-profile="fr"}

::: {.callout-tip}
## Exercice 2: reproduire la première figure avec `seaborn`

1. Refaire le graphique précédent avec la fonction `catplot` de `seaborn`. Pour contrôler la taille du graphique vous pouvez utiliser les arguments `height` et `aspect`.

2. Ajouter les titres des axes et le titre du graphique 

3. Même si cela n'apporte rien en termes d'information, essayez de colorer en rouge, comme sur la figure du portail _open data_, l'axe des `x`. Vous pouvez pré-définir un
style avec `sns.set_style("ticks", {"xtick.color": "red"})`

:::

::::

:::: {.content-visible when-profile="en"}
::: {.callout-tip}
## Exercise 2: reproduce the first figure with `seaborn`

1. Redraw the previous graph using the `catplot` function from `seaborn`. To control the size of the graph, you can use the `height` and `aspect` arguments.

2. Add axis titles and a title to the graph. 

3. Even if it does not add any information, try colouring the `x` axis red, as in the figure on the _open data_ portal. You can predefine a
style with `sns.set_style('ticks', {'xtick.color': 'red'})`.

:::

::::

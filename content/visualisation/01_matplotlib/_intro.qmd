:::: {.content-visible when-profile="fr"}

# Introduction

Ce chapitre est consacré à la visualisation de données et propose une tâche classique du quotidien des _data scientists_ et _data engineers_ : la construction de figures qui viendront alimenter un tableau de bord (_dashboard_) analytique permettant d'avoir un regard restrospectif sur un phénomène d'intérêt. 

Pour faire ceci, nous allons répliquer quelques figures disponibles en ligne sur le [portail _open data_ de la ville de Paris {{< fa arrow-up-right-from-square >}}](https://opendata.paris.fr/explore/dataset/comptage-velo-donnees-compteurs/dataviz/?disjunctive.id_compteur&disjunctive.nom_compteur&disjunctive.id&disjunctive.name){target="_blank"}. Comme ces figures ne sont pas toujours parfaites du point de vue des bonnes pratiques graphiques, nous allons parfois essayer de rendre l'information représentée plus facilement accessible en modifiant à la marge les figures. 

L'objectif principal de ce chapitre est de présenter, rapidement, les principaux écosystèmes de visualisation disponibles en `Python` afin d'en mesurer les forces et faiblesses et connaître, pour un objectif donné, les principaux points d'entrée. Il ne s'agit pas de faire un inventaire complet des graphiques pouvant être fait avec `Python`, ce serait long, assez insipide et peu pertinent car des sites le font déjà très bien à partir d'une grande variété d'exemple, notamment le site [python-graph-gallery.com/ {{< fa arrow-up-right-from-square >}}](https://python-graph-gallery.com/){target="_blank"}. L'objectif est plutôt d'illustrer, par la pratique, quelques enjeux liés à l'utilisation des principales librairies graphiques de `Python`.

::::

:::: {.content-visible when-profile="en"}
This chapter focuses on data visualization and presents a classic task for _data scientists_ and _data engineers_: constructing figures that populate an analytical dashboard, providing a retrospective view of a phenomenon of interest.  

To illustrate this, we are going to reproduce several charts available on the [City of Paris' _open data_ portal {{< fa arrow-up-right-from-square >}}](https://opendata.paris.fr/explore/dataset/comptage-velo-donnees-compteurs/dataviz/?disjunctive.id_compteur&disjunctive.nom_compteur&disjunctive.id&disjunctive.name){target="_blank"}. Since these charts do not always adhere to best practices in data visualization, we will at times modify them in order to make the represented information more accessible.

::::


:::: {.content-visible when-profile="fr"}

::: {.callout-important}

Être capable de construire des visualisations de données intéressantes est une compétence nécessaire à tout _data scientist_ ou chercheur. Pour améliorer la qualité de ces visualisations, il est recommandé de suivre certains conseils donnés par des spécialistes de la _dataviz_ sur la sémiologie graphique.

Les bonnes visualisations de données, comme celles du _New York Times_, reposent certes sur des outils adaptés (des librairies `JavaScript`) mais aussi sur certaines règles de représentation qui permettent de comprendre en quelques secondes le message d'une visualisation. 

Transmettre une information synthétique de manière limpide à un public ne s'inventant pas, il est recommandé de réfléchir à la réception d'une visualisation et aux messages principaux que celle-ci est censée transmettre. Cette [présentation d'Eric Mauvière {{< fa arrow-up-right-from-square >}}](https://ssphub.netlify.app/talk/2024-02-29-mauviere/){target="_blank"} illustre, avec de nombreux exemples, la manière dont des choix de visualisation affectent la pertinence du message délivré. 

Parmi les autres ressources que j'ai trouvées utiles par le passé, ce post de blog de [`datawrapper` {{< fa arrow-up-right-from-square >}}](https://blog.datawrapper.de/text-in-data-visualizations/){target="_blank"} (une référence dans le domaine de la visualisation) est très intéressant. Ce [post de blog {{< fa arrow-up-right-from-square >}}](https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look){target="_blank"} d'Albert Rapp montre également comment construire graduellement une bonne visualisation de données et mérite d'être relu de temps en temps. Enfin, parmi les sites à consulter fréquemment sur le sujet, les ressources proposées sur le [blog {{< fa arrow-up-right-from-square >}}](https://www.andrewheiss.com/blog/){target="_blank"} d'Andrew Heiss valent le détour.
:::

::::

:::: {.content-visible when-profile="en"}

The ability to construct effective and engaging data visualizations is an essential skill for any _data scientist_ or researcher. To improve the quality of such visualizations, it is advisable to follow the recommendations offered by specialists in _dataviz_ and graphic semiology.  

High-quality visualizations, such as those produced by the _New York Times_, depend not only on the use of appropriate tools (for example, JavaScript libraries), but also on adherence to established principles of representation that allow the message of a visualization to be grasped within seconds.  

Because it is not easy to convey complex information to an audience in a clear and synthetic manner, it is important to consider both the reception of a visualization and the principal messages it is intended to communicate. This [presentation by Eric Mauvière {{< fa arrow-up-right-from-square >}}](https://ssphub.netlify.app/talk/2024-02-29-mauviere/){target="_blank"} illustrates, through numerous examples, how visualization choices influence the effectiveness of the message delivered.  

Among other resources that I have found particularly useful, this blog post by [`datawrapper` {{< fa arrow-up-right-from-square >}}](https://blog.datawrapper.de/text-in-data-visualizations/){target="_blank"}, a reference in the field of visualization, is especially insightful. This [blog post {{< fa arrow-up-right-from-square >}}](https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look){target="_blank"} by Albert Rapp also demonstrates how to progressively construct an effective visualization and is well worth revisiting periodically. Finally, among the sites that merit frequent consultation, the resources available on Andrew Heiss’s [blog {{< fa arrow-up-right-from-square >}}](https://www.andrewheiss.com/blog/){target="_blank"} are of considerable value.


::::


::: {.content-visible when-profile="fr"}
On peut distinguer quelques grandes familles de représentations graphiques: les représentations de distributions propres à une variable, les représentations de relations entre plusieurs variables, les cartes qui permettent de représenter dans l'espace une ou plusieurs variables...

Ces familles se ramifient elles-mêmes en de multiples types de figures. Par exemple, selon la nature du phénomène, les représentations de relations peuvent prendre la forme d'une série temporelle (évolution d'une variable dans le temps), d'un nuage de point (corrélation entre deux variables), d'un diagramme en barre (pour souligner le rapport relatif entre les valeurs d'une variable en fonction d'une autre), etc.

Plutôt qu'un inventaire à la Prévert des types de visualisations possibles, ce chapitre et le suivant vont plutôt proposer quelques visualisations qui pourraient donner envie d'aller plus loin dans l'analyse avant la mise en oeuvre d'une forme de modélisation. Ce chapitre est consacré aux visualisations traditionnelles, le [suivant {{< fa arrow-up-right-from-square >}}](/content/visualisation/maps.qmd){target="_blank"} est dédié à la cartographie. Ces deux chapitres font partie d'un tout visant à offrir les premiers éléments pour synthétiser l'information présente dans un jeu de données.

Le pas suivant est d'approfondir le travail de communication et de synthèse par le biais de productions pouvant prendre des formes aussi diverses que des rapports, des publications scientifiques ou articles, des présentations, une application interactive, un site web ou des _notebooks_ comme ceux proposés par ce cours. Le principe général est identique quel que soit le _medium_ utilisé et intéresse particulièrement les _data scientists_ lorsqu'ils font appel à de l'exploitation intensive de données et désirent obtenir un _output_ reproductible. Un jour peut-être j'ajouterai un chapitre à ce propos dans ce cours[^quarto].

[^quarto]: Ce chapitre sera construit autour de l'écosystème [ {{< iconify simple-icons:quarto style="color:#74aadb;" >}} `Quarto` {{< fa arrow-up-right-from-square >}}](https://quarto.org/){target="_blank"}. En attendant ce chapitre, vous pouvez consulter la documentation exemplaire de cet écosystème et pratiquer, ce sera le meilleur moyen de découvrir.
:::

::: {.content-visible when-profile="en"}
Several major families of graphical representations can be distinguished: visualizations of distributions for a single variable, visualizations of relationships between multiple variables, and maps that allow one or more variables to be represented in space.  

Each of these families encompasses a variety of specific figure types. For example, depending on the nature of the phenomenon, visualizations of relationships may take the form of a time series (the evolution of a variable over time), a scatter plot (the correlation between two variables), or a bar chart (illustrating the relative relationship between the values of one variable in relation to another), among others.  

Rather than attempting to provide an exhaustive catalogue of possible visualizations, this chapter and the next will present a selection designed to encourage further analysis prior to the implementation of any modeling. This chapter focuses on traditional visualizations, while the [following chapter {{< fa arrow-up-right-from-square >}}](/content/visualization/maps.qmd){target="_blank"} is devoted to cartography. Together, these chapters aim to provide an initial framework for synthesizing the information contained in a dataset.  

The subsequent step is to advance the work of communication and synthesis through outputs that may take diverse forms, such as reports, scientific publications, articles, presentations, interactive applications, websites, or _notebooks_ such as those used in this course. The general principle remains the same regardless of the _medium_, and is of particular interest to _data scientists_ when the task involves intensive use of data and requires a reproducible _output_. A chapter dedicated to this topic may be added to the course in the future[^quarto-en].  

[^quarto-en]: This forthcoming chapter will be structured around the [ {{< iconify simple-icons:quarto style="color:#74aadb;" >}} `Quarto` {{< fa arrow-up-right-from-square >}}](https://quarto.org/){target="_blank"} ecosystem. In the meantime, readers are encouraged to consult the exemplary documentation available for this ecosystem and to experiment with it directly, as this remains the most effective way to learn.
:::



:::: {.content-visible when-profile="fr"}

::: {.callout-important}
## Utiliser une interface interactive pour visualiser les graphiques

Pour les chapitres de visualisation, il est vivement recommandé d’utiliser `Python` par le biais d'une interface interactive comme un _notebook Jupyter_ (via `VSCode` ou `Jupyter` par exemple, cf. [le chapitre de présentation des notebooks {{< fa arrow-up-right-from-square >}}](/content/getting-started/01_environment.qmd)){target="_blank"}. 

Cela permet de visualiser les graphiques immédiatement sous chaque cellule de code, de les ajuster facilement, et de tester des modifications en temps réel.

À l’inverse, si l'on exécute des scripts depuis une console classique (par exemple en écrivant dans un fichier `.py` et en exécutant ligne à ligne avec <kbd>MAJ</kbd>+,<kbd>ENTREE</kbd> dans `VSCode`) les graphiques ne vont pas s'afficher dans une fenêtre _popup_. Cela  nécessite de faire des commandes supplémentaires pour les enregistrer, avant d'ouvrir les exports manuellement et pouvoir corriger le cas échéant le code. L’expérience d’apprentissage en devient plus laborieuse.
:::

::::


:::: {.content-visible when-profile="en"}

::: {.callout-important}

## Use an interactive interface to visualize graphics

For visualization chapters, it is highly recommended to use `Python` via an interactive interface such as a _notebook Jupyter_ (via `VSCode` or `Jupyter` for example, see [the notebook presentation chapter {{< fa arrow-up-right-from-square >}}](/content/getting-started/01_environment.qmd)){target="_blank"}. 

This makes it possible to view the graphics immediately below each code cell, to adjust them easily, and to test modifications in real time.
Conversely, if scripts are run from a conventional console (e.g., by writing to a `.py` file and executing line by line with <kbd>MAJ</kbd>+,<kbd>ENTREE</kbd> in `VSCode`), the graphics will not be displayed in a popup window_ requiring additional commands to save them, before opening the exports manually and being able to correct the code if necessary. This makes for a more laborious learning experience.
:::

::::



::: {.content-visible when-profile="fr"}
## Données {-}

Ce chapitre s'appuie sur les données de comptage des passages de vélo dans les points de mesure parisiens diffusés sur le site de l'_open data_ de la ville de Paris.

L'exploitation de l'historique récent a été grandement facilité par la diffusion des données au format `Parquet`, un format moderne plus pratique que le CSV. Pour en savoir plus sur ce format, vous pouvez consulter les ressources évoquées dans le paragraphe consacré à ce format dans le [dernier chapitre de la partie consacrée à la manipulation de données {{< fa arrow-up-right-from-square >}}](/content/manipulation/05_parquet_s3.qmd){target="_blank"}.
:::

::: {.content-visible when-profile="en"}
## Data {-}

This chapter is based on the bicycle passage count data from Parisian measurement points, published on the open data website of the City of Paris.

The analysis of recent historical data has been made easier by the availability of datasets in the `Parquet` format, a modern alternative that is more efficient and convenient than CSV. Further information on this format can be found in the resources cited in the paragraph dedicated to it in the [final chapter of the section on data manipulation {{< fa arrow-up-right-from-square >}}](/content/manipulation/05_parquet_s3.qmd){target="_blank"}.
:::
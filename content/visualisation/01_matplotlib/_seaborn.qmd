::: {.content-visible when-profile="fr"}
# Utiliser directement `seaborn`

## Comprendre `seaborn` en quelques lignes

`seaborn` est une interface haut-niveau au dessus de `matplotlib`. Ce package offre un ensemble de fonctionnalités pour créer des figures ou des axes `matplotlib` directement depuis une fonction admettant de nombreux arguments et, si besoin d'aller plus loin dans la customisation, d'utiliser les fonctionnalités de `matplotlib` pour mettre à jour la figure, que ce soit par le biais de l'approche implicite ou explicite décrites précédemment.

Comme pour `matplotlib`, `seaborn` permet de faire la même figure de multiples manières. `seaborn` hérite de la dualité axes-figures de `matplotlib` et il faudra souvent jouer avec un niveau ou l'autre. La principale caractéristique de `seaborn` est d'offrir quelques points d'entrée standardisés, par exemple `seaborn.relplot` ou `seaborn.catplot`, et une logique d'_inputs_ basée sur le `DataFrame` là où `matplotlib` est structurée autour du _array_ `Numpy`. Il faut néanmoins être conscient que `seaborn` souffre globalement des mêmes limites que `matplotlib`, notamment du caractère peu intuitif des éléments de customisation qui, dès lors qu'on ne les trouvent pas dans les arguments, peuvent devenir un casse-tête à mettre en oeuvre.

La figure comporte maintenant un message mais il est encore peu lisible. Il y a plusieurs manières de faire un *barplot* en `seaborn`. Les deux principales sont :

- `sns.catplot` ;
- `sns.barplot`.

On propose d'utiliser `sns.catplot` pour cet exercice. Il s'agit d'un point d'entrée assez fréquent pour faire des graphiques d'une variable discrétisée.

## Reproduction de l'exemple précédent avec `seaborn`
:::

::: {.content-visible when-profile="en"}


# Using `seaborn` directly

## Understanding `seaborn` in a Few Lines

`seaborn` is a high-level interface built on top of `matplotlib`. This package provides a set of features to create `matplotlib` figures or axes directly from a function with numerous arguments. If further customization is needed, `matplotlib` functionalities can be used to update the figure, whether through the implicit or explicit approaches described earlier.

As with `matplotlib`, the same figure can be created in multiple ways in `seaborn`. `seaborn` inherits the figure-axes duality from `matplotlib`, requiring frequent adjustments at either level. The main characteristic of `seaborn` is its standardized entry points, such as `seaborn.relplot` or `seaborn.catplot`, and its _input_ logic based on `DataFrame`, whereas `matplotlib` is structured around `Numpy` arrays. However, it is important to be aware that `seaborn` suffers from the same limitations as `matplotlib`, particularly the unintuitive nature of the customisation elements, which, if not found in the arguments, can be a headache to implement.

The figure now conveys a message, but it is still not very readable. There are several ways to create a *barplot* in `seaborn`. The two main ones are:

- `sns.catplot`
- `sns.barplot`

For this exercise, we suggest using `sns.catplot`. It is a common entry point for plotting graphs of a discretized variable.

## Reproduction of the previous example with `seaborn`
:::
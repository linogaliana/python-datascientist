---
title: "Introduction à la cartographie avec Python"
tags:
  - Visualisation
  - geopandas
  - cartes
  - Cartographie
  - Exercice
categories:
  - Visualisation
  - Exercice
description: |
  La cartographie est un excellent moyen de diffuser de la connaissance sur les données, y compris à des publics peu familiers de la statistique. Ce chapitre permet de découvrir le défi de la cartographie et la manière dont on peut utiliser `Python` pour construire des cartes. 
image: https://minio.lab.sspcloud.fr/lgaliana/generative-art/pythonds/cartography.png
bibliography: ../../reference.bib
echo: false
---

{{< badges
    printMessage="true"
>}}

:::: {.tip}
## Compétences à l'issue de ce chapitre

::::


# Introduction


La cartographie est l'une des plus anciennes représentations d'informations sous forme graphique.
Longtemps cantonnée aux domaines militaires et administratifs ou à la synthèse d'informations pour la navigation,
la cartographie est, au moins depuis le XIXe siècle, une des formes privilégiées de représentation de l'information. Il s'agit de l'époque où la carte par aplat de couleur, dite carte choroplèthe, a commencé à devenir une représentation de données géographiques traditionnelle. 

D'après @chen2008brief, la première représentation de ce type 
a été proposée par Charles Dupin en 1826 [@fig-dupin]
pour représenter les niveaux d'instruction sur le territoire français. 
L'émergence des cartes choroplèthes est en effet indissociable 
de l'organisation du pouvoir sous forme d'entités politiques supposées unitaires. Par exemple, les cartes du monde représentent souvent des aplats de couleurs à partir
des nations, les cartes nationales à partir d'échelons administratifs
(régions, départements, communes, mais aussi Etats ou _landers_). 

![La première carte choroplèthes par Dupin (1826)](https://upload.wikimedia.org/wikipedia/commons/thumb/3/38/Carte_figurative_de_l%27instruction_populaire_de_la_France.jpg/800px-Carte_figurative_de_l%27instruction_populaire_de_la_France.jpg){#fig-dupin width="50%" fig-align="center"}

On peut voir l'émergence pendant le XIXe siècle de la
carte choroplèthe comme un moment important de la cartographie,
un glissement de l'usage militaire vers l'usage politique.
Il ne s'agissait plus exclusivement
de représenter le territoire physique mais aussi la réalité socioéconomique,
dans des bornes administratives connues de tous. 

Avec la prolifération de données géolocalisées et l'usage accru de données pour la décision, il est devenu crucial pour les _data scientists_ de savoir faire une carte rapidement. Ce chapitre, complément de celui sur les [données spatiales](/content/manipulation/03_geopandas_intro.qmd), 
propose quelques exercices pour apprendre les enjeux de la représentation de données sous forme cartographique avec `Python`. 


::: {.note}
Produire de belles cartes demande du temps mais aussi du bon sens. 
Comme toute représentation graphique, il est important de réfléchir au message
à faire passer et aux moyens appropriés.
La sémiologie cartographique, 
une discipline scientifique qui s'intéresse aux messages transmis par les cartes,
propose certaines règles pour éviter de transmettre des messages faussés,
volontairement ou involontairement. 

Certaines peuvent être retrouvées à travers des conseils pratiques
dans
ce [guide de sémiologie cartographique](https://www.insee.fr/fr/statistiques/3640429)
de l'Insee. Celles-ci sont reprises
dans [ce guide](https://juliedjidji.github.io/memocarto/semio.html).

[Cette présentation](https://neocarto.github.io/docs/slides/ENTPE/docs/#/title-slide)
de Nicolas Lambert revient, à partir de nombreux exemples, sur quelques principes
de la _dataviz_ cartographique.

:::


Ce chapitre présentera d'abord quelques fonctionnalités basiques de [`Geopandas`](https://geopandas.org/mapping.html) pour la construction de cartes figées. Pour contextualiser l'information présentée, nous utiliserons des contours officiels produits par l'IGN. Nous proposerons ensuite des cartes avec une contextualisation accrue et plusieurs niveaux d'information ce qui permettra d'illustrer l'intérêt de l'utilisation de librairies réactives, s'appuyant sur `JavaScript`, comme [`Folium`](https://python-visualization.github.io/folium/latest/). 


## Données utilisées


Au cours de ce chapitre, nous allons utiliser
plusieurs jeux de données pour illustrer
différents types de cartes:

- Des comptages de population ;
- Les limites départementales de la France métropolitaine ;
- Les limites communales du Finistère ;
- Le couvert forestier du département des Landes ;
- La localisation des stations Velib ;


## Installations préalables

Avant de pouvoir commencer, il est nécessaire d'installer quelques 
packages au préalable:

```{python}
#| eval: false
#| echo: true

# Sur colab
!pip install pandas fiona shapely pyproj rtree geopandas #<1> 
```
1. Ces librairies sont utiles pour l'analyse géospatiale (cf. [chapitre dédié](/content/manipulation/03_geopandas_intro.qmd))

Nous allons principalement avoir besoin de `Pandas` et `GeoPandas` pour ce chapitre

```{python}
#| echo: true
import pandas as pd
import geopandas as gpd
```

# Premières cartes pour connaître l'emprise spatiale de ses données

Nous allons utiliser `cartiflette` qui facilite
la récupération des fonds de carte administratifs
de l'IGN. Ce package est un projet interministériel visant à offrir une interface simple par le biais de `Python` pour récupérer des découpages officiels de l'IGN. 

En premier lieu, nous allons récupérer les limites 
des départements:

```{python}
#| echo: true
#| output: false
from cartiflette import carti_download

departements = carti_download(
    values="France",
    crs=4326,
    borders="DEPARTEMENT",
    vectorfile_format="geojson",
    filter_by="FRANCE_ENTIERE_DROM_RAPPROCHES",
    source="EXPRESS-COG-CARTO-TERRITOIRE",
    year=2022,
)
```

Ces données rapprochent les DROM de la France hexagonale comme c'est expliqué dans l'un des [tutoriels de `cartiflette`](https://github.com/inseeFrLab/cartiflette-website/) et comme l'exercice 1 permettra de le vérifier. 

```{python}
communes = carti_download(
    values="29",
    crs=4326,
    borders="COMMUNE",
    vectorfile_format="geojson",
    filter_by="DEPARTEMENT",
    source="EXPRESS-COG-CARTO-TERRITOIRE",
    year=2022,
)
```

L'exercice 1 vise à s'assurer que nous avons bien récupéré les contours voulus en représentant simplement. Ceci devrait être le premier réflexe de tout _geodata scientist_.

::: {.exercise}
## Exercice 1: représentation des contours avec les méthodes de `GeoPandas`

1. Utiliser la méthode `plot` sur le jeu de données `departements` pour vérifier
l'emprise spatiale. Les coordonnées affichées vous évoquent quelle projection ? Vérifier avec la méthode `crs`. 
2. Reprojeter les données en Lambert 93 (EPSG: 2154) et faire la même carte.
3. En utilisant les options `matplotlib` adéquates, représenter une carte avec les contours noirs, le fond blanc et sans axes.
4. Faire la même carte pour les communes du Finistère
:::


La carte des départements, sans modifier aucune option, ressemble à celle-ci

```{python}
# Question 1
departements.plot()
```

Les coordonnées affichées nous suggèrent du `WGS84`, ce qu'on peut vérifier avec la méthode CRS:

```{python}
departements.crs
```


Si on fait la conversion en Lambert 93 (système légal pour l'hexagone), on obtient une emprise différente mais qui est censée être plus véridique pour la métropole (par pour les DROM rapprochés puisque, par exemple, la Guyane est en principe beaucoup plus grande). 

```{python}
departements.to_crs(2154).plot()
```

Et bien sûr on retrouve facilement les cartes ratées du [chapitre sur `GeoPandas`](/content/manipulation/03_geopandas_intro.qmd), par exemple si on applique une transformation prévue pour l'Amérique du Nord:

```{python}
#| echo: true
departements.to_crs(5070).plot()
```

Si on fait une carte un petit peu plus esthétique, cela nous donne:

```{python}
# Question 3
ax = (
  departements.boundary.plot(edgecolor = "black", linewidth=0.2)
)
ax.set_axis_off()
```

Et la même pour le Finistère:

```{python}
# Question 4
ax = (
  communes.boundary.plot(edgecolor = "black", linewidth=0.2)
)
ax.set_axis_off()
```


Ces cartes sont simples et pourtant elles font déjà appel à des connaissances implicites. Elles demandent déjà une connaissance du territoire. Quand nous commencerons à coloriser certains départements, savoir lesquels ont des valeurs extrêmes implique de bien connaître sa géographie française. De même, cela apparaît certes évident, mais rien ne dit dans notre carte du Finistère que ce département est bordé par l'océan. Un lecteur Français le verra comme une évidence mais ce n'est pas forcément le cas d'un lecteur étranger qui, bien sûr, ne connait pas le détail de notre géographie. 

Pour cela, nous avons des parades grâce aux cartes réactives qui permettent:

* D'afficher des informations contextuelles quand on passe la souris ou clique sur un élément de la carte.
* D'afficher un fond de carte offrant des informations contextuelles comme les axes de transport, les localités ou les frontières naturelles. 


Pour ceci, nous allons garder uniquement les données correspondant à une réelle emprise spatiale, ce qui exclut notre zoom de l'Ile de France et les DROM

```{python}
#| echo: true
departements_no_duplicates = (
  departements
  .drop_duplicates(subset = "INSEE_DEP") #<1>
)
departements_hexagone = (
  departements_no_duplicates
  .loc[~departements['INSEE_DEP'].str.startswith("97")] #<2>
)
```
1. On retire le zoom sur l'Île de France
2. On ne garde que la France hexagonale

On obtient bien l'hexagone:

```{python}
#| echo: true
departements_hexagone.plot()
```

Pour le prochain exerice, nous allons avoir besoin de quelques variables supplémentaires. En premier lieu le centre géométrique de la France qui nous permettra de placer le centre de notre carte. 

```{python}
#| echo: true
minx, miny, maxx, maxy = departements_hexagone.total_bounds
center = [(miny + maxy) / 2, (minx + maxx) / 2]
```

Nous allons aussi avoir besoin d'un dictionnaire pour renseigner à `Folium` des informations sur les paramètres de notre carte:

```{python}
#| echo: true
style_function = lambda x: {
    'fillColor': 'white',  #<1>
    'color': 'black',     
    'weight': 1.5,        
    'fillOpacity': 0.0   
}
```
1. En fait cela permettra d'avoir une couche transparente en combinant avec le paramètre `fillOpacity` à 0%. 

`style_function` est une fonction anonyme qui sera utilisée dans l'exercice. 

Une information qui s'affiche lorsqu'on passe la souris s'appelle un _tooltip_ en langage de développement web. 

```{python}
#| echo: true
import folium
tooltip = folium.GeoJsonTooltip(
    fields=['LIBELLE_DEPARTEMENT', 'INSEE_DEP', 'POPULATION'],
    aliases=['Département:', 'Numéro:', 'Population:'],
    localize=True
)
```

Pour le prochain exercice, il faudra utiliser le _GeoDataFrame_ dans la projection Mercator. En effet,
`Folium` attend des données dans cette projection car cette librairie se base sur les fonds de carte de 
navigation, qui sont adaptés à cette représentation. En principe, on utilise plutôt `Folium` pour des 
représentations locales, où la déformation des surfaces induite par la projection Mercator n'est pas
problématique. Pour le prochain exercice, où nous représenterons la France dans son ensemble, nous
faisons donc un usage quelque peu détourné de la librairie. Mais la France étant encore assez lointaine
du pôle nord, la déformation reste un prix à payer faible par rapport aux gains de l'interactivité.


::: {.exercise}
## Exercice 2: faire une première carte réactive avec `Folium`

1. Créer la couche de fond en utilisant l'objet `center` et le niveau `zoom_start` égal à 5
2. Mettre à jour celle-ci en utilisant notre `departements_hexagone` et les paramètres `style_function` et `tooltip`
:::

Voici la couche de fond de la question 1:

```{python}
m = folium.Map(location=center, zoom_start=5)
m
```

Et une fois mise en forme, cela nous donne la carte:

```{python}
folium.GeoJson(
    departements_hexagone,
    style_function=style_function,
    tooltip=tooltip
).add_to(m)

m
```

Lorsqu'on passe sa souris sur la carte ci-dessus, on obtient quelques informations contextuelles.  On peut donc jouer sur différents niveaux d'information : un premier coup d'oeil permet de se représenter les données dans l'espace, une recherche approfondie permet d'avoir des informations secondaires, utiles à la compréhension, mais pas indispensables. 

Ces premiers exercices illustraient une situation
où on ne désire représenter que les limites des polygones. C'est une carte utile pour rapidement placer
son jeu de données dans l'espace mais ça n'apporte pas 
d'information supplémentaire. Pour cela, il va être nécessaire
d'utiliser les données tabulaires associées à la dimension spatiale.


# Représenter des données : un premier exemple avec une carte de couverture forestière

Pour cette partie, nous allons faire une carte du couvert forestier
landais à partir de la BD Forêt produite par l'IGN. L'objectif n'est plus seulement de placer des limites du territoire d'intérêt mais de représenter de l'information sur celui-ci à partir des données présentes dans un _GeoDataFrame_.

La BD Forêt étant
un petit peu volumineuse dans le format _shapefile_, nous proposons
de la récupérer dans un format plus compressé: le _geopackage_.

```{python}
#| echo: true
foret = gpd.read_file(
  "https://minio.lab.sspcloud.fr/projet-formation/diffusion/r-geographie/landes.gpkg"
)
```

Nous allons aussi créer un masque pour les contours du département: 

```{python}
#| echo: true
landes = (
  departements
  .loc[departements["INSEE_DEP"] == "40"].to_crs(2154)
)
```


::: {.exercise}
## Exercice 3: première carte par aplat de couleur

Créer une carte du couvert forestier des Landes à partir des données
importées précédemment depuis la BD Forêt. Vous pouvez ajouter les limites du département pour contextualiser cette carte. 

Cette carte peut être créée via `Geopandas` et `matplotlib` ou via `plotnine` (cf. [chapitre précédent](/content/visualisation/matplotlib.qmd)). 

:::

Comme on peut le voir sur la carte (@fig-landes), le département des Landes est très forestier. Ceci est logique puisque les deux tiers du département sont couverts, ce qu'on peut vérifier avec le calcul suivant[^landes-epsg]:

```{python}
#| echo: true
f"Part du couvert forestier dans les Landes: {float(foret.area.sum()/landes.area):.0%}"
```

[^landes-epsg]: Ce calcul est possible car les deux bases sont en projection Lambert 93 pour lequel les opérations géométriques (dont les calculs de surface) sont autorisés.

```{python}
#| fig-cap: "Couvert forestier des Landes"
#| label: fig-landes
# Version plotnine
from plotnine import *

map = (
  ggplot(foret) +
  geom_map(fill = "forestgreen", size = 0) +
  geom_map(data = landes, color = "black", size = 1, fill = None) +
  theme_void()
)

map
```

```{python}
#| output: false
# Version matplotlib
import matplotlib.pyplot as plt
fig, ax = plt.subplots(figsize=(10, 10))
foret.plot(ax=ax, color="forestgreen", edgecolor=None)
landes.plot(ax=ax, edgecolor="black", linewidth=1, facecolor="none")
ax.set_axis_off()
plt.show()
```

Ici la carte est assez claire et donne un message relativement lisible. Bien sûr on ne dispose pas de détails qui pourraient intéresser les curieux (par exemple quelles localités sont particulièrement couvertes) mais on dispose d'une vision synthétique du phénomène étudié. 

# Découverte des cartes choroplèthes

L'exercice précédent nous a permis de créer une carte par aplat de couleur. Ceci nous amène naturellement vers la carte choroplèthe, où l'aplat de couleur vise à représenter une information socioéconomique. 

Nous allons utiliser les données de population présentes dans les données récupérées par le biais de `cartiflette`[^poplegales]. Nous allons nous amuser à créer la carte choroplèthe en lui donnant le style _vintage_ des premières cartes de Dupin (1826). 


[^poplegales]: _Stricto sensu_, il faudrait vérifier que ces colonnes correspondent bien aux populations légales définies par l'Insee. Cette variable est fournie nativement par l'IGN dans ses fonds de carte. Nous laissons les lecteurs intéressés faire ce travail, qui permet de réviser les compétences `Pandas`.  


::: {.exercise}
## Exercice 4: une première carte de population

L'objectif de cet exercice va être d'enrichir
les informations présentées sur la carte
des départements.

1. Représenter rapidement la carte des départements en colorant en fonction de la variable `POPULATION`. 

Cette carte présente plusieurs problèmes: 

* Si vous connaissez la géographie française, vous devriez noter une forme anormale, comme si l'axe est-ouest avait été agrandi par excès. C'est parce qu'il faut reprojeter la carte en Lambert 93.
* Elle est peu lisible à cause de plusieurs facteurs: gradient continu, distribution non normale de la variable, légende perfectible, etc.

Les prochaines questions visent à améliorer ceci progressivement.

2. Refaire cette carte dans la projection Lambert 93.
3. Discrétiser la variable `POPULATION` en utilisant 4 classes par le biais d'une discrétisation par quantile. Refaire la carte.
4. Diviser votre population par la taille de chaque département (en km2) en créant une variable à partir de `.area.div(1e6)`[^note-mesure]. 
5. Choisir une palette de couleur _vintage_ type échelle de gris.


[^note-mesure]: Le Lambert 93 donne une aire en mètres carrés. Pour la transformer en km², il faut faire `div(1e6)`.

:::

La première question donne une carte ayant cet aspect:

```{python}
from plotnine import *

# Question 1
map1 = (
  ggplot(departements) +
  geom_map(aes(fill = "POPULATION")) +
  theme_void()
)

map1
```

Elle est déjà améliorée par l'utilisation d'une projection adaptée pour le territoire, le Lambert 93 (question 2):

```{python}
# Question 2
departements_l93 = departements.to_crs(2154)
map2 = (
  ggplot(departements_l93) +
  geom_map(aes(fill = "POPULATION")) +
  theme_void()
)

map2
```

La carte ci-dessous, après discrétisation (question 3), donne déjà une représentation plus véridique des inégalités de population. On remarque que la diagonale du vide commence à se dessiner ce qui est logique pour une carte de population.

```{python}
# Question 3
departements_l93['POPULATION_discrete'] = pd.Categorical(
  pd.qcut(departements['POPULATION'].div(1000).round(), q=4)
)

(
  ggplot(departements_l93) +
  geom_map(aes(fill = "POPULATION_discrete")) +
  theme_void()
)
```

Cependant, l'un des problèmes des choroplèthes est qu'elles donnent un poids exagéré aux grands espaces. Ceci avait été particulièrement mis en avant dans le cas des cartes électorales avec le visuel ["Land doesn't vote, people do"](https://x.com/karim_douieb/status/1181934417650040832) (version [élections européennes de 2024](https://x.com/karim_douieb/status/1800777148871188766)). Sans pouvoir totalement s'abstraire de ce problème, pour cela il faudrait changer de type de représentation graphique, par exemple avec des ronds proportionnels, on peut déjà réduire l'effet de la surface sur notre variable d'intérêt en représentant la densité (population au km² plutôt que la population).  

```{python}
import pandas as pd

departements_l93['surface_km2'] = departements_l93.area.div(1e6)
departements_l93['densite_discrete'] = pd.qcut(
    departements_l93['POPULATION'].div(departements_l93['surface_km2']).round(),
    q=4
  )
```

On obtient donc la carte suivante lorsqu'on représente la densité plutôt que la population totale:

```{python}
(
  ggplot(departements_l93) +
  geom_map(aes(fill = "densite_discrete")) +
  theme_void() +
  scale_fill_discrete()
)
```

Cela nous donne déjà une image plus véridique de la distribution de la population sur le territoire français. Néanmoins, la palette de couleur _desigual_ utilisée par défaut n'aide pas trop à saisir les nuances. Avec une palette de couleur en nuancier, qui tient compte de l'aspect ordinal de nos données, on obtient une carte plus lisible (question 5):

```{python}
# Question 5
(
  ggplot(departements_l93) +
  geom_map(aes(fill = "densite_discrete")) +
  theme_void() +
  scale_fill_grey(start=0.2, end=0.8) +
  labs(fill = "Densité (pop/km²)")
)
```

C'est déjà mieux. Néanmoins, pour avoir une meilleure carte, il faudrait choisir une discrétisation plus adéquate. C'est un travail itératif important, qui mobilise plusieurs domaines de compétences: statistique, sociologie ou économie selon le type d'information représentée, informatique, etc. Bref, la palette normale de compétences d'un _data scientist_. 


# Représenter des données infracommunales

Jusqu'à présent, nous avons travaillé sur des données où, en soi, représenter des frontières administratives suffisait pour contextualiser. Penchons maintenant sur le cas où avoir un fonds de carte contextuel va devenir crucial: les cartes infracommunales.

Pour cela nous allons représenter la localisation des stations Velib. Celles-ci sont disponibles en _open data_ sur le site de la Mairie de Paris. 

```{python}
#| echo: true
import geopandas as gpd

velib_data = "https://opendata.paris.fr/explore/dataset/velib-emplacement-des-stations/download/?format=geojson&timezone=Europe/Berlin&lang=fr"
stations = gpd.read_file(velib_data)
```

Si on représente directement celles-ci avec la méthode `plot`, on manque de contexte:

```{python}
#| echo: true
stations.plot()
```

Il est même impossible de savoir si on se trouve réellement dans Paris. On peut essayer d'associer à nos découpages administratifs pour vérifier qu'on se situe bien dans la région parisienne.

La première étape est de récupérer les découpages des arrondissements parisiens et des communes limitrophes, ce qui se fait facilement avec `cartiflette`: 

```{python}
#| echo: true
from cartiflette import carti_download

# 1. Fonds communaux
contours_villes_arrt = carti_download(
    values = ["75", "92", "93", "94"],
    crs = 4326,
    borders="COMMUNE_ARRONDISSEMENT",
    filter_by="DEPARTEMENT",
    source="EXPRESS-COG-CARTO-TERRITOIRE",
    year=2022)

# 2. Départements 
departements = contours_villes_arrt.dissolve("INSEE_DEP")
```

Si maintenant on utilise ce masque pour contextualiser les données, on est rasurré sur la nature des données

```{python}
#| echo: true
ax = stations.sample(200).plot(color = "red")
contours_villes_arrt.boundary.plot(ax=ax, edgecolor="k", linewidth=.5)
departements.boundary.plot(ax=ax, edgecolor="blue", linewidth=1)
ax.set_axis_off()
```

Les Parisiens reconnaîtront facilement leur bourgade car ils connaissent bien l'organisation de l'espace de cette agglomération. Cependant pour des lecteurs ne connaissant pas celle-ci, cette carte sera de peu de secours. L'idéal est plutôt d'utiliser le fonds de carte contextuel de `Folium` pour cela. 

Afin de ne pas surcharger la carte, il est utile d'utiliser la dimension réactive de Folium en laissant l'utilisateur.trice naviguer dans la carte et afficher un volume d'information adapté à la fenêtre visible. Pour cela, `Folium` embarque une fonctionnalité `MarkerCluster` très pratique.

On peut ainsi produire la carte désirée de cette manière:

```{python}
#| code-fold: true
import folium
from folium.plugins import MarkerCluster

# 1. Calcul du centre de la carte et des bornes sw et ne
stations['lon'] = stations.geometry.x
stations['lat'] = stations.geometry.y
center = stations[['lat', 'lon']].mean().values.tolist()
sw = stations[['lat', 'lon']].min().values.tolist()
ne = stations[['lat', 'lon']].max().values.tolist()

m = folium.Map(location=center, tiles='OpenStreetMap')
marker_cluster = MarkerCluster().add_to(m)

# Add the markers to the MarkerCluster
for i in range(len(stations)):
    folium.Marker(
        location=[stations.iloc[i]['lat'], stations.iloc[i]['lon']],
        popup=stations.iloc[i]['name']
    ).add_to(marker_cluster)

# Fit the map bounds to the markers
m.fit_bounds([sw, ne])
m
```


# Références supplémentaires {.unnumbered}

- _[Geocomputation with `Python`](https://geocompx.org/)_

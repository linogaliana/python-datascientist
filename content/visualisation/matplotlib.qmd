---
title: "De beaux graphiques avec python : mise en pratique"
categories:
    - Visualisation
    - Exercice
description: |
    Une partie essentielle du travail du 
    _data scientist_ est d'être en mesure
    de synthétiser une information dans des
    représentations graphiques percutantes. Ce
    chapitre permet de découvrir les fonctionalités graphiques de `matplotlib`, `seaborn` et `plotly` pour représenter des statistiques sur les décomptes de vélo à Paris.
image: https://minio.lab.sspcloud.fr/lgaliana/generative-art/pythonds/drawing.png
echo: false
bibliography: ../../reference.bib
---

::: {.content-visible when-format="html"}
{{< include "../../build/_printBadges.qmd" >}}
:::

La pratique de la _data visualisation_ se fera, dans ce cours, en répliquant des graphiques qu'on peut trouver sur
la page de l'*open data* de la ville de Paris 
[ici](https://opendata.paris.fr/explore/dataset/comptage-velo-donnees-compteurs/dataviz/?disjunctive.id_compteur&disjunctive.nom_compteur&disjunctive.id&disjunctive.name) ou en proposant des alternatives à ceux-ci sur les mêmes données.

L'objectif de ce chapitre n'est pas de faire un inventaire complet des graphiques pouvant être fait avec `Python`, ce serait long, assez insipide et peu pertinent car des sites le font déjà très bien à partir d'une grande variété d'exemple, notamment le site [python-graph-gallery.com/](https://python-graph-gallery.com/). L'objectif est plutôt d'illustrer, par la pratique, quelques enjeux liés à l'utilisation des principales librairies graphiques de `Python`.

On peut distinguer quelques grandes familles de représentations graphiques: les représentations de distributions propres à une variable, les représentations de relations entre plusieurs variables, les cartes qui permettent de représenter dans l'espace une ou plusieurs variables... 

Ces familles se ramifient elles-mêmes en de multiples types de figures. Par exemple, selon la nature du phénomène, les représentations de relations peuvent prendre la forme d'une série temporelle (évolution d'une variable dans le temps), d'un nuage de point (corrélation entre deux variables), d'un diagramme en barre (pour souligner le rapport relatif entre les valeurs d'une variable en fonction d'une autre), etc. 

Plutôt qu'un inventaire à la Prévert des types de visualisations possibles, ce chapitre et le suivant vont plutôt proposer quelques visualisations qui pourraient donner envie d'aller plus loin dans l'analyse avant la mise en oeuvre d'une forme de modélisation. Ce chapitre est consacré aux visualisations traditionnelles, le [suivant](/content/visualisation/maps.qmd) est dédié à la cartographie. Ces deux chapitres font partie d'un tout visant à offrir les premiers éléments pour synthétiser l'information présente dans un jeu de données. 

Le pas suivant est d'approfondir le travail de communication et de synthèse par le biais de communications pouvant prendre des formes aussi diverses que des rapports, des publications scientifiques ou articles, des présentations, une application interactive, un site web ou des _notebooks_ comme ceux proposés par ce cours. Le principe général est identique quelle que soit le _medium_ utilisé et intéresse particulièrement les _data scientists_ lorsqu'ils font appel à de l'exploitation intensive de données. Ce sera l'objet d'un chapitre futur de ce cours[^quarto]. 

[^quarto]: Ce chapitre sera construit autour de l'écosystème [`Quarto`](https://quarto.org/). En attendant ce chapitre, vous pouvez consulter la documentation exemplaire de cet écosystème et pratiquer, ce sera le meilleur moyen de découvrir. 



:::: {.important}


Être capable de construire des visualisations de données
intéressantes est une compétence nécessaire à tout
_data scientist_ ou chercheur. Pour améliorer
la qualité de ces visualisations, il est recommandé
de suivre certains conseils donnés par des spécialistes
de la _dataviz_ sur la sémiologie graphique.

Les bonnes visualisations de données, comme celles du _New York Times_,
reposent certes sur des outils adaptés (des librairies `JavaScript`)
mais aussi sur certaines règles de représentation qui permettent
de comprendre en quelques secondes le message d'une visualisation.

Ce [post de blog](https://blog.datawrapper.de/text-in-data-visualizations/)
est une ressource qu'il est utile de consulter régulièrement. 
Ce [post de blog d'Albert Rapp](https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look) montre bien comment construire graduellement une bonne visualisation
de données.  

:::


:::: {.tip}
## Compétences à l'issue de ce chapitre

* Découvrir l'écosystème [`matplotlib`](https://matplotlib.org/) et
[`seaborn`](https://seaborn.pydata.org/) pour la construction de graphiques par enrichissement successif de couches. 
* Découvrir le récent écosystème [`plotnine`](https://plotnine.readthedocs.io/en/stable/index.html).
qui est une implémentation en `Python` du _package_ `R` [`ggplot2`](https://ggplot2.tidyverse.org/)
pour ce type de représentation et qui, grâce à sa grammaire des graphiques, offre une syntaxe puissante pour construire des visualisations de données.
* Découvrir le principe des représentations interactives HTML (format _web_) grâce au package [`plotly`](https://plotly.com/python/).
* Apprendre les enjeux de la représentation graphique, les compromis nécessaires pour construire un message clair et les limites de certaines représentations classiques.

::::


:::: {.note}

Si vous êtes intéressés par `R` {{< fa brands python >}},
une version très proche de ce TP est
disponible dans [ce cours d'introduction à `R` pour l'ENS Ulm](https://rgeo.linogaliana.fr/exercises/ggplot.html).

::::

# Données

Ce chapitre s'appuie sur les données de comptage des passages de vélo dans les points de mesure parisiens diffusés sur le site de l'_open data_ de la ville de Paris. 

L'exploitation de l'historique récent a été grandement facilité par la diffusion des données au format `Parquet`, un format moderne plus pratique que le CSV. Pour en savoir plus sur ce format, vous pouvez consulter les ressources évoquées dans le paragraphe consacré à ce format dans le [chapitre d'approfondissement](/content/manipulation/02_pandas_suite.qmd). 

{{< include "_prepare_data_bike.qmd" >}}


# Premières productions graphiques avec l'API `Matplotlib` de `Pandas`

Chercher à produire une visualisation parfaite du premier coup est
illusoire. Il est beaucoup plus réaliste d'améliorer graduellement 
une représentation graphique afin, petit à petit, de mettre en 
avant les effets de structure dans un jeu de données. 

Nous allons donc commencer par nous représenter la distribution
des passages aux principales stations de mesure.
Pour cela nous allons produire
rapidement un _barplot_ puis l'améliorer graduellement. 

Dans cette partie, nous allons ainsi
reproduire les deux premiers graphiques de la
[page d'analyse des données](https://opendata.paris.fr/explore/dataset/comptage-velo-donnees-compteurs/dataviz/?disjunctive.id_compteur&disjunctive.nom_compteur&disjunctive.id&disjunctive.name) :
*Les 10 compteurs avec la moyenne horaire la plus élevée* et *Les 10 compteurs ayant comptabilisé le plus de vélos*. Les valeurs chiffrées des graphiques peuvent être différentes de celles de la page en ligne, c'est normal, car nous ne travaillons pas systématiquement sur les données ayant la même fraicheur que celles en ligne. 

Pour importer les librairies graphiques que nous utiliserons dans ce chapitre, il faut faire

```{python}
#| echo: true
import matplotlib.pyplot as plt
import seaborn as sns
from plotnine import * #<1>
```
1. Importer des librairies sous la forme `from package import *` n'est pas une très bonne pratique. Néanmoins, pour un _package_ comme `plotnine`, dont nous allons utiliser de nombreuses fonctions, ce serait un peu fastidieux d'importer les fonctions au cas par cas. De plus, cela permet de réutiliser presque tels quels les exemples de code de la librairie `R` `ggplot`, nombreux sur internet avec démonstrations visuelles. `from package import *` est l'équivalent `Python` de la pratique `library(package)` en `R`. 


## Comprendre, en quelques mots, le principe de `matplotlib` 

`matplotlib` date du début des années 2000 et a émergé pour proposer une alternative en `Python` à la création de graphiques sous `Matlab`, un logiciel propriétaire de calcul numérique. `matplotlib` est donc une librairie assez ancienne, antérieure à l'émergence de `Python` dans l'écosystème du traitement de données. Cela s'en ressent sur la logique de construction de `matplotlib` qui n'est pas toujours intuitive lorsqu'on est familier de l'écosystème moderne de la _data science_. Heureusement, il existe de nombreuses librairies qui s'appuient sur `matplotlib` mais qui visent à founir une syntaxe plus familière aux _data scientists_.

`matplotlib` propose principalement deux niveaux d'abstraction: la figure et les axes. La figure est, en quelques sortes, la "toile" globale qui contient un ou plusieurs axes dans lesquels s'inséreront des graphiques.  Selon les cas, il faudra jouer avec les paramètres de figure ou d'axe, ce qui rend très flexible la construction d'un graphique mais peut également être déroutant car on ne sait jamais trop quel niveau d'abstraction il faut modifier pour mettre à jour sa figure[^chatGPT]. Comme le montre la @fig-matplotlib, tout les éléments d'une figure sont paramétrables. 

[^chatGPT]: Heureusement, comme il existe un énorme corpus de code en ligne utilisant `matplotlib`, les assistants de code comme `ChatGPT` ou `Github Copilot` sont précieux pour construire un graphique à partir d'instructions.  

![Comprendre l'architecture d'une figure `matplotlib` (Source: [documentation officielle](https://matplotlib.org/stable/users/explain/quick_start.html))](https://matplotlib.org/stable/_images/anatomy.png){#fig-matplotlib}

En pratique, il existe deux manières de créer et mettre à jour sa figure selon qu'on préfère passer par:

- l'approche explicite, héritière d'une logique de programmation orientée objet, où on crée des objets `Figure` et `Axes` et met à jour ceux-ci.
- l'approche implicite, basée sur l'interface `pyplot` qui utilise une succession de fonctions pour mettre à jour les objets créés implicitement.

::: {.panel-tabset group="matplotlib-abstraction"}
## Approche explicite (approche orientée POO)

```{python}
#| echo: true
import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0, 2, 100)  # Sample data.

# Note that even in the OO-style, we use `.pyplot.figure` to create the Figure.
fig, ax = plt.subplots(figsize=(5, 2.7), layout='constrained')
ax.plot(x, x, label='linear')  # Plot some data on the Axes.
ax.plot(x, x**2, label='quadratic')  # Plot more data on the Axes...
ax.plot(x, x**3, label='cubic')  # ... and some more.
ax.set_xlabel('x label')  # Add an x-label to the Axes.
ax.set_ylabel('y label')  # Add a y-label to the Axes.
ax.set_title("Simple Plot")  # Add a title to the Axes.
ax.legend()  # Add a legend.
```

Source: [Documentation officielle de `matplotlib`](https://matplotlib.org/stable/users/explain/quick_start.html)

## Approche implicite


```{python}
#| echo: true
import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0, 2, 100)  # Sample data.

plt.figure(figsize=(5, 2.7), layout='constrained')
plt.plot(x, x, label='linear')  # Plot some data on the (implicit) Axes.
plt.plot(x, x**2, label='quadratic')  # etc.
plt.plot(x, x**3, label='cubic')
plt.xlabel('x label')
plt.ylabel('y label')
plt.title("Simple Plot")
plt.legend()
```

Source: [Documentation officielle de `matplotlib`](https://matplotlib.org/stable/users/explain/quick_start.html)

:::

Ces éléments constituent le minimum pour comprendre la logique de `matplotlib`. Pour être plus à l'aise avec ces concepts, la pratique répétée est indispensable. 

## Découvrir `matplotlib` par l'intermédiaire de `Pandas`

{{< include "/content/visualisation/01_matplotlib/_exo1.qmd" >}}

{{< include "/content/visualisation/01_matplotlib/_exo1_solution.qmd" >}}



On commence à avoir quelque chose qui commence à transmettre
un message synthétique sur la nature des données.
On peut néanmoins remarquer plusieurs éléments problématiques
(par exemple les labels) mais
aussi des éléments ne correspondant pas (les titres des axes, etc.) ou 
manquants (le nom du graphique...).

Comme les graphiques produits par `Pandas` suivent la logique très flexible de `matplotlib`, il est possible de les customiser. Cependant, cela demande généralement beaucoup de travail et la grammaire `matplotlib` n'est pas aussi normalisée que celle de `ggplot` en `R`.
Si on désire rester dans l'écosystème `matplotlib`, il est préférable de directement utiliser `seaborn`, qui offre quelques arguments prêts à l'emploi. Sinon on peut basculer sur l'écosystème `plotnine` qui offrira une syntaxe normalisée pour modifier les différents 


# Utiliser directement `seaborn`

## Comprendre `seaborn` en quelques lignes

`seaborn` est une interface haut niveau au dessus de `matplotlib`. Ce package offre un ensemble de fonctionnalités pour créer des figures ou des axes `matplotlib` directement depuis une fonction admettant de nombreux arguments et, si besoin d'aller plus loin dans la customisation, d'utiliser les fonctionnalités de `matplotlib` pour mettre à jour la figure, que ce soit par le biais de l'approche implicite ou explicite décrites précédemment. 

Comme pour `matplotlib`, `seaborn` permet de faire la même figure de multiples manières. `seaborn` hérite de la dualité axes-figures de `matplotlib` et il faudra souvent jouer avec un niveau ou l'autre. La principale caractéristique de `seaborn` est d'offrir quelques points d'entrées standardisés, par exemple `seaborn.relplot` ou `seaborn.catplot`, et une logique d'_inputs_ basée sur le `DataFrame` là où `matplotlib` est structurée autour du _array_ `Numpy`. 

La figure comporte maintenant un message mais il est encore peu
lisible. Il y a plusieurs manières de faire un *barplot* en `seaborn`. Les deux principales
sont :

- `sns.catplot` ;
- `sns.barplot`.

On propose d'utiliser `sns.catplot` pour cet exercice. Il s'agit d'un point d'entrée assez fréquent pour faire des graphiques d'une variable discrétisée. 

## Le diagramme en barre (_barplot_)

{{< include "/content/visualisation/01_matplotlib/_exo2.qmd" >}}
{{< include "/content/visualisation/01_matplotlib/_exo2_solution.qmd" >}}



On comprend ainsi que le boulevard de Sébastopol est le plus emprunté,
ce qui ne vous suprendra pas si vous faites du vélo à Paris. 
Néanmoins, si vous n'êtes pas familiers avec la géographie parisienne,
cela sera peu informatif pour vous, vous allez avoir besoin d'une
représentation graphique supplémentaire: une carte ! Nous verrons
ceci lors d'un prochain chapitre. 


::: {.exercise}
## Exercice 2bis : reproduire la figure _"Les 10 compteurs ayant comptabilisé le plus de vélos"_

En suivant l'approche graduelle de l'exercice 2,
refaire le graphique *Les 10 compteurs ayant comptabilisé le plus de vélos*
avec `seaborn`

:::

## Un exemple d'alternative au _barplot_, le _lollipop chart_

Les diagrammes en batons (_barplot_) sont extrêmement communs, sans doute à cause de l'héritage d'Excel où ces graphiques sont faisables en deux clics. Néanmoins, en ce qui concerne le message à transmettre, ils sont loin d'être parfaits. Par exemple, les barres prennent beaucoup d'espace visuel
ce qui peut brouiller le message à transmettre sur le rapport entre les observations. 

Sur le plan sémiologique, c'est à dire sur le plan de l'efficacité du message à transmettre,
les _lollipop charts_ sont préférables : ils
transmettent la même information mais avec moins de signes visuels pouvant brouiller sa compréhension.

Les _lollipop chart_ ne sont pas parfaits non plus mais sont un peu plus efficaces pour transmettre le message. Pour en savoir plus sur les alternatives au _barplot_, la conférence d'Eric Mauvière pour le réseau des _data scientists_ de la statistique publique, dont le message principal est _"Désempilez vos figures"_ mérite le détour ([disponible sur le site ssphub.netlify.app/](https://ssphub.netlify.app/talk/2024-02-29-mauviere/))


{{< include "/content/visualisation/01_matplotlib/_exo3.qmd" >}}


```{python}
my_range=range(1,len(df2.index)+1)

sns.set_style("ticks", {"xtick.color": "forestgreen"})

plt.hlines(y=my_range, xmin=0, xmax=df2['sum_counts'], color='black', alpha = 0.4)
plt.plot(df2['sum_counts'], my_range, "o", color = "forestgreen")

plt.yticks(my_range, df2['nom_compteur'])
plt.title("Les 10 compteurs ayant comptabilisés le plus de vélos", loc='left')
plt.xlabel('sum_counts')
plt.ylabel('La somme des vélos comptabilisés sur la période sélectionnée')
```

# La même figure avec `plotnine`

`plotnine` est le nouveau venu dans l'écosystème de la visualisation en `Python`. Cette librairie est développée par `Posit`, l'entreprise à l'origine de l'éditeur `RStudio` et de l'écosystème du _tidyverse_ si central dans le langage `R`. Cette librairie vise à importer la logique de `ggplot` en `Python` c'est à dire une grammaire des graphiques normalisée, lisible et flexible héritère de @wilkinson2012grammar.

![L'état d'esprit des habitués de `ggplot2`
quand ils découvrent `plotnine`](https://minio.lab.sspcloud.fr/lgaliana/generative-art/pythonds/elmo.jpg)


Dans cette approche, un graphique est vu comme une succession de couches qui, une fois superposées, donneront la figure suivante. En soi, ce principe n'est pas différent de celui de `matplotlib`. Néanmoins, la grammaire utilisée par `plotnine` est beaucoup plus intuitive et normalisée ce qui offrira beaucoup plus d'autonomie pour modifier sa figure. 

![La logique de `ggplot` (et `plotnine`) par @Lisa_psyTeachR_Book_Template_2021, image elle-même empruntée à @field2012discovering](https://psyteachr.github.io/data-skills-v2/images/corsi/layers.png)

Avec `plotnine`, il n'y a plus de point d'entrée dual figure-axe. Comme l'illustrent les slides ci-dessous, :

1. On initialise une figure
2. On met à jour les couches (_layers_), un niveau d'abstraction très général concernant aussi bien les données représentées que les échelles des axes ou la couleur
3. A la fin, on peut jouer sur l'esthétique en modifiant les labels des axes, de la légende, les titres, etc.  

:::{.cell .markdown}
```{=html}
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre><iframe class="sourceCode yaml code-with-copy" src="https://rgeo.linogaliana.fr/slides/ggplot.html#/ggplot2"></iframe></div>
```
:::


{{< include "/content/visualisation/01_matplotlib/_exo4.qmd" >}}
{{< include "/content/visualisation/01_matplotlib/_exo4_solution.qmd" >}}


# Premières agrégations temporelles

On va maintenant se concentrer sur la dimension temporelle de notre
jeu de données à travers deux approches :

- Un diagramme en barre synthétisant l'information de notre jeu de données
de manière mensuelle ;
- Des séries instructives sur la dynamique temporelle. Cela sera l'objet de la prochaine partie.

Avant cela, nous allons enrichir ces données pour bénéficier d'un historique plus long, permettant notamment d'avoir la période Covid dans nos données, ce qui présente un intérêt du fait de la dynamique particulière du trafic dans cette période (arrêt brutal, reprise très forte...). 

{{< include "/content/visualisation/_historical_data_bike.qmd" >}}


Pour commencer, reproduisons la troisième figure qui est, encore une fois, 
un _barplot_. Ici, sur le plan sémiologique, ce n'est pas justifier d'utiliser un _barplot_, une simple série suffirait à fournir une information similaire. 

La première question du prochain exerice implique une première rencontre avec
une donnée temporelle à travers une opération assez classique en séries
temporelles : changer le format d'une date pour pouvoir faire une agrégation
à un pas de temps plus large. 


{{< include "/content/visualisation/01_matplotlib/_exo5.qmd" >}}
{{< include "/content/visualisation/01_matplotlib/_exo5_solution.qmd" >}}




# Première série temporelle

Il est plus commun de représenter sous forme de série
les données ayant une dimension temporelle.

::: {.cell .markdown}
```{=html}
<div class="alert alert-success" role="alert">
<h3 class="alert-heading"><i class="fa-solid fa-pencil"></i> Exercice 5: barplot des comptages mensuels</h3>
```

1. Créer une variable `day` qui transforme l'horodatage en format journalier
du type `2021-05-01` avec `dt.day`.
2. Reproduire la figure de la page d'_open data_


```{=html}
</div>
```
:::

```{python}
df['day'] = df['date'].dt.date
moyenne_quotidienne = df.groupby('day', as_index=False).agg({'sum_counts':'mean'})
moyenne_quotidienne['day'] = pd.to_datetime(moyenne_quotidienne['day'])
```

```{python}
# Version plotnine
figure4 = (ggplot(moyenne_quotidienne, aes(x = "day", y = 'sum_counts')) +
  geom_line(color = "magenta") +
  geom_area(fill="magenta", alpha = 0.6) +
  labs(x = "Date et heure de comptage (Jour)", y = "Moyenne journalière du comptage par heure\nsur la période sélectionnée",
       title = "Moyenne journalière des comptages vélos") +
  theme_minimal() +
  theme(axis_text_x = element_text(angle = 45, hjust = 1),
        plot_title = element_text(hjust = 0.5))
)


# Version matplotlib
plt.clf()
ax = sns.lineplot(x='day', y='sum_counts', data=moyenne_quotidienne, color = "magenta")
l1 = ax.lines[0]
x1 = l1.get_xydata()[:, 0]
y1 = l1.get_xydata()[:, 1]
ax.fill_between(x1, y1, color="magenta", alpha=0.3)
```


# Des graphiques dynamiques avec `Plotly`

## Contexte

L'inconvénient des figures avec `ggplot` est que celles-ci ne permettent
pas d'interaction avec le lecteur. Toute l'information doit donc être
contenue dans la figure ce qui peut la rendre difficile à lire. 
Si la figure est bien faite, avec différents niveaux d'information, cela
peut bien fonctionner.

Il est néanmoins plus simple, grâce aux technologies _web_, de proposer des
visualisations à plusieurs niveaux. Un premier niveau d'information, celui du
coup d'oeil, peut suffire à assimiler les principaux messages de la
visualisation. Ensuite, un comportement plus volontaire de recherche
d'information secondaire peut permettre d'en savoir plus. Les visualisations
réactives, qui sont maintenant la norme dans le monde de la _dataviz_, 
permettent ce type d'approche : le lecteur d'une visualisation peut passer
sa souris à la recherche d'information complémentaire (par exemple les
valeurs exactes) ou cliquer pour faire apparaître des informations complémentaires
sur la visualisation ou autour.

Ces visualisations reposent sur le même triptyque que l'ensemble de l'écosystème
_web_ : `HTML`, `CSS` et `JavaScript`. Les utilisateurs de `Python`
ne vont jamais manipuler directement ces langages, qui demandent une 
certaine expertise, mais vont utiliser des librairies au niveau de `R` qui génèreront automatiquement tout le code `HTML`, `CSS` et `JavaScript`
permettant de créer la figure. 

## La librairie `Plotly`

Le package `Plotly` est une surcouche à la librairie `Javascript` 
`Plotly.js` qui permet de créer et manipuler des objets graphiques de manière
très flexible afin de produire des objets réactifs sans avoir à recourir
à Javascript.

Le point d'entrée recommandé est le module `plotly.express`
([documentation ici](https://plotly.com/python/plotly-express/)) qui offre une arborescence
riche mais néanmoins intuitive pour construire des graphiques
(objets `plotly.graph_objects.Figure`) pouvant être modifiés *a posteriori*
si besoin (par exemple pour *customiser* les axes). 

::: {.cell .markdown}
```{=html}
<div class="alert alert-info" role="alert">
<h3 class="alert-heading"><i class="fa-solid fa-comment"></i> Visualiser les figures produites par <code>Plotly</code></h3>
```


Dans un notebook Jupyter classique, les lignes suivantes de code permettent
d'afficher le résultat d'une commande `Plotly` sous un bloc de code : 

```python
from plotly.offline import init_notebook_mode
init_notebook_mode(connected = True)
```

Pour `JupyterLab`, l'extension `jupyterlab-plotly` s'avère nécessaire:

```python
!jupyter labextension install jupyterlab-plotly
```

```{=html}
</div>
```
:::

## Réplication de l'exemple précédent avec `Plotly`

Les représentations figées comme celles ci-dessus
sont approriées pour des rapports ou articles. 
Néanmoins

Les modules suivants seront nécessaires pour construire des graphiques
avec `plotly`:

```{python}
import plotly
import plotly.express as px
from IPython.display import HTML #pour afficher les graphs
# dans une cellule de notebook
```


::: {.cell .markdown}
```{=html}
<div class="alert alert-success" role="alert">
<h3 class="alert-heading"><i class="fa-solid fa-pencil"></i> Exercice 7: un barplot avec <code>Plotly</code></h3>
```

L'objectif est de reconstuire le premier diagramme en barre rouge avec `Plotly`. 

1. Réalisez le graphique en utilisant la fonction adéquate avec `plotly.express` et...
    * Ne pas prendre le
    thème par défaut mais un à fond blanc, pour avoir un résultat ressemblant
    à celui proposé sur le site de l'*open-data*.
    * Pour la couleur rouge,
    vous pouvez utiliser l'argument `color_discrete_sequence`. 
    * Ne pas oublier de nommer les axes
    * Pensez à la couleur du texte de l'axe inférieur

2. Tester un autre thème, à fond sombre. Pour les couleurs, faire un 
groupe stockant les trois plus fortes valeurs puis les autres.


```{=html}
</div>
```
:::

```{python}
#| output: false
# 1. Graphique avec fond blanc
fig = px.bar(df1.sort_values('sum_counts', ascending=True), orientation='h', x='sum_counts',
             y='nom_compteur', color_discrete_sequence=["red"], template="plotly_white")

fig.update_layout(
    title='Les 10 compteurs avec la moyenne horaire la plus élevée',
    xaxis_title='Moyenne du comptage par heure sur la période sélectionnée')
fig.update_xaxes(title_font=dict(color='red'))
```

```{python}
#| output: false

#2. Graphique avec thème sombre
df1['top'] = df1['sum_counts'] > df1.sort_values('sum_counts', ascending=False)['sum_counts'][3]
fig2 = px.bar(df1.sort_values('sum_counts', ascending=True), orientation='h', x='sum_counts',
              y='nom_compteur',  color='top', # attention, l'argument color ne semble pas toujours fonctionner
              template="plotly_dark",
              color_discrete_sequence=['red','green'])
fig2.update_layout(
    title='Les 10 compteurs avec la moyenne horaire la plus élevée',
    xaxis_title='Moyenne du comptage par heure sur la période sélectionnée')

#HTML(fig2.to_html())

# Pour inclusion dans le site web
fig2.show()
```

::: {.content-visible when-format="html"}

La première question permet de construire le graphique suivant :

```{python}
fig.show()
```

Alors qu’avec le thème sombre (question 2), on obtient :

```{python}
fig2.show()
```

:::


Cette représentation montre bien le caractère spécial de l'année 2020. Pour 
rappeller au lecteur distrait la nature particulière de la période, marquée
par un premier confinement qu'on voit bien dans les données, on pourrait,
avec l'aide de la [documentation](https://plotly.com/python/horizontal-vertical-shapes/),
ajouter deux barres verticales pour marquer les dates de début et
de fin de cette période.

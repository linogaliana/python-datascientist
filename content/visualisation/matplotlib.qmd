---
title: "De beaux graphiques avec python : mise en pratique"
weight: 10
slug: matplotlibTP
categories:
  - Visualisation
  - Exercice
description: |
  Une partie essentielle du travail du 
  _data scientist_ est d'être en mesure
  de synthétiser une information dans des
  représentations graphiques percutantes. Ce
  chapitre permet de découvrir
  les fonctionalités graphiques de `matplotlib`,
  `seaborn` et `plotly` pour représenter des statistiques
  sur les décomptes de vélo à Paris.
image: https://minio.lab.sspcloud.fr/lgaliana/generative-art/pythonds/drawing.png
echo: false
---

::: {.content-visible when-format="html"}
{{< include "../../build/_printBadges.qmd" >}}
:::

La pratique de la visualisation se fera, dans ce cours, en répliquant des graphiques qu'on peut trouver sur
la page de l'*open data* de la ville de Paris 
[ici](https://opendata.paris.fr/explore/dataset/comptage-velo-donnees-compteurs/dataviz/?disjunctive.id_compteur&disjunctive.nom_compteur&disjunctive.id&disjunctive.name).


Ce TP vise à initier :

* Aux packages [`matplotlib`](https://matplotlib.org/) et
[`seaborn`](https://seaborn.pydata.org/) pour la construction de graphiques figés. Il
est également possible de s'appuyer sur [`plotnine`](https://plotnine.readthedocs.io/en/stable/index.html),
qui est une implémentation en `Python` du _package_ `R` [`ggplot2`](https://ggplot2.tidyverse.org/)
pour ce type de représentation.
* Au package [`plotly`](https://plotly.com/python/) pour les graphiques 
dynamiques, au format _web_

Nous verrons par la suite la manière de construire des cartes facilement avec
des formats équivalents.

Si vous êtes intéressés par `R` {{< fa brands python >}},
une version très proche de ce TP est
disponible dans [ce cours d'introduction à `R` pour l'ENS](https://rgeo.linogaliana.fr/exercises/ggplot.html).

```{python}
import matplotlib.pyplot as plt
import seaborn as sns
```

::: {.cell .markdown}
```{=html}
<div class="alert alert-info" role="alert">
<h3 class="alert-heading"><i class="fa-solid fa-comment"></i> Note</h3>
```

Être capable de construire des visualisations de données
intéressantes est une compétence nécessaire à tout
_data scientist_ ou chercheur. Pour améliorer
la qualité de ces visualisations, il est recommandé
de suivre certains conseils donnés par des spécialistes
de la _dataviz_ sur la sémiologie graphique.

Les bonnes visualisations de données, comme celles du _New York Times_,
reposent certes sur des outils adaptés (des librairies `JavaScript`)
mais aussi sur certaines règles de représentation qui permettent
de comprendre en quelques secondes le message d'une visualisation.

Ce [post de blog](https://blog.datawrapper.de/text-in-data-visualizations/)
est une ressource qu'il est utile de consulter régulièrement. 
Ce [post de blog d'Albert Rapp](https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look) montre bien comment construire graduellement une bonne visualisation
de données.  

```{=html}
</div>
```
:::

# Données

Ce chapitre s'appuie sur les données de comptage des passages de vélo dans les points de mesure parisiens diffusés sur le site de l'_open data_ de la ville de Paris. 

L'exploitation de l'ensemble de l'historique a été grandement facilité par la diffusion des données au format `Parquet` (évoqué dans les approfondissements du [deuxième chapitre consacré à `Pandas`](/content/manipulation/02_pandas_suite.qmd)), un format moderne plus pratique que le CSV. Pour en savoir plus sur ce format, vous pouvez consulter les ressources évoquées dans le paragraphe consacré à ce format dans le chapitre `Pandas`. 


# Premières productions graphiques avec l'API `Matplotlib` de `Pandas`

Chercher à produire une visualisation parfaite du premier coup est
illusoire. Il est beaucoup plus réaliste d'améliorer graduellement 
une représentation graphique afin, petit à petit, de mettre en 
avant les effets de structure dans un jeu de données. 

Nous allons donc commencer par nous représenter la distribution
des passages aux principales stations de mesure.
Pour cela nous allons produire
rapidement un _barplot_ puis l'améliorer graduellement. 

Dans cette partie, nous allons ainsi
reproduire les deux premiers graphiques de la
[page d'analyse des données](https://opendata.paris.fr/explore/dataset/comptage-velo-donnees-compteurs/dataviz/?disjunctive.id_compteur&disjunctive.nom_compteur&disjunctive.id&disjunctive.name) :
*Les 10 compteurs avec la moyenne horaire la plus élevée* et *Les 10 compteurs ayant comptabilisé le plus de vélos*. Les valeurs chiffrées des graphiques seront différentes de celles de la page en ligne, c'est normal, nous travaillons sur des données plus anciennes. 

::: {.cell .markdown}
```{=html}
<div class="alert alert-success" role="alert">
<h3 class="alert-heading"><i class="fa-solid fa-pencil"></i> Exercice 1 : Importer les données et produire un premier graphique</h3>
```

Les données comportent plusieurs dimensions pouvant faire l'objet d'une 
analyse statistique. Il est donc nécessaire dans un premier temps
de synthétiser celles-ci par des agrégations afin d'avoir un
graphique lisible. 

1. Importer les données de compteurs de vélos. Les données étant diffusées sous forme de `Parquet` (évoqué dans les approfondissements du [deuxième chapitre consacré à `Pandas`](/content/manipulation/02_pandas_suite.qmd)), nous donnons directement le code permettant de lire celles-ci avec `Python` sous cet exercice.

2. Garder les dix bornes à la moyenne la plus élevée.
Comme pour obtenir un graphique ordonné du plus grand au plus petit,
il faut avoir les données ordonnées du plus petit au
plus grand (oui c'est bizarre mais c'est comme ça...), réordonner
les données ;


3. En premier lieu, sans se préoccuper des éléments de style ni de la beauté
du graphique, créer la structure du _barplot_ (diagramme en batons) de la
[page d'analyse des données](https://opendata.paris.fr/explore/dataset/comptage-velo-donnees-compteurs/dataviz/?disjunctive.id_compteur&disjunctive.nom_compteur&disjunctive.id&disjunctive.name).


4. Pour préparer le travail sur la deuxième figure, ne conserver
que les 10 compteurs ayant comptabilisés le plus de vélos


5. Comme pour la question 3, créer un _barplot_
pour reproduire la figure 2 de l'_open data_ parisien


```{=html}
</div>
```
:::

{{< include "_prepare_data_bike.qmd" >}}

::: {.cell .markdown}
```{=html}
<details>
<summary>
Premières lignes nécessaires pour cet exercice :
</summary>
```

```{python}
#| echo: false
df.head(3)
```

```{=html}
</details>
```
:::


```{python}
df1 = (
    df
    .groupby('nom_compteur')
    .agg({'sum_counts': "mean"})
    .sort_values('sum_counts', ascending = False)
    .head(10)
    .sort_values('sum_counts')    
)
```

::: {.cell .markdown}
```{=html}
<details>
<summary>
Les 10 principales stations à l'issue de la question 2
</summary>
```

```{python}
#| echo: false
df1.head()
```

```{=html}
</details>
```
:::


```{python}
#| output: false

#2. Reproduction des graphiques

# Graphique 1 : Les 10 compteurs avec la moyenne horaire la plus élevée
p1 = df1.plot(kind = "barh", color = 'red')
```

::: {.cell .markdown}
```{=html}
<details>
<summary>
Figure 1 sans travail sur le style:
</summary>
```

```{python}
p1.figure
```

```{=html}
</details>
```
:::

```{python}
# Question 4
df2 = (
    df
    .groupby('nom_compteur')
    .agg({'sum_counts': "sum"})
    .sort_values('sum_counts', ascending = False)
    .head(10)
    .sort_values('sum_counts')
)
```

```{python}
#| output: false
# Question 5
p2 = df2.plot(kind = "barh", color = 'green')
```

::: {.cell .markdown}
```{=html}
<details>
<summary>
Figure 2 sans travail sur le style:
</summary>
```

```{python}
p2.figure
```

```{=html}
</details>
```
:::


On commence à avoir quelque chose qui commence à transmettre
un message synthétique sur la nature des données.
On peut néanmoins remarquer plusieurs éléments problématiques
(par exemple les labels) mais
aussi des éléments ne correspondant pas (les titres des axes, etc.) ou 
manquants (le nom du graphique...).

Comme les graphiques produits par `Pandas` suivent la logique très flexible
de `matplotlib`, il est possible de les customiser. Cependant, c'est
souvent beaucoup de travail et la grammaire `matplotlib` n'est
pas aussi normalisée que celle de `ggplot` en `R`.
Il peut être préférable de directement
utiliser `seaborn`, qui offre quelques arguments prêts à l'emploi.


# Utiliser directement `seaborn`

Vous pouvez repartir des deux dataframes précédents. On va supposer qu'ils se
nomment `df1` et `df2`. 

La figure comporte maintenant un message mais il est encore peu
lisible. Il y a plusieurs manières de faire un *barplot* en `seaborn`. Les deux principales
sont :

- `sns.catplot` ;
- `sns.barplot`.

On propose d'utiliser `sns.catplot` pour cet exercice. 


::: {.cell .markdown}
```{=html}
<div class="alert alert-success" role="alert">
<h3 class="alert-heading"><i class="fa-solid fa-pencil"></i> Exercice 2 : Un peu de style !</h3>
```

1. Réinitialiser l'index des _dataframes_ `df1` et `df2`
pour avoir une colonne *'Nom du compteur'*. Réordonner les données
de manière décroissante pour obtenir un graphique ordonné dans 
le bon sens avec `seaborn`.

2. Refaire le graphique précédent avec la fonction `catplot` de `seaborn`. Pour
contrôler la taille du graphique vous pouvez utiliser les arguments `height` et
`aspect`.

3. Ajouter les titres des axes et le titre du graphique pour le premier graphique

4. Essayez de colorer en rouge l'axe des `x`. Vous pouvez pré-définir un
style avec `sns.set_style("ticks", {"xtick.color": "red"})`

```{=html}
</div>
```
:::


```{python}
#| output: false

# 1. Réinitialiser les index.
df1 = df1.reset_index().sort_values("sum_counts", ascending = False)
df2 = df2.reset_index().sort_values("sum_counts", ascending = False)
```

```{python}
#| output: false
import seaborn as sns
import matplotlib.pyplot as plt

# 2. Graphique avec sns.catplot
g = sns.catplot(
    x='sum_counts', y='nom_compteur',
    data=df1, kind = "bar",
    height = 5, aspect = 4,
    color = "red")
```

A l'issue de la question 2, c'est-à-dire en utilisant
`seaborn` pour reproduire de manière minimale
un _barplot_, on obtient :

```{python}
#| echo: false
g.figure.get_figure()
```

Après quelques réglages esthétiques, à l'issue des questions 3 et 4,
on obtient une figure proche de celle de l'_open data_ parisien. 

```{python}
#| output: false

# 3. Ajout d'éléments de légende
g = sns.catplot(x='sum_counts', y='nom_compteur', data=df1, kind = "bar", height = 5, aspect = 4, color = "red")
g.set_axis_labels('Moyenne du comptage par heure sur la période sélectionnée', 'Nom du compteur')
plt.title('Les 10 compteurs avec la moyenne horaire la plus élevée')
g
```

```{python}
#| output: false

# 4. Coloration en rouge de l'axe des x.
sns.set_style("ticks", {"xtick.color": "red"})
g = sns.catplot(x='sum_counts', y='nom_compteur', data=df1, kind = "bar", height = 10, aspect = 2, color = "red")
g.set_axis_labels('Moyenne du comptage par heure sur la période sélectionnée', 'Nom du compteur')
plt.title('Les 10 compteurs avec la moyenne horaire la plus élevée')
plt.savefig('top10_sns.png', bbox_inches='tight')
```

```{python}
#| echo: false
g.figure.get_figure()
```


On comprend
ainsi que le boulevard de Sébastopol est le plus emprunté,
ce qui ne vous suprendra pas si vous faites du vélo à Paris. 
Néanmoins, si vous n'êtes pas familiers avec la géographie parisienne,
cela sera peu informatif pour vous, vous allez avoir besoin d'une
représentation graphique supplémentaire: une carte ! Nous verrons
ceci lors d'un prochain chapitre. 



::: {.cell .markdown}
```{=html}
<div class="alert alert-success" role="alert">
<h3 class="alert-heading"><i class="fa-solid fa-pencil"></i> Exercice 3 : reproduire la figure 2</h3>
```

En suivant l'approche graduelle de l'exercice 2,
refaire le graphique *Les 10 compteurs ayant comptabilisé le plus de vélos*.

```{=html}
</div>
```
:::

Les diagrammes en batons (_barplot_) sont extrêmement communs mais 
qu'ils transmettent. Sur le plan sémiologique,
les _lollipop charts_ sont préférables : ils
transmettent la même information mais avec moins de bruit
(la largeur des barres du barplot noie un peu l'information).

::: {.cell .markdown}
```{=html}
<div class="alert alert-success" role="alert">
<h3 class="alert-heading"><i class="fa-solid fa-pencil"></i> Exercice 3 (bis) : reproduire la figure 2 avec un <i>lollipop chart</i></h3>
```

En suivant l'approche graduelle de l'exercice 2,
refaire le graphique *Les 10 compteurs ayant comptabilisé le plus de vélos*.

```{=html}
</div>
```
:::

```{python}
my_range=range(1,len(df2.index)+1)

sns.set_style("ticks", {"xtick.color": "forestgreen"})

plt.hlines(y=my_range, xmin=0, xmax=df2['sum_counts'], color='black', alpha = 0.4)
plt.plot(df2['sum_counts'], my_range, "o", color = "forestgreen")

plt.yticks(my_range, df2['nom_compteur'])
plt.title("Les 10 compteurs ayant comptabilisés le plus de vélos", loc='left')
plt.xlabel('sum_counts')
plt.ylabel('La somme des vélos comptabilisés sur la période sélectionnée')
```



# Premières agrégations temporelles

On va maintenant se concentrer sur la dimension temporelle de notre
jeu de données à travers deux approches :

- Un diagramme en barre synthétisant l'information de notre jeu de données
de manière mensuelle ;
- Des séries instructives sur la dynamique temporelle. Cela sera l'objet de la prochaine partie.


Avant cela, nous allons enrichir ces données pour bénéficier d'un historique plus long, permettant notamment d'avoir la période Covid dans nos données, ce qui présente un intérêt du fait de la dynamique particulière du trafic dans cette période (arrêt brutal, reprise très forte...). 

{{< include "/content/visualisation/_historical_data_bike.qmd" >}}


Pour commencer, reproduisons la troisième figure qui est, encore une fois, 
un _barplot_. La première question implique une première rencontre avec
une donnée temporelle à travers une opération assez classique en séries
temporelles : changer le format d'une date pour pouvoir faire une agrégation
à un pas de temps plus large. 


::: {.cell .markdown}
```{=html}
<div class="alert alert-success" role="alert">
<h3 class="alert-heading"><i class="fa-solid fa-pencil"></i> Exercice 4: barplot des comptages mensuels</h3>
```

1. Créer une variable `month`
dont le format respecte, par exemple, le schéma `2019-08` grâce à la bonne option de la méthode `dt.to_period`
1. Appliquer les conseils précédents pour construire et améliorer
graduellement un graphique afin d'obtenir une figure similaire
à la 3e production sur la page de l'_open data_ parisien. Faire cette figure d'abord depuis début 2022 puis sur toute la période de notre historique 
1. Question optionnelle: représenter la même information sous forme de _lollipop_

```{=html}
</div>
```
:::

```{python}
# Questions 1
df['month'] = df['date'].dt.to_period('M')
```

```{python}
# Question 2
df3 = (
    df.loc[df['date'].dt.year>=2022]
    .groupby('month')
    .agg({'sum_counts':'mean'})
    .reset_index()
)
df3 = df3.rename(columns = {"sum_counts": "value"})
df3.head(2)
```

```{python}
from plotnine import *

# Question 3: plotnine generic function
def figure3(df):
    figure3 = (
        ggplot(df3) +
        geom_bar(aes(x = "month", y = "value"), fill = "#ffcd00", stat = "identity") +
        labs(x = "Date et heure de comptage", y = "Moyenne mensuelle du comptage par heure\nsur la période sélectionnée",
        title = "Moyenne mensuelle des comptages vélos") +
        theme_minimal() +
        theme(
            axis_text_x = element_text(angle = 45, hjust = 1),
            axis_title_y = element_text(color = "#ffcd00", face = "bold"),
            plot_title = element_text(hjust = 0.5)
            )
        )
    return figure3
```

La figure avec les données depuis début 2022 aura cet aspect si elle a été construite avec `plotnine`:

```{python}
figure3(df3)
```

Avec `seaborn`, elle ressemblera plutôt à ceci:

```{python}
# Question 3: version seaborn
sns.set_style("whitegrid")
df3 = df.groupby('month').agg({'sum_counts':'mean'}).reset_index()
g = sns.catplot(x='month', y='sum_counts', data=df3, kind = "bar", height = 5, aspect = 4, color = "yellow")
g.set_axis_labels('Date et heure de comptage', 'Moyenne mensuelle du comptage par heure sur la période sélectionnée')
plt.title('Moyenne mensuelle des comptages vélos')
```


Si vous préférez représenter cela sous forme de _lollipop_[^notecouleur]:

```{python}
(
    ggplot(df3, aes(x = "month", y = "value")) +
    geom_segment(aes(xend = "month", yend = 0)) +
    geom_point( color="#ffcd00", size=4) +
    labs(
        x = "Date et heure de comptage", y = "Moyenne mensuelle du comptage par heure\nsur la période sélectionnée",
        title = "Moyenne mensuelle des comptages vélos"
    ) +
    theme_minimal() +
    theme(
        axis_text_x = element_text(angle = 45, hjust = 1),
        plot_title = element_text(hjust = 0.5)
    )
)
```

Enfin, sur l'ensemble de la période, la série prendra plutôt cette forme:

```{python}
df3 = (
    df
    .groupby('month')
    .agg({'sum_counts':'mean'})
    .reset_index()
)
df3 = df3.rename(columns = {"sum_counts": "value"})
figure3(df3)
```

[^notecouleur]: J'ai retiré la couleur sur l'axe des ordonnées qui, je trouve,
apporte peu à la figure voire dégrade la compréhension du message. 

# Première série temporelle

Il est plus commun de représenter sous forme de série
les données ayant une dimension temporelle.

::: {.cell .markdown}
```{=html}
<div class="alert alert-success" role="alert">
<h3 class="alert-heading"><i class="fa-solid fa-pencil"></i> Exercice 5: barplot des comptages mensuels</h3>
```

1. Créer une variable `day` qui transforme l'horodatage en format journalier
du type `2021-05-01` avec `dt.day`.
2. Reproduire la figure de la page d'_open data_


```{=html}
</div>
```
:::

```{python}
df['day'] = df['date'].dt.date
moyenne_quotidienne = df.groupby('day', as_index=False).agg({'sum_counts':'mean'})
moyenne_quotidienne['day'] = pd.to_datetime(moyenne_quotidienne['day'])
```

```{python}
# Version plotnine
figure4 = (ggplot(moyenne_quotidienne, aes(x = "day", y = 'sum_counts')) +
  geom_line(color = "magenta") +
  geom_area(fill="magenta", alpha = 0.6) +
  labs(x = "Date et heure de comptage (Jour)", y = "Moyenne journalière du comptage par heure\nsur la période sélectionnée",
       title = "Moyenne journalière des comptages vélos") +
  theme_minimal() +
  theme(axis_text_x = element_text(angle = 45, hjust = 1),
        plot_title = element_text(hjust = 0.5))
)


# Version matplotlib
plt.clf()
ax = sns.lineplot(x='day', y='sum_counts', data=moyenne_quotidienne, color = "magenta")
l1 = ax.lines[0]
x1 = l1.get_xydata()[:, 0]
y1 = l1.get_xydata()[:, 1]
ax.fill_between(x1, y1, color="magenta", alpha=0.3)
```


# Des graphiques dynamiques avec `Plotly`

## Contexte

L'inconvénient des figures avec `ggplot` est que celles-ci ne permettent
pas d'interaction avec le lecteur. Toute l'information doit donc être
contenue dans la figure ce qui peut la rendre difficile à lire. 
Si la figure est bien faite, avec différents niveaux d'information, cela
peut bien fonctionner.

Il est néanmoins plus simple, grâce aux technologies _web_, de proposer des
visualisations à plusieurs niveaux. Un premier niveau d'information, celui du
coup d'oeil, peut suffire à assimiler les principaux messages de la
visualisation. Ensuite, un comportement plus volontaire de recherche
d'information secondaire peut permettre d'en savoir plus. Les visualisations
réactives, qui sont maintenant la norme dans le monde de la _dataviz_, 
permettent ce type d'approche : le lecteur d'une visualisation peut passer
sa souris à la recherche d'information complémentaire (par exemple les
valeurs exactes) ou cliquer pour faire apparaître des informations complémentaires
sur la visualisation ou autour.

Ces visualisations reposent sur le même triptyque que l'ensemble de l'écosystème
_web_ : `HTML`, `CSS` et `JavaScript`. Les utilisateurs de `Python`
ne vont jamais manipuler directement ces langages, qui demandent une 
certaine expertise, mais vont utiliser des librairies au niveau de `R` qui génèreront automatiquement tout le code `HTML`, `CSS` et `JavaScript`
permettant de créer la figure. 

## La librairie `Plotly`

Le package `Plotly` est une surcouche à la librairie `Javascript` 
`Plotly.js` qui permet de créer et manipuler des objets graphiques de manière
très flexible afin de produire des objets réactifs sans avoir à recourir
à Javascript.

Le point d'entrée recommandé est le module `plotly.express`
([documentation ici](https://plotly.com/python/plotly-express/)) qui offre une arborescence
riche mais néanmoins intuitive pour construire des graphiques
(objets `plotly.graph_objects.Figure`) pouvant être modifiés *a posteriori*
si besoin (par exemple pour *customiser* les axes). 

::: {.cell .markdown}
```{=html}
<div class="alert alert-info" role="alert">
<h3 class="alert-heading"><i class="fa-solid fa-comment"></i> Visualiser les figures produites par <code>Plotly</code></h3>
```


Dans un notebook Jupyter classique, les lignes suivantes de code permettent
d'afficher le résultat d'une commande `Plotly` sous un bloc de code : 

```python
from plotly.offline import init_notebook_mode
init_notebook_mode(connected = True)
```

Pour `JupyterLab`, l'extension `jupyterlab-plotly` s'avère nécessaire:

```python
!jupyter labextension install jupyterlab-plotly
```

```{=html}
</div>
```
:::

## Réplication de l'exemple précédent avec `Plotly`

Les représentations figées comme celles ci-dessus
sont approriées pour des rapports ou articles. 
Néanmoins

Les modules suivants seront nécessaires pour construire des graphiques
avec `plotly`:

```{python}
import plotly
import plotly.express as px
from IPython.display import HTML #pour afficher les graphs
# dans une cellule de notebook
```


::: {.cell .markdown}
```{=html}
<div class="alert alert-success" role="alert">
<h3 class="alert-heading"><i class="fa-solid fa-pencil"></i> Exercice 7: un barplot avec <code>Plotly</code></h3>
```

L'objectif est de reconstuire le premier diagramme en barre rouge avec `Plotly`. 

1. Réalisez le graphique en utilisant la fonction adéquate avec `plotly.express` et...
    * Ne pas prendre le
    thème par défaut mais un à fond blanc, pour avoir un résultat ressemblant
    à celui proposé sur le site de l'*open-data*.
    * Pour la couleur rouge,
    vous pouvez utiliser l'argument `color_discrete_sequence`. 
    * Ne pas oublier de nommer les axes
    * Pensez à la couleur du texte de l'axe inférieur

2. Tester un autre thème, à fond sombre. Pour les couleurs, faire un 
groupe stockant les trois plus fortes valeurs puis les autres.


```{=html}
</div>
```
:::

```{python}
#| output: false
# 1. Graphique avec fond blanc
fig = px.bar(df1.sort_values('sum_counts', ascending=True), orientation='h', x='sum_counts',
             y='nom_compteur', color_discrete_sequence=["red"], template="plotly_white")

fig.update_layout(
    title='Les 10 compteurs avec la moyenne horaire la plus élevée',
    xaxis_title='Moyenne du comptage par heure sur la période sélectionnée')
fig.update_xaxes(title_font=dict(color='red'))
```

```{python}
#| output: false

#2. Graphique avec thème sombre
df1['top'] = df1['sum_counts'] > df1.sort_values('sum_counts', ascending=False)['sum_counts'][3]
fig2 = px.bar(df1.sort_values('sum_counts', ascending=True), orientation='h', x='sum_counts',
              y='nom_compteur',  color='top', # attention, l'argument color ne semble pas toujours fonctionner
              template="plotly_dark",
              color_discrete_sequence=['red','green'])
fig2.update_layout(
    title='Les 10 compteurs avec la moyenne horaire la plus élevée',
    xaxis_title='Moyenne du comptage par heure sur la période sélectionnée')

#HTML(fig2.to_html())

# Pour inclusion dans le site web
fig2.show()
```

::: {.content-visible when-format="html"}

La première question permet de construire le graphique suivant :

```{python}
fig.show()
```

Alors qu’avec le thème sombre (question 2), on obtient :

```{python}
fig2.show()
```

:::


Cette représentation montre bien le caractère spécial de l'année 2020. Pour 
rappeller au lecteur distrait la nature particulière de la période, marquée
par un premier confinement qu'on voit bien dans les données, on pourrait,
avec l'aide de la [documentation](https://plotly.com/python/horizontal-vertical-shapes/),
ajouter deux barres verticales pour marquer les dates de début et
de fin de cette période.


# Bonus

En bonus, l'état d'esprit des habitués de `ggplot2`
quand ils découvrent `plotnine`:

![](https://minio.lab.sspcloud.fr/lgaliana/generative-art/pythonds/elmo.jpg)

```{python}
#| echo: true
#| code-fold: true
#| code-summary: "Code pour importer les données à partir du format Parquet"
#| label: download-bike-data
#| output: false
import os
import requests
from tqdm import tqdm
import pandas as pd
import duckdb

url = "https://minio.lab.sspcloud.fr/lgaliana/data/python-ENSAE/comptage-velo-donnees-compteurs.parquet"
# problem with https://opendata.paris.fr/api/explore/v2.1/catalog/datasets/comptage-velo-donnees-compteurs/exports/parquet?lang=fr&timezone=Europe%2FParis

filename = 'comptage_velo_donnees_compteurs.parquet'


# DOWNLOAD FILE --------------------------------

# Perform the HTTP request and stream the download
response = requests.get(url, stream=True)

if not os.path.exists(filename):
    # Perform the HTTP request and stream the download
    response = requests.get(url, stream=True)

    # Check if the request was successful
    if response.status_code == 200:
        # Get the total size of the file from the headers
        total_size = int(response.headers.get('content-length', 0))

        # Open the file in write-binary mode and use tqdm to show progress
        with open(filename, 'wb') as file, tqdm(
                desc=filename,
                total=total_size,
                unit='B',
                unit_scale=True,
                unit_divisor=1024,
        ) as bar:
            # Write the file in chunks
            for chunk in response.iter_content(chunk_size=1024):
                if chunk:  # filter out keep-alive chunks
                    file.write(chunk)
                    bar.update(len(chunk))
    else:
        print(f"Failed to download the file. Status code: {response.status_code}")
else:
    print(f"The file '{filename}' already exists.")

# READ FILE AND CONVERT TO PANDAS --------------------------

query = """
SELECT id_compteur, nom_compteur, id, sum_counts, date
FROM read_parquet('comptage_velo_donnees_compteurs.parquet')
"""

# READ WITH DUCKDB AND CONVERT TO PANDAS
df = duckdb.sql(query).df()
```

```{python}
df.head(3)
```

:::: {.content-visible when-profile="fr"}

Pour importer les librairies graphiques que nous utiliserons dans ce chapitre, il faut faire

```{python}
#| echo: true
#| label: import-libs-fig
import matplotlib.pyplot as plt
import seaborn as sns
from plotnine import * #<1>
```

::: {.callout-warning}
Importer des librairies sous la forme `from package import *` n'est pas une très bonne pratique. 

Néanmoins, pour un _package_ comme `plotnine`, dont nous allons utiliser de nombreuses fonctions, ce serait un peu fastidieux d'importer les fonctions au cas par cas. De plus, cela permet de réutiliser presque tels quels les exemples de code de la librairie `R` `ggplot`, nombreux sur internet avec démonstrations visuelles. `from package import *` est l'équivalent `Python` de la pratique `library(package)` en `R`.
:::

::::


:::: {.content-visible when-profile="en"}

To import the graphical libraries we will use in this chapter, execute

```{python}
#| echo: true
#| label: import-libs-fig-en
import matplotlib.pyplot as plt
import seaborn as sns
from plotnine import *
```

::: {.callout-warning}
Importing libraries in the form `from package import *` is not a very good practice. 

However, for a _package_ like `plotnine`, many of whose functions we'll be using, it would be a bit tedious to import functions on a case-by-case basis. What's more, it allows us to reuse the `ggplot` `R` library code examples, which are plentiful on the Internet with visual demonstrations, almost as they are. `from package import *` is the `Python` equivalent of the `library(package)` practice in `R`.
:::

::::
---
title: "Évaluation"
title-en: "Evaluation"
description: |
  Attentes pour les projets de fin d'année et exemples issus des projets passés
description-en: |
  Guidelines for evaluating projects in this course  
image: https://minio.lab.sspcloud.fr/lgaliana/generative-art/pythonds/kid.png
listing:
  id: sample-listings
  contents: 
    - past-projects.yaml
  sort: "date desc"
  type: table
  date-format: "YYYY"
---

:::: {.content-visible when-profile="en"}
This page has not been translated because it only concerns students taking the course in its French version.

If you are interested in the validation guidelines for this course, you can consult the French version of this page.
::::

:::: {.content-visible when-profile="fr"}

# Résumé 

* A la fin du semestre, les étudiants rendront un projet informatique par __groupe de 2-3 personnes.__
* Ce projet dont le __sujet est libre__ devra comporter:
    - Une valorisation d'un ou plusieurs jeux de données _open data_ ou collectés par le biais de _scraping_ ou d'API ; 
    - De la visualisation ;
    - De la modélisation. 
* Les étudiants sont invités à proposer des sujets qui leur plaisent, à faire valider par le chargé de TD. Celui-ci pourra le refuser, soit parce que le sujet a été trop balisé et ainsi produire une valorisation originale ou intéressante est compliqué, soit parce que le sujet est techniquement complexe à réaliser.
* Les **projets issus de compétitions type Kaggle sont interdits**.
* __Le projet doit utiliser `Git` {{< fa brands git-alt >}} et être disponible sous [`Github`](https://github.com/) {{< fa brands github >}}__ (dépôt public) ;
* Le projet doit être __reproductible__ sous peine de sanction forte. Cela implique des morceaux de code reproductibles, une description des dépendances et des explications si nécessaire sur la récupération des données ;
* L'utilisation d'assistant de code est possible. Le _vibe coding_ n'est pas autorisé.

Les principales _deadline_ sont les suivantes:


|      Etape           | Date rendue            |
|----------------------|------------------------|
| Date du rendu        | XX décembre 2025 23h59 |
| Date des soutenances | XX janvier 2025        |



# Attentes du projet

Le projet consiste à répondre à une **problématique de votre choix** à l’aide d’un ou plusieurs jeux de données.

Il vous faudra d’abord définir clairement la question à traiter, en apportant une problématisation et une contextualisation. Nous vous encourageons à choisir un sujet qui vous intéresse personnellement : cela vous aidera à maintenir votre motivation et à impliquer davantage votre lecteur.

Le projet doit articuler **trois dimensions complémentaires** :

1. La récupération de données issue de plusieurs sources et l'exploration de celles-ci
2. La visualisation et la communication des résultats
3. L'analyse ou la modélisation

Il n'est pas nécessaire de développer toutes les dimensions de manière exhaustive. En revanche, il est attendu que l'une d'entre elles au moins soit approfondie.

Enfin, gardez en tête que l'objectif n’est pas de tout montrer. Un **effort de synthèse** est attendu, tant **à l’écrit** qu’à l’**oral**. Il vous faudra **sélectionner** les résultats les plus pertinents, les présenter de manière claire et structurée.


## La récupération et le traitement des données

Les données utilisées dans votre projet peuvent provenir de différentes sources : fichiers plats (_CSV_, _parquet_), **API**, **scraping**, etc. Plus l'effort de collecte est important ou technique (par exemple, croisement de plusieurs sources, automatisation via API, scraping multi-pages…), plus cette partie pourra contribuer à votre évaluation.

À l’inverse, si vous utilisez un jeu de données directement prêt à l'emploi, il vous faudra le compléter ou l’enrichir (recherche de variables supplémentaires, données complémentaires, structuration...) pour que cette étape soit valorisée.

Dans la grande majorité des cas, les données brutes ne seront pas exploitables telles quelles. Vous devrez mettre en place un nettoyage rigoureux : gestion des valeurs manquantes, normalisation des formats, renommage de variables, transformation de types, etc. Cette étape est aussi l'occasion de créer des variables plus lisibles ou informatives.

**N'oubliez pas de documenter vos choix** : votre chargé de TD ne connaît pas nécessairement la structure de vos données ou les biais potentiels.


::: {.callout-important collapse=false}
## Quelques sources de données sont interdites

Je donne ce cours depuis fin 2020, je bénéficie donc de suffisamment de recul pour pouvoir indiquer qu'il n'est pas souhaitable, sauf si l'objectif est un fiasco, de se lancer dans certains sujets ou de s'appuyer sur certaines sources compte tenu de leur nature et du délai contraint que vous avez pour réaliser vos projets. 

Voici les sources qu'il est interdit d'utiliser :

* Les **données issues de compétitions Kaggle sont interdites**. D'abord parce que ce sont des données sur lesquelles les possibilités de recherche sont généralement limitées: globalement à part tester des algorithmes concurrents sur ce jeu afin d'avoir la meilleure performance possible - ce qui n'est pas le but du projet - on n'a pas grand chose de mieux à faire. Savoir que pour tel ou tel jeu de données tel algorithme est plus performant - sans garantie de validité externe des conclusions - est peu intéressant et vous apprendra peu.  
* Les **données issues de l'API Twitter/X sont interdites**. Ces données étaient déjà peu intéressantes quand Twitter était très utilisé. Les évolutions de ces dernières années de ce réseau social  - polarisation des messages et de sa base d'utilisateur, présence accrue de _bots_ - rendent ce corpus  encore plus bruyant. De plus, si pendant des années les vannes étaient ouvertes et de nombreuses ressources en ligne ont proposé d'utiliser ces données, ce n'est plus le cas. Vous n'aurez pas de clé de chercheurs pour l'accès à l'API donc vous aurez du mal à récupérer beaucoup de données. 
:::

::: {.callout-important collapse=true}
## Faire un code reproductible quand on fait du webscraping ou utilise des API est une gageure

Comme cela est expliqué dans le chapitre consacré au [_webscraping_](/content/manipulation/04_webscraping_TP.qmd), récupérer des données par ce biais est un moyen détourné peu fiable dans la durée car les sites évoluent continuellement ou mettent en oeuvre des solutions pour bloquer les robots aspirant leurs données. Vous n'êtes pas assuré que votre code qui fonctionne aujourd'hui pourra à nouveau tourner demain sans encombre. C'est un problème qui peut également être rencontré avec les API quoique ces dernières sont un moyen plus robuste d'accès aux données. Mais on n'est jamais à l'abri d'une mise à jour de celle-ci. 

Une composante essentielle de l'évaluation des projets `Python` est la __reproductibilité__, i.e. la possibilité de retrouver les mêmes résultats à partir des mêmes données d'entrée et du même code. Dans la mesure du possible, il faut donc que votre rendu final parte des données brutes utilisées comme source dans votre projet. Si les fichiers de données source sont accessibles via une URL publique par exemple, il est idéal de les importer directement à partir de cette URL au début de votre projet (voir le [TP Pandas](/content/manipulation/02_pandas_suite.qmd) pour un exemple d'un tel import via `Pandas`).

Face à l'incertitude de ne pas retrouver demain les mêmes données qu'aujourd'hui, il est nécessaire de pouvoir stocker des données (ou des modèles). **Votre dépôt `Git` n'est pas le lieu adapté pour le stockage de fichiers volumineux**. Un projet `Python` bien construit est modulaire: il sépare le stockage du code (`Git`), d'éléments de configuration (par exemple des jetons d'API qui ne doivent pas être dans le code) et du stockage des données. Cette séparation conceptuelle entre code et données permet de meilleurs projets. 

![](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/slides/img/environment_clean.png)

Là où `Git` est fait pour stocker du code, on utilise des solutions adaptées pour le stockage de fichiers. De nombreuses solutions existent pour ce faire. Sur le SSP Cloud, on propose `MinIO`, une implémentation open-source du stockage `S3`. Si vous êtes dans cette situation, vous pouvez consulter ce [guide pour partager vos données sur le sspcloud](https://pythonds.linogaliana.fr/content/modern-ds/s3.html#cas-pratique-stocker-les-donn%C3%A9es-de-son-projet-sur-le-ssp-cloud).

:::

## L’analyse descriptive et la représentation graphique

La présence de statistiques descriptives est indispensable dans le projet. De la description de la base aux premières grandes tendances des données, cette partie permet d’avoir une vision globale des données : le lien avec la problématique, comment elle permet d’y répondre, quels sont les premiers éléments de réponse… Chaque résultat doit être interprété : pas la peine de faire un `describe` et de ne pas le commenter.

En termes de représentation graphique, plusieurs niveaux sont envisageables, selon le degré d'approfondissement de cette partie. La base d’une bonne visualisation est de trouver le type de graphique adéquat pour ce que vous voulez montrer et de le rendre visible : une légende qui a du sens, des axes avec des noms etc.

Encore une fois, il faudra commenter votre graphique: qu’est ce qu’il montre, en quoi cela valide / contredit votre argumentaire ?


::: {#nte-appli .callout-note collapse="true"}
## Les applications réactives

Dans le cadre de ce cours, nous présentons plusieurs librairies graphiques permettant de créer des visualisations de données interactives, notamment `Plotly` ou `Leaflet`. Pour aller plus loin, vous pouvez désirer créer des applications encapsulant plusieurs graphiques construits automatiquement
en fonction de choix de l'utilisateur sur une interface graphique.

Tout d'abord, ce n'est pas un prérequis pour ce cours. Le cours de 3e année ["Mise en production de projets de _data science_"](https://ensae-reproductibilite.github.io/website/)
que Romain Avouac et moi donnons à l'ENSAE vous permettra de mettre en oeuvre ceci, qui fait appel à des concepts plus avancés qu'une introduction à `Python` pour la science des données. 

C'est néanmoins un plus qui est apprécié et si vous désirez aller dans cette voie, il est recommandé de bien choisir son écosystème. Il vaut mieux mettre en oeuvre des _frameworks web_ modernes comme
`Streamlit` que des clients lourds comme `tkinter` qui rendent le code difficilement reproductible
car adhérant à une configuration logicielle. Pour en savoir plus, se reporter
à l'[introduction de la partie visualisation](/content/visualisation/index.qmd).

Si vous faites une application réactive, vous n'êtes pas obligé de rédiger un _notebook_.
Cependant, faites en sorte que votre application propose une page présentant votre démarche
afin de faire comprendre à votre lecteur la problématique et les solutions mises en oeuvre.  
Cette application doit être reproductible sur le `SSPCloud` par le biais, par exemple, 
d'un `streamlit run`. Il est donc vivement recommandé de développer celle-ci sur le SSPCloud
où la reproductibilité est maximale. 
:::

## La modélisation

Vient ensuite la phase de modélisation : un modèle peut être le bienvenu quand des statistiques descriptives ne suffisent pas à apporter une solution complète à votre problématique ou pour compléter / renforcer l’analyse descriptive. Le modèle importe peu (régression linéaire, random forest ou autre) : il doit être approprié (répondre à votre problématique) et justifié.
Vous pouvez aussi confronter plusieurs modèles qui n’ont pas la même vocation : par exemple une CAH pour catégoriser et créer des nouvelles variables / faire des groupes puis une régression. 
Même si le projet n’est pas celui du cours de stats, il faut que la démarche soit scientifique et que les résultats soient interprétés.


# Format du rendu

Sur le format du rendu, vous devrez :

* Écrire un rapport sous forme de _notebook_ (quelques exceptions à cette règle peuvent exister, par exemple si vous développer une appli `Streamlit` comme expliqué dans la @nte-appli) ou de `Quarto Markdown`. Soyez vigilant avec le contrôle de version (@imp-gitnb)
* Avoir un projet `Github` avec le rapport. Les données utilisées doivent être accessibles également, dans le dépôt, sur internet ou sur l'espace de stockage du `SSPCloud` (voir [tutoriel S3](content/modern-ds/s3.qmd#les-données-sur-le-cloud)).
* Les __dépôts `Github` où seul un *upload* du projet a été réalisé seront pénalisés__. A l'inverse, les dépôts dans lequels le contrôle de version et le travail collaboratif ont été activement pratiqués (`commits` fréquents, `pull requests`, ..) seront valorisés.
* Le code contenu dans le rapport devra être un maximum propre (pas de copier coller de cellule, préférez des fonctions)



::: {#imp-gitnb .callout-important collapse="true"}
## `Git` et les _notebooks_

Faites attention au contrôle de version avec les _notebooks_, cela ne fait pas toujours bon ménage.  

Comme expliqué dans le [chapitre sur `Git`](/content/manipulation/05_parquet_s3.qmd#cas-pratique-stocker-les-données-de-son-projet-sur-le-ssp-cloud), lorsque vous travaillez sur le même fichier en même temps vous pouvez vous retrouver avec un conflit de version lorsque vous résolvez les différences dans vos dépôts.
Dans les _notebooks_ cela peut se traduire par de multiples conflits de version car deux _notebooks_ en apparence similaires peuvent contenir beaucoup d'éléments différents dans les fichiers bruts (un `JSON` assez complexe, embarquant notamment des _id_ d'exécution de cellules changeant systématiquement). Un _merge_ mal géré peut rendre un _notebook_ invalide. 

Il est recommandé de ne pas travailler sur un même _notebook_ sur une même branche en même temps. Cela fait donc beaucoup de conditions pour arriver à un conflit de version mais dans le _rush_ inhérent à tout projet cela peut vite arriver. Outre la coordination, nous pouvons vous conseiller de déporter une partie du code dans des fichiers `.py` importés sous forme de module par le _notebook_. De toute manière, c'est une bonne pratique de ne pas accumuler de trop longues instructions de code dans un _notebook_ car cela freine la lisibilité et l'intelligibilité de celui-ci. 
:::

::: {.callout-important}
## Politique concernant l'IA générative

L'utilisation d'IA génératives assistantes de code est devenue commune dans le domaine de la _data science_. Elles peuvent servir à transcire une idée en code, à défricher les packages ou fonctions les plus appropriées pour une tâche donnée ou encore à documenter du code. 

Utilisées **avec discernement**, ces IA peuvent améliorer la qualité de votre travail. Leur usage est donc **autorisé** dans ce projet, et apprendre à les utiliser efficacement fait partie des compétences que vous devrez développer dans le cadre de votre scolarité.

Cependant, cet outil ne doit pas être détourné en pensant qu’il fera tout à votre place. Il y a deux raisons à cela :

1. Sans instructions claires (prompts de qualité), le code généré sera souvent médiocre... et votre note aussi.
2. Si vous vous contentez de copier sans comprendre, vous n’apprendrez rien ce qui vous pénalisera à long terme dans la suite de votre formation.

Coder c'est aussi réfléchir à son problème, faire un aller/retour avec un jeu de données, affiner sa problématique et ses conclusions en mesurant les limites des données. Ce n'est pas juste coder une application en faisant du _vibe coding_ (pratique que d'ailleurs j'interdis parce que là vous n'apprendrez vraiment rien). 

Tout usage abusif des IA génératives, c'est-à-dire sans effort apparent de reprise de celui-ci, sera sanctionné.
:::


# Barème approximatif

| Catégorie                                         | Points |
|---------------------------------------------------|--------|
| Données (collecte et nettoyage)                   | 4      |
| Analyse descriptive                               | 4      |
| Modélisation                                      | 2      |
| Démarche scientifique et reproductibilité du projet | 4      |
| Format du code (code propre et github)            | 2      |
| Soutenance                                        | 4      |

Lors de l'évaluation, une attention particulière sera donnée à la *reproductibilité* de votre projet.
Chaque étape (récupération et traitement des données, analyses descriptives, modélisation) doit pouvoir être reproduite à partir du notebook final. 

Le test à réaliser : faire tourner toutes les cellules de votre notebook et ne pas avoir d’erreur est une condition _sine qua non_ pour avoir la moyenne.


# Projets passés faits par les étudiants 😍


::: {#sample-listings}
:::


::::
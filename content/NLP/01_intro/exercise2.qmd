:::: {.content-visible when-profile="fr"}

::: {.exercise}
## Exercice 2 : Wordcloud

1. En utilisant la fonction `wordCloud`, faire trois nuages de mot pour représenter les mots les plus utilisés par chaque auteur du corpus `horror`[^random_state].
2. Faire un nuage de mot du corpus `dumas` en utilisant un masque
comme celui-ci

<details>
<summary>
Exemple de masque pour la question 2
</summary>

![URL de l'image: https://minio.lab.sspcloud.fr/lgaliana/generative-art/pythonds/book.png
](https://minio.lab.sspcloud.fr/lgaliana/generative-art/pythonds/book.png)

</details>

[^random_state]: Pour avoir les mêmes résultats que ci-dessous, vous pouvez fixer l'argument `random_state=21`.

:::

::::

:::: {.content-visible when-profile="en"}

::: {.exercise}
## Exercise 2: Wordcloud

1. Using the `wordCloud` function, create three word clouds to represent the most commonly used words by each author in the `horror` corpus[^random_state].
2. Create a word cloud for the `dumas` corpus using a mask
like the one below.

<details>
<summary>
Example mask for question 2
</summary>

![Image URL: https://minio.lab.sspcloud.fr/lgaliana/generative-art/pythonds/book.png
](https://minio.lab.sspcloud.fr/lgaliana/generative-art/pythonds/book.png)

</details>

[^random_state]: To obtain the same results as shown below, you can set the argument `random_state=21`.

:::

::::


```{python}
from wordcloud import WordCloud

#1. Wordclouds trois auteurs
def graph_wordcloud(author, train_data, varname = "Text"):
  txt = train_data.loc[train_data['Author']==author, varname]
  all_text = ' '.join([text for text in txt])
  wordcloud = WordCloud(width=800, height=500,
                      random_state=21,
                      max_words=2000,
                      background_color = "white",
                      colormap='Set2').generate(all_text)
  return wordcloud

n_topics = ["HPL","EAP","MWS"]
```

::: {.content-visible when-profile="fr"}
Les nuages de points obtenus à la question 1 sont les suivants:
:::

::: {.content-visible when-profile="en"}
The word clouds generated for question 1 are as follows:
:::

```{python}
#| label: fig-wordcloud-spooky
#| layout-ncol: 2
#| fig-cap:
#|   - "Lovercraft"
#|   - "Poe"
#|   - "Shelley"
for i in range(len(n_topics)):
    wordcloud = graph_wordcloud(n_topics[i], horror)
    plt.imshow(wordcloud)
    plt.axis('off')
    plt.show()
```

```{python}
import wordcloud
import numpy as np
import io
import requests
import PIL
import matplotlib.pyplot as plt

img = "https://minio.lab.sspcloud.fr/lgaliana/generative-art/pythonds/book.png"
book_mask = np.array(
  PIL.Image.open(io.BytesIO(requests.get(img).content))
)

def make_wordcloud(corpus):
    wc = wordcloud.WordCloud(background_color="white", max_words=2000, mask=book_mask, contour_width=3, contour_color='steelblue')
    wc.generate(corpus)
    return wc

wordcloud_dumas = make_wordcloud(dumas)
```

::: {.content-visible when-profile="fr"}
Alors que celui obtenu à partir de l'oeuvre de Dumas prend
la forme
:::

::: {.content-visible when-profile="en"}
Whereas the one generated from Dumas' work takes
the shape
:::


```{python}
#| fig-cap: Nuage de mot produit à partir du Comte de Monte Cristo
#| label: fig-wordcloud-dumas
plt.imshow(wordcloud_dumas, interpolation='bilinear')
plt.axis("off")
```

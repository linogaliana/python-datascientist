::: {.content-visible when-profile="fr"}

::: {.callout-tip}
## Exercice 2: le classifieur naif de Bayes

1. En repartant de l'exemple précédent, définir un _pipeline_ qui vectorise chaque document (utiliser `CountVectorizer` plutôt que `TFIDFVectorizer`) et effectue une prédiction grâce à un modèle naif de Bayes.
2. Entraîner ce modèle, faire une prédiction sur le jeu de test.
3. Evaluer la performance de votre modèle
4. Faire une prédiction sur la phrase que nous avons utilisée tout à l'heure dans la variable `text`. Obtenez-vous ce qui était attendu ?
5. Regarder les probabilités obtenues (méthode `predict_proba`).
:::

:::

::: {.content-visible when-profile="en"}

::: {.callout-tip}
## Exercise 2: The Naive Bayes Classifier

1. Starting from the previous example, define a _pipeline_ that vectorizes each document (using `CountVectorizer` instead of `TFIDFVectorizer`) and performs prediction using a Naive Bayes model.
2. Train this model and make predictions on the test set.
3. Evaluate the performance of your model.
4. Make a prediction for the sentence we previously stored in the `text` variable. Do you get the expected result?
5. Examine the predicted probabilities (using the `predict_proba` method).
:::

:::
```{python}
#| echo: true
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

pipeline = Pipeline([
    ('vectorizer', CountVectorizer()),
    ('classifier', MultinomialNB())
])

# Train the pipeline on the training data
pipeline.fit(X_train, y_train)
```

```{python}
# Predict on the test set
y_pred = pipeline.predict(X_test)
```

```{python}
from sklearn.metrics import accuracy_score, classification_report
accuracy = accuracy_score(y_test, y_pred)
```

::: {.content-visible when-profile="fr"}

On obtient une précision satisfaisante:

:::

::: {.content-visible when-profile="en"}

We obtain a satisfactory accuracy:

:::


```{python}
print(f"Précision: {accuracy}")
```

::: {.content-visible when-profile="fr"}

Les performances décomposées sont les suivantes:

:::

::: {.content-visible when-profile="en"}

The breakdown of performance metrics is as follows:

:::


```{python}
print(
    classification_report(y_test, y_pred)
)
```

::: {.content-visible when-profile="fr"}

Sans surprise, on obtient bien la prédiction de Mary Shelley:

:::

::: {.content-visible when-profile="en"}

Unsurprisingly, we get Mary Shelley as the predicted author:

:::

```{python}
pipeline.predict([text])[0]
```

::: {.content-visible when-profile="fr"}

Finalement, si on regarde les probabilités estimées (question 5), on se rend compte que la prédiction est très certaine:

:::

::: {.content-visible when-profile="en"}

Finally, when examining the predicted probabilities (question 5), we see that the prediction is very confident:

:::

```{python}
pd.DataFrame(
    {
        "author": pipeline.classes_,
        "proba": pipeline.predict_proba([text])[0]
    }
)
```


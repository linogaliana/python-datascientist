---
title: "Les embeddings, où comment synthétiser l'information textuelle"
description: |
  Pour pouvoir utiliser des données textuelles dans des algorithmes
  de _machine learning_, il faut les vectoriser, c'est à dire transformer
  le texte en données numériques. Dans ce TP, nous allons comparer
  différentes méthodes de vectorisation, à travers une tâche de prédiction :
  _peut-on prédire un auteur littéraire à partir d'extraits de ses textes ?_
  Parmi ces méthodes, on va notamment explorer le modèle `Word2Vec`, qui
  permet d'exploiter les structures latentes d'un texte en construisant
  des _word embeddings_ (plongements de mots).
image: https://minio.lab.sspcloud.fr/lgaliana/generative-art/pythonds/librarian.png
echo: false
bibliography: ../../reference.bib
---

::: {.warning}
Ce chapitre va évoluer prochainement.
:::

{{< badges
    printMessage="true"
>}}

# Introduction

Cette page approfondit certains aspects présentés dans la
[partie introductive](/content/NLP/02_exoclean.qmd). 
Nous allons avancer dans notre compréhension des enjeux du NLP grâce à la
modélisation du langage. 

Nous partirons de la conclusion, évoquée à la fin du précédent chapitre, que les approches fréquentistes présentent plusieurs
inconvénients : représentation du langage sur des régularités statistiques indépendantes des proximités entre des mots ou phrases, difficulté à prendre en compte le contexte.

L'objectif de ce chapitre est d'évoquer le premier point. Il s'agira d'une introduction au sujet des _embeddings_, ces représentations du langage qui sont au fondement des modèles de langage actuels utilisés par des outils entrés dans notre quotidien (`DeepL`, `ChatGPT`...). 


## Données utilisées

Nous allons continuer notre exploration de la littérature
avec, à nouveau, les trois auteurs anglophones :

* Edgar Allan Poe, (EAP) ;
* HP Lovecraft (HPL) ;
* Mary Wollstonecraft Shelley (MWS).

Les données sont disponibles sur un CSV mis à disposition sur [`Github`](https://github.com/GU4243-ADS/spring2018-project1-ginnyqg/blob/master/data/spooky.csv). L'URL pour les récupérer directement est 
<https://github.com/GU4243-ADS/spring2018-project1-ginnyqg/raw/master/data/spooky.csv>.

Pour rentrer dans le sujet des _embeddings_, nous allons faire de la modélisation du langage en essayant de prédire les auteurs ayant écrit tel ou tel texte. On parle de modèle de langage pour désigner la représentation d'un texte ou d'une langue sous la forme d'une distribution de probabilités de termes (généralement les mots). 

::: {.note}
## Sources d'inspiration
Ce chapitre s'inspire de plusieurs ressources disponibles en ligne:

* Un [premier _notebook_ sur `Kaggle`](https://www.kaggle.com/enerrio/scary-nlp-with-spacy-and-keras)
et un [deuxième](https://www.kaggle.com/meiyizi/spooky-nlp-and-topic-modelling-tutorial/notebook
) ;
* Un [dépôt `Github`](https://github.com/GU4243-ADS/spring2018-project1-ginnyqg) ;
:::

## Packages à installer

Comme dans la [partie précédente](/content/NLP/02_exoclean.qmd), il faut télécharger des librairies 
spécialiséees pour le NLP, ainsi que certaines de leurs dépendances.

```{python}
#| eval: false
!pip install scipy==1.12 gensim sentence_transformers pandas matplotlib seaborn
```

Ensuite, comme nous allons utiliser la librairie `SpaCy` avec un corpus de textes
en Anglais, il convient de télécharger le modèle NLP pour l'Anglais. Pour cela, 
on peut se référer à [la documentation de `SpaCy`](https://spacy.io/usage/models),
extrêmement bien faite.

```{python}
#| eval: false
#| echo: true
!python -m spacy download en_core_web_sm
```

```{python}
#| eval: false
from collections import Counter

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import gensim

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import LinearSVC
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.model_selection import GridSearchCV, cross_val_score

from gensim.models.word2vec import Word2Vec
import gensim.downloader
from sentence_transformers import SentenceTransformer
```


# Préparation des données

Nous allons ainsi à nouveau utiliser le jeu de données `spooky` :

```{python}
#| echo: true
import pandas as pd

data_url = 'https://github.com/GU4243-ADS/spring2018-project1-ginnyqg/raw/master/data/spooky.csv'
spooky_df = pd.read_csv(data_url)
```

Le jeu de données met ainsi en regard un auteur avec une phrase qu'il a écrite :

```{python}
#| echo: true
spooky_df.head()
```

## Preprocessing

Comme nous l'avons évoqué dans le chapitre précédent, la première étape de tout travail sur données textuelles est souvent celle du *preprocessing*, qui inclut notamment les étapes de tokenization et de nettoyage du texte. 

On se contentera ici d'un *preprocessing* minimaliste : suppression de la ponctuation et des *stop words* (pour la visualisation et les méthodes de vectorisation basées sur des comptages).

Pour initialiser le processus de nettoyage,
on va utiliser le corpus `en_core_web_sm` de `Spacy`


```{python}
#| echo: true
import spacy
nlp = spacy.load('en_core_web_sm')
```

On va utiliser un `pipe` `spacy` qui permet d'automatiser, et de paralléliser,
un certain nombre d'opérations. Les *pipes* sont l'équivalent, en NLP, de
nos *pipelines* `scikit` ou des *pipes* `pandas`. Il s'agit donc d'un outil
très approprié pour industrialiser un certain nombre d'opérations de
*preprocessing* :

```{python}
#| echo: true
#| code-fold: true
#| code-summary: "Preprocessing de la base textuelle"
from typing import List
import spacy

def clean_docs(
    texts: List[str], 
    remove_stopwords: bool = False, 
    n_process: int = 4, 
    remove_punctuation: bool = True
) -> List[str]:
    """
    Cleans a list of text documents by tokenizing, optionally removing stopwords, and optionally removing punctuation.

    Parameters:
        texts (List[str]): List of text documents to clean.
        remove_stopwords (bool): Whether to remove stopwords. Default is False.
        n_process (int): Number of processes to use for processing. Default is 4.
        remove_punctuation (bool): Whether to remove punctuation. Default is True.

    Returns:
        List[str]: List of cleaned text documents.
    """
    # Load spacy's nlp model
    docs = nlp.pipe(
        texts, 
        n_process=n_process, 
        disable=['parser', 'ner', 'lemmatizer', 'textcat']
    )
    
    # Pre-load stopwords for faster checking
    stopwords = set(nlp.Defaults.stop_words)

    # Process documents
    docs_cleaned = (
        ' '.join(
            tok.text.lower().strip()
            for tok in doc
            if (not remove_punctuation or not tok.is_punct) and 
               (not remove_stopwords or tok.text.lower() not in stopwords)
        )
        for doc in docs
    )
    
    return list(docs_cleaned)
```

On applique la fonction `clean_docs` à notre colonne `pandas`.
Les `pandas.Series` étant itérables, elles se comportent comme des listes et
fonctionnent ainsi très bien avec notre `pipe` `spacy`.

```{python}
#| echo: true
spooky_df['text_clean'] = clean_docs(spooky_df['text'])
```

```{python}
#| echo: true
spooky_df.head()
```


## Construction des bases d'entraînement et de test

On met de côté un échantillon de test (20 %) avant toute analyse (même descriptive).
Cela permettra d'évaluer nos différents modèles toute à la fin de manière très rigoureuse,
puisque ces données n'auront jamais utilisées pendant l'entraînement.

Notre échantillon initial n'est pas équilibré (*balanced*) : on retrouve plus d'oeuvres de
certains auteurs que d'autres. Afin d'obtenir un modèle qui soit évalué au mieux, nous allons donc stratifier notre échantillon de manière à obtenir une répartition similaire d'auteurs dans nos
ensembles d'entraînement et de test.


```{python}
#| echo: true
from sklearn.model_selection import train_test_split

y = spooky_df["author"]
X = spooky_df['text_clean']
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, stratify=y, random_state=42
)
```


Aperçu du premier élément de `X_train` : 

```{python}
X_train[0]
```


# Vectorisation par l'approche _bag of words_

La représentation de nos textes sous forme de sac de mot permet de vectoriser notre corpus et ainsi d'avoir une représentation numérique de chaque texte. On peut à partir de là effectuer plusieurs types de tâches de modélisation.

Définissons notre représentation vectorielle par TF-IDF grâce à `Scikit`:

```{python}
#| echo: true
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.pipeline import Pipeline

pipeline_tfidf = Pipeline([
    ('tfidf', TfidfVectorizer(max_features=10000)),
])
pipeline_tfidf
```

Entraînons d'ores et déjà notre modèle à vectoriser le texte à partir de la méthode TF-IDF. Pour le moment il n'est pas encore question de faire de l'évaluation, faisons donc un entraînement sur l'ensemble de notre base et pas seulement sur `X_train`. 

```{python}
pipeline_tfidf.fit(spooky_df['text_clean'])
```

## Trouver le texte le plus similaire

En premier lieu, on peut chercher le texte le plus proche, au sens de TF-IDF, d'une phrase donnée. Prenons cet exemple:

```{python}
text = "He was afraid by Frankenstein monster"
```

Comment retrouver le texte le plus proche de celui-ci ? Il faudrait transformer notre texte dans cette même représentation vectorielle et rapprocher ensuite celui-ci des autres textes représentés sous cette même forme.  

Cela revient à effectuer une tâche de recherche d'information, cas d'usage classique du NLP, mis en oeuvre par exemple par les moteurs de recherche. Le terme Frankenstein étant assez discrminant, nous devrions, grâce à TF-IDF, retrouver des similarités entre notre texte et d'autres textes écrits par Mary Shelley. 

Une métrique régulièrement utilisée pour comparer des vecteurs est la similarité cosinus. Il s'agit d'ailleurs d'une mesure centrale dans l'approche moderne du NLP. Celle-ci a plus de sens avec des vecteurs dense, que nous verrons prochainement, qu'avec des vecteurs comportant beaucoup de 0 comme le sont les vecteurs _sparse_ des mesures _bag-of-words_. Néanmoins c'est déjà un exercice intéressant pour comprendre la similarité entre deux vecteurs. 

Si chaque dimension d'un vecteur correspond à une direction, l'idée derrière la similarité cosinus est de mesurer l'angle entre deux vecteurs. L'angle sera réduit si les vecteurs sont proches.

![](https://miro.medium.com/v2/resize:fit:824/1*GK56xmDIWtNQAD_jnBIt2g.png)


### Avec `Scikit-Learn`


::: {.exercise}
## Exercice 1: recherche de similarité avec TF-IDF

1. Utiliser la méthode `transform` pour vectoriser tout notre corpus d'entraînement. 

2. En supposant que votre jeu d'entraînement vectorisé s'appelle `X_train_tfidf`, vous pouvez le transformer en _DataFrame_ avec la commande suivante:

```{.python}
X_train_tfidf=pd.DataFrame(
    X_train_tfidf.todense(),columns=pipeline_tfidf.get_feature_names_out()
)
```

3. Utiliser la méthode `cosine_similarity` de `Scikit` pour calculer la similarité cosinus entre notre texte vectorisé et l'ensemble du corpus d'entraînement grâce au code suivant:

```{.python}
from sklearn.metrics.pairwise import cosine_similarity

cosine_similarities = cosine_similarity(
    X_train_tfidf,
    pipeline_tfidf.transform([text])
).flatten()

top_4_indices = np.argsort(cosine_similarities)[-4:][::-1]  # Sort and reverse for descending order
top_4_similarities = cosine_similarities[top_4_indices]
```

4. Retrouver les documents concernés. Êtes-vous satisfait du résultat ? Comprenez-vous ce qu'il s'est passé ?

:::


```{python}
#| label: exo1-q1-q2
X_train_tfidf = (
    pipeline_tfidf.transform(spooky_df['text_clean'])
)
X_train_tfidf=pd.DataFrame(
    X_train_tfidf.todense(),columns=pipeline_tfidf.get_feature_names_out()
)
```

```{python}
#| label: exo1-q3
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

cosine_similarities = cosine_similarity(
    X_train_tfidf,
    pipeline_tfidf.transform([text])
).flatten()

top_4_indices = np.argsort(cosine_similarities)[-4:][::-1]  # Sort and reverse for descending order
top_4_similarities = cosine_similarities[top_4_indices]
```

A l'issue de l'exercice, les 4 textes les plus similaires sont:

```{python}
documents_plus_proches = spooky_df.iloc[top_4_indices].loc[:, ["text", "author"]]
documents_plus_proches['score'] = top_4_similarities

documents_plus_proches
```


### Avec `Langchain` 

Cette approche de calcul de similarité textuelle est assez laborieuse avec `Scikit`. Avec le développement continu d'applications `Python` utilisant des modèles de langage, un écosystème très complet s'est développé pour pouvoir faire ces tâches en quelques lignes de code avec `Python`.

Parmi les outils les plus précieux, nous trouvons [`Langchain`](https://www.langchain.com/) un écosystème `Python` haut-niveau permettant de construire des chaînes de production utilisant des données textuelles. 

Nous allons ici procéder en 2 étapes: 

- Créer un _retriever_, c'est-à-dire vectoriser avec TF-IDF notre corpus (les textes de nos trois auteurs) et les stocker sous forme de base de données vectorielle. 
- Vectoriser à la volée notre texte de recherche (l'object `text` créé précédemment) et rechercher sa contrepartie la plus proche dans la base de données vectorielle. 

La vectorisation de notre corpus se fait très simplement grâce à `Langchain` 
puisque le TFIDFVectoriser de `Scikit` est encapsulé dans un module _ad hoc_ de `Lanchain`

```{python}
#| echo: true
from langchain_community.retrievers import TFIDFRetriever
from langchain_community.document_loaders import DataFrameLoader

loader = DataFrameLoader(spooky_df, page_content_column="text_clean")

retriever = TFIDFRetriever.from_documents(
    loader.load()
)
```

Cet objet `retriever` est un point d'entrée sur notre corpus. `Langchain` présente l'intérêt de fournir plusieurs points d'entrées standardisés, forts utiles dans les projets de NLP puisqu'il suffit de changer les vectoriseurs en entrée sans avoir à changer leur usage en fin de chaîne. 

La méthode `invoke` permet de rechercher les vecteurs les plus similaires à notre texte de recherche:

```{python}
#| echo: true
retriever.invoke(text)
```

La sortie est un objet `Lanchain`, ce qui n'est pas pratique pour nous dans notre situation. On se ramène à un _DataFrame_:

```{python}
#| echo: true
documents = []
for best_echoes in retriever.invoke(text):
    documents += [{**best_echoes.metadata, **{"text_clean": best_echoes.page_content}}]

documents = pd.DataFrame(documents)
```

On peut ajouter à ce _DataFrame_ la colonne de score:

```{python}
from sklearn.metrics.pairwise import cosine_similarity

documents['score'] = cosine_similarity(
    pipeline_tfidf.transform(documents['text_clean']),
    pipeline_tfidf.transform([text])
)
```

On retrouve bien les mêmes documents:

```{python}
documents
```

::: {.note}
## La métrique BM25

BM25 est un modèle de récupération d'informations basé sur la pertinence probabiliste, au même titre que TF-IDF. BM25 est souvent utilisée dans les moteurs de recherche pour classer les documents par rapport à une requête.

BM25 repose sur une combinaison de la fréquence des termes (TF), la fréquence inverse des documents (IDF), et une normalisation basée sur la longueur des documents. Autrement dit, il s'agit de tenir compte d'améliorer TF-IDF tout en normalisant les mesures en fonction de la taille des _strings_ afin de ne pas surpondérer les grands documents. 

BM25 est donc particulièrement performant dans des environnements où les documents varient en longueur et en contenu. C'est pour cette raison que des moteurs de recherche comme `Elasticsearch` en ont fait une pierre angulaire du mécanisme de recherche.
:::

Pourquoi ne sont-ils pas tous pertinents ? On peut anticiper plusieurs raisons à cela.

La première hypothèse vient du fait qu'on entraîne notre vectoriseur sur un corpus biaisé. Certes Frankestein est un terme rare mais il est beaucoup plus fréquent dans notre corpus que dans la langue anglaise. L'_inverse document frequency_ est donc biaisée en défaveur de ce terme: son apparition devrait être un signe beaucoup plus fort que le texte recherché correspond à Mary Shelley. Si cela peut améliorer un peu la pertinence des résultats renvoyés, ce n'est néanmoins pas là que le bât blesse. 

L'approche fréquentiste suppose que les termes sont aussi dissemblables les uns que les autres. Une phrase où apparaît le terme _"créature"_ ne bénéficiera pas d'un score positif si on recherche _"monstre"_. De plus, là encore, nous avons pris notre corpus comme un sac où les mots sont indépendants: on n'a pas plus de chance de tirer _"Frankenstein"_ après _"docteur"_. Ces limites vont nous amener vers le sujet des _embeddings_. Néanmoins, si l'approche fréquentiste est un peu _old school_, elle n'est néanmoins pas inutile et représente souvent une _"tough to beat baseline"_. Dans les domaines de l'extraction d'information avec des textes courts, où chaque terme est porteur d'un signal fort, cette approche est souvent judicieuse.



## Trouver l'auteur le plus proche: une introduction au classifieur Bayes

Avant d'explorer les _embeddings_, nous pouvons essayer d'avoir un cas d'usage un petit peu différent dans notre cadre probabiliste. Supposons qu'on désire maintenant faire de la prédiction d'auteur. Si l'intuition précédente est vraie - certains mots sont plus probables dans les textes de certains auteurs - cela veut dire qu'on peut entraîner un algorithme de classification automatique à prédire un auteur à partir d'un texte.

La méthode la plus naturelle pour se lancer dans cette approche est d'utiliser le classifieur naif de Bayes. Ce dernier est parfaitement adapté à l'approche fréquentiste que nous avons adoptée jusqu'à présent puisqu'il exploite les probabilités d'occurrence de mots par auteur. 

Le classifieur naif de Bayes consiste à appliquer une règle de décision, à savoir sélectionner la classe la plus probable sachant la structure observée du document, c'est-à-dire les mots apparaissant dans celui-ci. 

Autrement dit, on sélectionne la classe $\widehat{c}$ qui est la plus probable, sachant les termes dans le document $d$. 

$$
\widehat{c} = \arg \max_{c \in \mathcal{C}} \mathbb{P}(c|d) =  \arg \max_{c \in \mathcal{C}} \frac{ \mathbb{P}(d|c)\mathbb{P}(c)}{\mathbb{P}(d)}
$$ {#eq-definition-bayes}

Comme ceci est classique en estimation bayésienne, on peut se passer de certains termes constants, à savoir $\mathbb{P}(d)$. La définition de la classe estimée peut ainsi être reformulée de cette manière:

$$
\widehat{c} = \arg \max_{c \in \mathcal{C}} \mathbb{P}(d|c)\mathbb{P}(c)
$$ {#eq-rewriting-bayes}

L'hypothèse du sac de mot intervient à ce niveau. Un document $d$ est une collection de mots $w_i$ dont l'ordre n'a pas d'intérêt. Autrement dit, on peut se contenter de faire un modèle sur les mots, sans faire intervenir des probabilités conditionnelles sur l'ordre d'occurrence. 
La seconde hypothèse forte est l'hypothèse naive à laquelle la méthode doit son nom: la probabilité de tirer un mot ne dépend que de la catégorie $c$ d'appartenance du document. Autrement dit, on peut considérer qu'un document est une suite de tirage indépendants de mots dont la probabilité ne dépend que de l'auteur. 

Comme cela est expliqué dans la boite dédiée, en faisant ces hypothèses, on peut réécrire ce classifieur sous la forme

$$
\widehat{c} = \arg \max_{c \in \mathcal{C}} \mathbb{P}(c)\prod_{w \in \mathcal{W}}{\mathbb{P}(w|c)}
$$

avec $\mathcal{W}$ l'ensemble des mots dans le corpus (notre vocabulaire). 

Empiriquement, nous sommes dans une tâche d'apprentissage supervisé où le _label_ est la classe du document et les _features_ sont nos mots vectorisés. Empiriquement, les probabilités sont estimées à partir du dénombrement des mots dans le corpus et des types de documents dans le corpus.

Il est bien-sûr possible de calculer toutes ces grandeurs à la main mais `Scikit` permet d'implémenter un estimateur naif de Bayes après avoir vectorisé son corpus comme le montre le prochain exercice. Cela peut néanmoins poser un problème pratique: en principe, le corpus de test ne doit pas comporter de nouveaux mots car ces "nouvelles" dimensions n'étaient pas présentes dans le corpus d'entraînement. En pratique, la solution la plus simple est souvent celle choisie: ces mots sont ignorés. 


::: {.exercise}
## Exercice 2: le classifieur naif de Bayes

1. En repartant de l'exemple précédent, définir un _pipeline_ qui vectorise chaque document (utiliser `CountVectorizer` plutôt que `TFIDFVectorizer`) et effectue une prédiction grâce à un modèle naif de Bayes.
2. Entraîner ce modèle, faire une prédiction sur le jeu de test.
3. Evaluer la performance de votre modèle
4. Faire une prédiction sur la phrase que nous avons utilisée tout à l'heure dans la variable `text`. Obtenez-vous ce qui était attendu ?
5. Regarder les probabilités obtenues (méthode `predict_proba`). 
:::

```{python}
#| echo: true
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

pipeline = Pipeline([
    ('vectorizer', CountVectorizer()),
    ('classifier', MultinomialNB())
])

# Train the pipeline on the training data
pipeline.fit(X_train, y_train)
```

```{python}
# Predict on the test set
y_pred = pipeline.predict(X_test)
```

```{python}
from sklearn.metrics import accuracy_score, classification_report
accuracy = accuracy_score(y_test, y_pred)
```

On obtient une précision satisfaisante:

```{python}
print(f"Précision: {accuracy}")
```

Les performances décomposées sont les suivantes:

```{python}
print(
    classification_report(y_test, y_pred)
)
```

Sans surprise, on obtient bien la prédiction de Mary Shelley:

```{python}
pipeline.predict([text])[0]
```

Finalement, si on regarde les probabilités estimées (question 5), on se rend compte que la prédiction est très certaine:

```{python}
pd.DataFrame(
    {
        "author": pipeline.classes_,
        "proba": pipeline.predict_proba([text])[0]
    }
)
```


::: {.tip}
## Comprendre la logique du classifieur naif de Bayes

Supposons que nous sommes dans un problème de classification avec des classes $(c_1,...,c_K) (ensemble noté $\mathcal{C}$). Nous plaçant dans le cadre de pensée du sac de mot, nous pouvons ne pas nous préoccuper des positions des mots dans les documents, qui complexifieraient beaucoup l'écriture de nos équations.

L'équation @eq-rewriting-bayes peut être réécrite

$$
\widehat{c} = \arg \max_{c \in \mathcal{C}} \mathbb{P}(w_1, ..., w_n|c)\mathbb{P}(c)
$$

Dans le monde bayésien, on nomme $\mathbb{P}(w_1, ..., w_n|c)$ la vraisemblance (_likelihood_) et $\mathbb{P}(c)$ l'_a priori_ (_prior_).  

L'hypothèse Bayes naive permet de traiter un document comme une suite de tirages aléatoires dont les probabilités ne dépendent que de la catégorie. Dans ce cas, le tirage d'une phrase est une suite de tirages de mots et la probabilité composée est donc


$$
\mathbb{P}(w_1, ..., w_n|c) = \prod_{i=1}^n \mathbb{P}(w_i|c)
$$

Par exemple, en simplifiant en deux classes, si les probabilités sont celles du @tbl-fake-proba, la phrase _"afraid by Doctor Frankenstein"_ aura un peu moins de 1% de chance (0.8%) d'être écrite si l'autrice est Mary Shelley mais sera encore moins vraisemblable chez Lovecraft (0.006%) car si _"afraid"_ est très probable chez lui, Frankenstein est un événement rare qui rend peu vraisemblable cette composition de mots. 

| Mot ($w_i$) | Probabilité chez Mary Shelley| Probabilité chez Lovecraft |
|-----------|--------|--------|
| Afraid | 0.1 | 0.6 |
| By | 0.2 | 0.2 |
| Doctor | 0.2 | 0.05 |
| Frankenstein | 0.2 | 0.01 |

: Exemple fictif de probabilités de tirage {#tbl-fake-proba}

En composant ces différentes équations, on obtient 

$$
\widehat{c} = \arg \max_{c \in \mathcal{C}} \mathbb{P}(c)\prod_{w \in \mathcal{W}}{\mathbb{P}(w|c)}
$$

La contrepartie empirique de $\mathbb{P}(c)$ est assez évidente: la fréquence observée de chaque catégorie (les auteurs) dans notre corpus. Autrement dit, 

$$
\widehat{\mathbb{P}(c)} = \frac{n_c}{n_{doc}}
$$

Quelle est la contrepartie empirique de $\mathbb{P}(w_i|c)$ ? C'est la fréquence d'apparition du mot en question chez l'auteur. Pour le calculer, il suffit de compter le nombre de fois qu'il apparaît chez l'auteur et de diviser par le nombre de mots de l'auteur. 

:::


# Le modèle Word2Vec, une représentation plus synthétique

## Vers une représentation plus synthétique du langage

La représentation vectorielle issue de l'approche _bag of words_ n'est pas très synthétique ni stable et surtout est assez frustre. 

Si on a un petit corpus, on va avoir des problèmes à extrapoler puisque de nouveaux textes ont toutes les chances d'apporter de nouveaux mots, qui sont de nouvelles dimensions de _features_ qui n'étaient pas présentes dans le corpus d'entraînement, ce qui conceptuellement est un problème puisque les algorithmes de _machine learning_ n'ont pas vocation à prédire sur des caractéristiques sur lesquelles ils n'ont pas été entraîné[^genAI].

A l'inverse, plus on a de texte dans un corpus, plus notre représentation vectorielle sera importante. Par exemple, si votre sac de mot a vu tout le vocabulaire français, soit 60 000 mots selon l'[Académie Française](https://www.dictionnaire-academie.fr/article/QDL056) (les estimations étant de 200 000 pour la langue anglaise), cela fait des vecteurs de taille conséquente. Cependant, la diversité des textes est, en pratique, bien moindre: l'usage courant du Français nécessite plutôt autour de 3000 mots et la plupart des textes, notamment s'ils sont courts, n'utilisent pas un vocabulaire si complet. Ceci implique donc des vecteurs très peu denses, avec beaucoup de 0.

[^genAI]: Cette remarque peut apparaître étonnante alors que les IA génératives occupent une place importante dans nos usages. Néanmoins, il faut garder à l'esprit que certes vous posez de nouvelles questions à des IA mais vous les posez dans des termes qu'elles connaissent: du langage naturel dans une langue présente dans leur corpus d'entraînement, des images numériques qui sont donc interprétables par une machine, etc. Autrement dit, votre _prompt_ n'est pas, en soi, inconnu pour l'IA, elle peut l'interpréter même si son contenu est nouveau et original. 

La vectorisation selon cette approche est donc peu efficace; le signal est peu compressé. Des représentations denses, c'est-à-dire de dimension plus faible mais portant toutes une information, semblent plus adéquate pour pouvoir généraliser notre modélisation du langage.
L'algorithme qui a rendu célèbre cette approche est le modèle `Word2Vec`, en quelques sortes le premier ancêtre commun des LLM modernes. La représentation vectorielle de `Word2Vec` est assez synthétique: la dimension de ces _embeddings_ est entre 100 et 300.

## Des relations sémantique entre les termes

Cette représentation dense va représenter une solution à une limite de l'approche _bag of words_ que nous avons évoquée à de multiples reprises. Chacune de ces dimensions va représenter un facteur latent,
c'est à dire une variable inobservée,
de la même manière que les composantes principales produites par une ACP. Ces dimensions latentes peuvent être interprétées comme des dimensions "fondamentales" du langage

![Illustration du principe de la représentation de Word2Vec (source: [Jay Alammar](https://jalammar.github.io/illustrated-word2vec/))](https://jalammar.github.io/images/word2vec/word2vec.png)


Par exemple, un humain sait qu'un document contenant le mot _"Roi"_
et un autre document contenant le mot _"Reine"_ ont beaucoup de chance
d'aborder des sujets semblables. Un modèle `Word2Vec` bien entraîné va capter
qu'il existe un facteur latent de type _"royauté"_
et la similarité entre les vecteurs associés aux deux mots sera forte.

La magie va même plus loin : le modèle captera aussi qu'il existe un
facteur latent de type _"genre"_,
et va permettre de construire un espace sémantique dans lequel les
relations arithmétiques entre vecteurs ont du sens. Par exemple, 

$$
\text{king} - \text{man} + \text{woman} ≈ \text{queen}
$$

ou, pour reprendre, l'exemple issu du papier originel `Word2Vec` [@mikolov2013efficient],

$$
\text{Paris} - \text{France} + \text{Italy} ≈ \text{Rome}
$$

![Illustration du plongement lexical. Source : Post de blog [Word Embedding : Basics](https://medium.com/@hari4om/word-embedding-d816f643140)](https://ssphub.netlify.app/post/embedding/word_embedding.png)

Un autre "miracle" de cette approche est qu'on obtient une forme de transfert entre les langues. Les relations sémantiques pouvant être similaires entre les langues, pour de nombreux mots usuels, on peut voir translater certaines langues les unes avec les autres si elles ont un socle commun (par exemple les langues occidentales). Ce concept est le point de départ des traducteurs automatiques et des IA multilingues

![Exemple de translation entre deux représentations vectorielles. Source: [Meta](https://engineering.fb.com/2018/01/24/ml-applications/under-the-hood-multilingual-embeddings/)](https://engineering.fb.com/wp-content/uploads/2018/01/GJ_9lgFMnVaR0ZYAAAAAAABV9MkQbj0JAAAC.gif)


## Comment ces modèles sont-ils entraînés ?

Ces modèles sont entraînés à partir d'une tâche de prédiction résolue par un réseau de neurones simple, généralement avec une approche par renforcement. 

L'idée fondamentale est que la signification d'un mot se comprend en regardant les mots qui apparaissent fréquemment dans son voisinage. Pour un mot donné, on va donc essayer de prédire les mots qui apparaissent dans une fenêtre autour du mot cible.

En répétant cette tâche de nombreuses fois et sur un corpus suffisamment varié,
on obtient finalement des *embeddings* pour chaque mot du vocabulaire,
qui présentent les propriétés discutées précédemment. L'ensemble des articles `Wikipedia` est un des corpus de prédilection des personnes ayant construit des plongements
lexicaux. Il comporte en effet des phrases complètes, contrairement à des informations issues de commentaires de réseaux sociaux, 
et propose des rapprochements intéressants entre des personnes, des lieux, etc.

Le contexte d’un mot est défini par une fenêtre de taille fixe autour de ce mot. La taille de la fenêtre est un paramètre de la construction de l’_embedding_. Le corpus fournit un grand ensemble d’exemples mots-contexte, qui peuvent servir à entraîner un réseau de neurones.

Plus précisément, il existe deux approches, dont nous ne développerons pas les détails :

*   _Continuous bag of words_ (CBOW), où le modèle est entraîné à prédire un mot à partir de son contexte ;
*   _Skip-gram_, où le modèle tente de prédire le contexte à partir d’un seul mot.

![Illustration de la différence entre les approches CBOW et Skip-gram](https://ssphub.netlify.app/post/embedding/CBOW_Skipgram_training.png)


## Modèles liés

Plusieurs modèles ont une filiation directe avec le modèle `Word2Vec` quoiqu'ils s'en distinguent par la nature de l'architecture utilisée. 

C'est le cas, par exemple, du modèle modèle [`GloVe`](https://nlp.stanford.edu/projects/glove/), développé en 2014 à Stanford,
qui ne repose pas sur des réseaux de neurones mais sur la construction d’une grande matrice de co-occurrences de mots. Pour chaque mot, il s’agit de calculer les fréquences d’apparition des autres mots dans une fenêtre de taille fixe autour de lui. La matrice de co-occurrences obtenue est ensuite factorisée par une décomposition en valeurs singulières.

Le modèle [`FastText`](https://fasttext.cc/), développé en 2016 par une équipe de `Facebook`, fonctionne de façon similaire à `Word2Vec` mais se distingue particulièrement sur deux points :

*   En plus des mots eux-mêmes, le modèle apprend des représentations pour les n-grams de caractères (sous-séquences de caractères de taille $n$, par exemple _« tar »_, _« art »_ et _« rte »_ sont les trigrammes du mot _« tarte »_), ce qui le rend notamment robuste aux variations d’orthographe ;
*   Le modèle a été optimisé pour que son entraînement soit particulièrement rapide.

Le modèle [`FastText`](https://fasttext.cc/) est particulièrement performant pour les problématiques de classification automatique. L'Insee l'utilise par exemple pour plusieurs modèles de classification de libellés textuels dans des nomenclatures. 

![Illustration du modèle fastText](https://ssphub.netlify.app/post/embedding/fasttext.png)

Voici un exemple sur un projet de classification automatisée des professions dans la typologie
des nomenclatures d'activités (les PCS) à partir d'un modèle entraîné par la librairie `Fasttext` :

::: {.content-visible when-format="html"}

```{ojs}
//| echo: false
viewof activite = Inputs.text( 
  {label: '', value: 'data scientist', width: 800}
)
```


```{ojs}
//| echo: false
d3.json(urlApe).then(res => {
  var IC, results;

  ({ IC, ...results } = res);

  IC = parseFloat(IC);

  const rows = Object.values(results).map(obj => {
    return `
    <tr>
      <td>${obj.code} | ${obj.libelle}</td>
      <td>${obj.probabilite.toFixed(3)}</td>
    </tr>
  `;
  }).join('');

  const confidenceRow = `<tr>
    <td colspan="2" style="text-align:left; "><em>Indice de confiance : ${IC.toFixed(3)}</em></td>
  </tr>`;

  const tableHTML = html`
  <table>
    <caption>
      Prédiction de l'activité
    </caption>
    <tr>
      <th style="text-align:center;">Libellé (NA2008)</th>
      <th>Probabilité</th>
    </tr>
      ${rows}
      ${confidenceRow}
  </table>`;

  // Now you can use the tableHTML as needed, for example, inserting it into the DOM.
  // For example, assuming you have a container with the id "tableContainer":
  return tableHTML;
});
```

```{ojs}
//| echo: false
activite_debounce = debounce(viewof activite, 2000)
urlApe = `https://codification-ape-test.lab.sspcloud.fr/predict?nb_echos_max=3&prob_min=0&text_feature=${activite_debounce}`
```

```{ojs}
//| echo: false
import {debounce} from "@mbostock/debouncing-input"
```

:::

::: {.content-hidden when-format="html"}

```{python}
import requests
import pandas as pd

activite = "data scientist"
urlApe = f"https://codification-ape-test.lab.sspcloud.fr/predict?nb_echos_max=3&prob_min=0&text_feature=${activite}"
import requests
data = requests.get(urlApe).json()

# Extract 'IC' value
IC = data['IC']
data.pop('IC', None)

df = pd.DataFrame(data.values())
df['indice_confiance'] = IC
df
```

:::

Ces modèles sont héritiers de `Word2Vec` dans le sens où ils reprennent une représentation vectorielle dense de faible dimension de documents textuels. `Word2Vec` reste un modèle héritier de la logique sac de mot. La représentation d'une phrase ou d'un document est une forme de moyenne des représentations des mots qui les composent. 

Depuis 2013, plusieurs révolutions ont amené à enrichir les modèles de langage pour aller au-delà d'une représentation par mot de ceux-ci. Des architectures beaucoup plus complexes pour représenter non seulement les mots sous forme d'_embeddings_ mais aussi les phrases et les documents sont aujourd'hui à l'oeuvre et peuvent être reliées à la révolution des architectures _transformers_.

# Les _transformers_: une représentation plus riche du langage

Si le modèle `Word2Vec` est entraîné de manière contextuelle, sa vocation est de donner une représentation vectorielle d'un mot de manière absolue, indépendamment du contexte. Par exemple, le terme _"banc"_ aura exactement la même représentation vectorielle qu'il se trouve dans la phrase _"Elle court vers le banc de sable"_ ou "Il t'attend sur un banc au parc"_. C'est une limite majeure de ce type d'approche et on se doute bien de l'importance du contexte pour l'interprétation du langage.

L'objectif des architectures _transformers_ est de permettre des représentations vectorielles contextuelles. Autrement dit, un mot aura plusieurs représentations vectorielles, selon son contexte d'occurrence. Ces modèles s'appuient sur le mécanisme d'attention [@vaswani2017attention]. Avant cette approche, lorsqu'un modèle apprenait à vectoriser un texte et qu'il arrivait au énième mot, la seule mémoire qu'il gardait était celle du mot précédent. Par récurrence, cela signifiait qu'il gardait une mémoire des mots précédents mais celle-ci tendait à se dissiper. Par conséquent, pour un mot arrivant loin dans la phrase, il était probable que le contexte de début de phrase était oublié. Autrement dit, dans la phrase _"à la plage, il allait explorer le banc"_, il était fort probable qu'arrivé au mot _"banc"_, le modèle ait oublié le début de phrase qui avait pourtant de l'importance pour l'interprétation. 

L'objectif du mécanisme d'attention est de créer une mémoire interne au modèle permettant, pour tout mot d'un texte, de pouvoir garder trace des autres mots. Bien-sûr tous ne sont pas pertinents pour interpréter le texte mais cela évite d'oublier ceux qui sont importants.

<!--------
https://fr.wikipedia.org/wiki/Transformeur
-------->

Le modèle qui a marqué son époque dans le domaine est le modèle `BERT` développé en 2018 par _Google_ (qui était déjà à l'origine de `Word2Vec`). 






# Word2vec pré-entraîné + averaging

Quand on travaille avec des corpus de taille restreinte,
c'est généralement une mauvaise idée d'entraîner son propre modèle `word2vec`.

Heureusement, des modèles pré-entraînés sur de très gros corpus sont disponibles.
Ils permettent de réaliser du *transfer learning*,
c'est-à-dire de bénéficier de la performance d'un modèle qui a été entraîné sur une autre tâche ou bien sur un autre corpus.

L'un des modèles les plus connus pour démarrer est le `glove_model` de
`Gensim` (Glove pour _Global Vectors for Word Representation_)[^1]:

> GloVe is an unsupervised learning algorithm for obtaining vector representations for words. Training is performed on aggregated global word-word co-occurrence statistics from a corpus, and the resulting representations showcase interesting linear substructures of the word vector space. 
>
> _Source_ : https://nlp.stanford.edu/projects/glove/

[^1]: Jeffrey Pennington, Richard Socher, and Christopher D. Manning. 2014. _GloVe: Global Vectors for Word Representation_. 

On peut le charger directement grâce à l'instruction suivante : 

```{python}
#| output: hide
#| eval: false
glove_model = gensim.downloader.load('glove-wiki-gigaword-200')
```

Par exemple, la représentation vectorielle de roi est l'objet
multidimensionnel suivant :

```{python}
#| eval: false
glove_model['king']
```

Comme elle est peu intelligible, on va plutôt rechercher les termes les
plus similaires. Par exemple,

```{python}
#| eval: false
glove_model.most_similar('mother')
```

On peut retrouver notre formule précédente

$$\text{king} - \text{man} + \text{woman} ≈ \text{queen}$$
dans ce plongement de mots:

```{python}
#| eval: false
glove_model.most_similar(positive = ['king', 'woman'], negative = ['man'])
```

Vous pouvez vous référer à [ce tutoriel](https://jalammar.github.io/illustrated-word2vec/)
pour en découvrir plus sur `Word2Vec`.

Faisons notre apprentissage par transfert :

```{python}
#| eval: false
cv_w2vec_transfert = fit_w2v_avg(glove_model)
```

La performance remonte substantiellement.
Cela étant, on ne parvient pas à faire mieux que les approches basiques,
on arrive à peine aux performances de la vectorisation par comptage.

En effet, pour rappel, les performances sont les suivantes :

```{python}
#| eval: false
perfs = pd.DataFrame(
    [np.mean(cv_bow.cv_results_['mean_test_score']),
     np.mean(cv_tfidf.cv_results_['mean_test_score']),
    np.mean(cv_w2vec),
    np.mean(cv_w2vec_transfert)],
    index = ['Bag-of-Words','TF-IDF', 'Word2Vec non pré-entraîné', 'Word2Vec pré-entraîné'],
    columns = ["Mean F1 score"]
).sort_values("Mean F1 score",ascending = False)
perfs
```

Les performences limitées du modèle *Word2Vec* sont cette fois certainement dues à la manière dont
les *word-embeddings* sont exploités : ils sont moyennés pour décrire chaque document. 

Cela a plusieurs limites : 

- on ne tient pas compte de l'ordre et donc du contexte des mots
- lorsque les documents sont longs, la moyennisation peut créer
des représentation bruitées.

# Contextual embeddings

Les *embeddings* contextuels visent à pallier les limites des *embeddings*
traditionnels évoquées précédemment.

Cette fois, les mots n'ont plus de représentation vectorielle fixe,
celle-ci est calculée dynamiquement en fonction des mots du voisinage, et ainsi de suite.
Cela permet de tenir compte de la structure des phrases
et de tenir compte du fait que le sens d'un mot est fortement dépendant des mots
qui l'entourent. 
Par exemple, dans les expressions "le président Macron" et "le camembert Président" le mot président n'a pas du tout le même rôle.

Ces *embeddings* sont produits par des architectures très complexes,
de type Transformer (`BERT`, etc.).


_TODO: approfondir le sujet_

```{python}
#| eval: false
#| output: hide
model = SentenceTransformer('all-mpnet-base-v2')
```


```{python}
#| eval: false
#| echo: false
X_train_vectors = model.encode(X_train)
```


```{python}
#| eval: false
#| echo: false
scores = cross_val_score(clf, X_train_vectors, y_train, 
                         cv=4, scoring='f1_micro', n_jobs=4)

print(f"CV scores {scores}")
print(f"Mean F1 {np.mean(scores)}")
```

```{python}
#| echo: false
#| eval: false
perfs = pd.concat(
  [perfs,
  pd.DataFrame(
    [np.mean(scores)],
    index = ['Contextual Embedding'],
    columns = ["Mean F1 score"])]
).sort_values("Mean F1 score",ascending = False)
perfs
```


Verdict : on fait très légèrement mieux que la vectorisation TF-IDF.
On voit donc l'importance de tenir compte du contexte.

__Mais pourquoi, avec une méthode très compliquée, ne parvenons-nous pas à battre une méthode toute simple ?__

On peut avancer plusieurs raisons : 

- le `TF-IDF` est un modèle simple, mais toujours très performant
(on parle de _"tough-to-beat baseline"_).
- la classification d'auteurs est une tâche très particulière et très ardue,
qui ne fait pas justice aux *embeddings*. Comme on l'a dit précédemment, ces derniers se révèlent particulièrement pertinents lorsqu'il est question de similarité sémantique entre des textes (_clustering_, etc.).

Dans le cas de notre tâche de classification, il est probable que
certains mots (noms de personnage, noms de lieux) soient suffisants pour classifier de manière pertinente,
ce que ne permettent pas de capter les *embeddings* qui accordent à tous les mots la même importance.

# Aller plus loin

- Nous avons entraîné différents modèles sur l'échantillon d'entraînement par validation croisée, mais nous n'avons toujours pas utilisé l'échantillon test que nous avons mis de côté au début. Réaliser la prédiction sur les données de test, et vérifier si l'on obtient le même classement des méthodes de vectorisation.
- Faire un *vrai* split train/test : faire l'entraînement avec des textes de certains auteurs, et faire la prédiction avec des textes d'auteurs différents. Cela permettrait de neutraliser la présence de noms de lieux, de personnages, etc.
- Comparer avec d'autres algorithmes de classification qu'un SVM
- (Avancé) : fine-tuner le modèle d'embeddings contextuels sur la tâche de classification

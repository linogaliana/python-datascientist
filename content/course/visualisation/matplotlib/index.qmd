---
title: "De beaux graphiques avec python: mise en pratique"
date: 2020-09-24T13:00:00Z
draft: false
weight: 10
slug: matplotlibTP
type: book
tags:
  - visualisation
  - matplotlib
  - seaborn
categories:
  - Exercice
summary: |
  Une découverte des fonctionalités graphiques de matplotlib,
  seaborn et plotly pour représenter des statistiques
  sur les décomptes de vélo à Paris
plotly: true
---


```{python}
#| echo: false
#| output: 'asis'
#| include: true
#| eval: true

import sys
sys.path.insert(1, '../../../../') #insert the utils module
from utils import print_badges

#print_badges(__file__)
print_badges("content/course/visualisation/matplotlib.qmd")
```



La pratique de la visualisation se fera, dans ce cours, en répliquant des graphiques qu'on peut trouver sur
la page de l'*open-data* de la ville de Paris 
[ici](https://opendata.paris.fr/explore/dataset/comptage-velo-donnees-compteurs/information/?disjunctive.id_compteur&disjunctive.nom_compteur&disjunctive.id&disjunctive.name).


Ce TP vise à initier:

* Aux packages [matplotlib](https://matplotlib.org/) et
[seaborn](https://seaborn.pydata.org/) pour la construction de graphiques figés
* Au package [plotly](https://plotly.com/python/) pour les graphiques 
dynamiques, au format HTML

Nous verrons par la suite la manière de construire des cartes facilement avec
des formats équivalents.

Un sous-ensemble des données de [paris open data](https://opendata.paris.fr/explore/dataset/comptage-velo-donnees-compteurs/information/?disjunctive.id_compteur&disjunctive.nom_compteur&disjunctive.id&disjunctive.name) a été mis à disposition
sur {{< githubrepo >}} pour faciliter l'import (élimination des colonnes
qui ne nous serviront pas mais ralentissent l'import).

```{python}
import matplotlib.pyplot as plt
import seaborn as sns
```

## Premier graphique avec l'API `matplotlib` de `pandas`

{{% box status="exercise" title="Exercice" icon="fas fa-pencil-alt" %}}

**Exercice 1 : Importer les données et produire un premier graphique**

1. Importer les données de compteurs de vélos. Vous pouvez utiliser l'url <https://github.com/linogaliana/python-datascientist/raw/master/data/bike.csv>. :warning: Il s'agit de données
compressées au format `gzip`, il faut donc utiliser l'option `compression`

```{python}
#| include: false
#| echo: false

#1. Importation des données de vélo
import pandas as pd
df = pd.read_csv("https://github.com/linogaliana/python-datascientist/raw/master/data/bike.csv", compression = 'gzip')
df.head()
```

2. En premier lieu, sans se préoccuper des éléments de style ni des labels des
graphiques, reproduire les deux premiers graphiques de la
[page d'analyse des données](https://opendata.paris.fr/explore/dataset/comptage-velo-donnees-compteurs/dataviz/?disjunctive.id_compteur&disjunctive.nom_compteur&disjunctive.id&disjunctive.name):
*Les 10 compteurs avec la moyenne horaire la plus élevée* et *Les 10 compteurs ayant comptabilisés le plus de vélos*.

```{python}
#| include: false
#| echo: false

#2. Reproduction des graphiques

## Graphique 1 : Les 10 compteurs avec la moyenne horaire la plus élevée
df1 = df.groupby('Nom du compteur').agg({'Comptage horaire': "mean"}).sort_values('Comptage horaire', ascending = False).head(10)
p1 = df1.sort_values('Comptage horaire').plot(kind = "barh", figsize = (25,5), color = 'red')
p1

## Graphique 2 : Les 10 compteurs ayant comptabilisés le plus de vélos
df2 = df.groupby('Nom du compteur').agg({'Comptage horaire': "sum"}).sort_values('Comptage horaire', ascending = False).head(10)
p2 = df2.sort_values('Comptage horaire').plot(kind = "barh", figsize = (25,5), color = 'green')
p2
```

```{python}
#| echo: false
p1.get_figure()
```

```{python}
#| echo: false
p2.get_figure()
```


{{% /box %}}

{{% box status="note" title="Conseil" icon="fa fa-comment" %}}

Pour obtenir un graphique ordonné du plus grand au plus petit, il faut avoir les données ordonnées du plus petit au
plus grand. C'est bizarre mais c'est comme ça...

{{% /box %}}



On peut remarquer plusieurs éléments problématiques (par exemple les labels) mais
aussi des éléments ne correspondant pas (les titres des axes, etc.) ou 
manquants (le nom du graphique...)

Comme les graphiques produits par `pandas` suivent la logique très flexible
de `matplotlib`, il est possible de les customiser. Cependant, c'est
souvent beaucoup de travail et il peut être préférable de directement
utiliser *seaborn*, qui offre quelques arguments prêts à l'emploi.


## Utiliser directement `seaborn`

Vous pouvez repartir des deux dataframes précédents. On va suppose qu'ils se
nomment `df1` et `df2`. 

{{% box status="exercise" title="Exercice" icon="fas fa-pencil-alt" %}}

**Exercice 2 : Un peu de style !**

Il y a plusieurs manières de faire un *bar* plot en `seaborn`. La plus flexible,
c'est-à-dire celle qui permet le mieux d'interagir avec `matplotlib` est
`catplot`

1. Réinitialiser l'index des df pour avoir une colonne *'Nom du compteur'*

```{python}
#| include: false
#| echo: false

# 1. Réinitialiser les index.
df1 = df1.reset_index()
df2 = df2.reset_index()
```

2. Refaire le graphique précédent avec la fonction `catplot` de `seaborn`. Pour
contrôler la taille du graphique vous pouvez utiliser les arguments `height` et
`aspect`.

```{python}
#| include: false
#| echo: false


# 2. Graphique avec sns.catplot
g = sns.catplot(x='Comptage horaire', y='Nom du compteur', data=df1, kind = "bar", height = 5, aspect = 4, color = "red")
g
```


3. Ajouter les titres des axes et le titre du graphique pour le premier graphique

```{python}
#| include: false
#| echo: false

# 3. Ajout d'éléments de légende
g = sns.catplot(x='Comptage horaire', y='Nom du compteur', data=df1, kind = "bar", height = 5, aspect = 4, color = "red")
g.set_axis_labels('Moyenne du comptage par heure sur la période sélectionnée', 'Nom du compteur')
plt.title('Les 10 compteurs avec la moyenne horaire la plus élevée')
g
```

```{python}
#| echo: false
g.figure.get_figure()
```

4. Refaites l'exercice avec la fonction `sns.barplot`.

```{python, eval = TRUE, include = FALSE}
#| include: false
#| echo: false

# 4. Utilisation de sns.barplot
plt.figure(figsize=(20,5))
g = sns.barplot(x='Comptage horaire', y='Nom du compteur', data=df1, color = "red")
g
plt.xlabel('Moyenne du comptage par heure sur la période sélectionnée', size = 24)
plt.xlabel('Nom du compteur', size = 24)
plt.title('Les 10 compteurs avec la moyenne horaire la plus élevée', size=24)
plt.show()
```

```{python}
#| echo: false
g.figure.get_figure()
```

5. Essayez de colorer en rouge l'axe des `x`. Vous pouvez pré-définir un
style avec `sns.set_style("ticks", {"xtick.color": "red"})`

```{python, eval = TRUE, include = FALSE}
#| include: false
#| echo: false

# 5. Coloration en rouge de l'axe des x.
sns.set_style("ticks", {"xtick.color": "red"})
g = sns.catplot(x='Comptage horaire', y='Nom du compteur', data=df1, kind = "bar", height = 10, aspect = 2, color = "red")
g.set_axis_labels('Moyenne du comptage par heure sur la période sélectionnée', 'Nom du compteur')
plt.title('Les 10 compteurs avec la moyenne horaire la plus élevée')
plt.savefig('top10_sns.png', bbox_inches='tight')
```

```{python}
#| echo: false
g.figure.get_figure()
```

{{% /box %}}







{{% box status="exercise" title="Exercice" icon="fas fa-pencil-alt" %}}

**Exercice 3 : Refaire les graphiques**

1. Refaire le graphique *Les 10 compteurs ayant comptabilisé le plus de vélos*

```{python}
#| include: false
#| echo: false

# 1. Refaire le graphique : Les 10 compteurs ayant comptabilisés le plus de vélos
sns.set_style("ticks", {"xtick.color": "green"})
g = sns.catplot(x='Comptage horaire', y='Nom du compteur', data=df2, kind = "bar", height = 5, aspect = 4, color = "green")
g.set_axis_labels('La somme des vélos comptabilisés sur la période sélectionnée', 'Nom du compteur')
plt.title('Les 10 compteurs ayant comptabilisés le plus de vélos')
#plt.savefig('top10_bike.png', bbox_inches='tight')
```

```{python}
#| echo: false
g.figure.get_figure()
```

2. Les graphiques qui suivent vont nécessiter un peu d'agilité dans la gestion des dates. Il faut en effet commencer par créer une variable temporelle (vous pouvez la nommer
`timestamp`) et la transformer en variable mensuelle (grâce à
`dt.to_period('M')`) et l'appeler `month`. Vous pouvez essayer de le faire vous même ou cliquer
ci-dessous pour la solution.  

{{< spoiler text="Solution" >}}
```{python}
df['timestamp'] = pd.to_datetime(df['Date et heure de comptage'], format='%Y-%m-%dT%H:%M:%SZ', errors='coerce')
df['month'] = df['timestamp'].dt.to_period('M')
```
{{< /spoiler >}}

3. Refaire le graphique *Moyenne mensuelle des comptages vélos*. 

```{python}
#| include: false
#| echo: false

# 3. Refaire le graphique : Moyenne mensuelle des comptages vélos
sns.set_style("whitegrid")
df3 = df.groupby('month').agg({'Comptage horaire':'mean'}).reset_index()
g = sns.catplot(x='month', y='Comptage horaire', data=df3, kind = "bar", height = 5, aspect = 4, color = "yellow")
g.set_axis_labels('Date et heure de comptage', 'Moyenne mensuelle du comptage par heure sur la période sélectionnée')
plt.title('Moyenne mensuelle des comptages vélos')
#plt.savefig('top10_bike_sns.png', bbox_inches='tight')
```

```{python}
#| echo: false
g.figure.get_figure()
```

4. Refaire le graphique *Moyenne journalière des comptages vélos* (créer d'abord une variable de jour avec `.dt.day`)


```{python}
#| include: false
#| echo: false

# 4. Refaire le graphique : Moyenne journalière des comptages vélos
plt.clf()
df['day'] = df.timestamp.dt.date
df4 = df.groupby('day').agg({'Comptage horaire':'mean'}).reset_index()
ax = sns.lineplot(x='day', y='Comptage horaire', data=df4, color = "magenta")
l1 = ax.lines[0]
x1 = l1.get_xydata()[:, 0]
y1 = l1.get_xydata()[:, 1]
ax.fill_between(x1, y1, color="magenta", alpha=0.3)
```

```{python}
#| echo: false
ax.get_figure()
```

5. Refaire le graphique *Comptages vélo au cours des 7 derniers jours* (de l'échantillon)



```{python}
#| include: false
#| echo: false

# 5. Refaire le graphique : Comptages vélo au cours des 7 derniers jours
df['Date'] = pd.to_datetime(df['day'])
df['NewDate'] = pd.to_datetime(df.Date) - pd.to_timedelta(7, unit="D")
df5 = df[df.day >= (max(df['NewDate']))]
df5 = df5.groupby('Date').agg({'Comptage horaire': 'sum'}).reset_index()
df5['date_formatted'] = df5['Date'].dt.strftime('%Y-%m-%d')
g = sns.catplot(y='Comptage horaire', x='date_formatted', data=df5, kind = "bar", height = 10, aspect = 2, color = "lightblue")
g
```


```{python}
#| echo: false
g.figure.get_figure()
```


{{% /box %}}


## Des graphiques dynamiques avec `Plotly`

Le package `Plotly` est une surcouche à la librairie Javascript 
`Plotly.js` qui permet de créer et manipuler des objets graphiques de manière
très flexible afin de produire des objets réactifs sans avoir à recourir
à Javascript.

Le point d'entrée recommandé est le module `Plotly Express`
([documentation ici](https://plotly.com/python/plotly-express/)) qui offre une arborescence
riche mais néanmoins intuitive pour construire des graphiques
(objets `plotly.graph_objects.Figure`) pouvant être modifiés *a posteriori*
si besoin (par exemple pour *customiser* les axes). 

### Comment visualiser un graphique `plotly` ?

Dans un notebook Jupyter classique, les lignes suivantes de code permettent
d'afficher le résultat d'une commande `Plotly` sous un bloc de code: 

~~~python
from plotly.offline import init_notebook_mode
init_notebook_mode(connected = True)
~~~

Pour `JupyterLab`, l'extension `jupyterlab-plotly` s'avère nécessaire:

~~~python
jupyter labextension install jupyterlab-plotly
~~~

Pour les utilisateurs de `python` via l'excellent package `R` `reticulate`, il
est possible d'écrire le résultats dans un fichier `.html` et d'utiliser
`htmltools::includeHTML` pour l'afficher via `R Markdown` (les utilisateurs
de `R` trouveront bien-sûr une technique bien plus simple: utiliser
directement le package `R` `plotly`...)


### Réplication de l'exemple précédent avec `plotly`

Les modules suivants seront nécessaires pour construire des graphiques
avec `plotly`:

```{python}
import plotly
import plotly.express as px
from IPython.display import HTML #pour afficher les graphs
# dans une cellule de notebook
```


{{% box status="exercise" title="Exercice" icon="fas fa-pencil-alt" %}}

**Exercice 4 : Premier graphique avec plotly**

L'objectif est de reconstuire le premier diagramme en barre rouge avec `plotly`. 

1. Réalisez le graphique en utilisant la fonction adéquate avec `Plotly Express` et...
* Ne pas prendre le
thème par défaut mais un à fond blanc, pour avoir un résultat ressemblant
à celui proposé sur le site de l'*open-data*.
* Pour la couleur rouge,
vous pouvez utiliser l'argument `color_discrete_sequence`. 
* Ne pas oublier de nommer les axes
* Pensez à la couleur du texte de l'axe inférieur

```{python}
#| include: false
#| echo: false

# 1. Graphique avec fond blanc
fig = px.bar(df1.sort_values('Comptage horaire', ascending=True), orientation='h', x='Comptage horaire',
             y='Nom du compteur', color_discrete_sequence=["red"], template="plotly_white")

fig.update_layout(
    title='Les 10 compteurs avec la moyenne horaire la plus élevée',
    xaxis_title='Moyenne du comptage par heure sur la période sélectionnée')
fig.update_xaxes(title_font=dict(color='red'))

#HTML(fig.to_html())

# Pour inclusion dans le site web
fig.write_json("plotly1.json")
```

2. Tester un autre thème, à fond sombre. Pour les couleurs, faire un 
groupe stockant les trois plus fortes valeurs puis les autres.

```{python}
#| include: false
#| echo: false

#2. Graphique avec thème sombre
df1['top'] = df1['Comptage horaire'] > df1.sort_values('Comptage horaire', ascending=False)['Comptage horaire'][3]
fig2 = px.bar(df1.sort_values('Comptage horaire', ascending=True), orientation='h', x='Comptage horaire',
              y='Nom du compteur',  color='top', ## attention, l'argument color ne semble pas toujours fonctionner
              template="plotly_dark",
              color_discrete_sequence=['red','green'])
fig2.update_layout(
    title='Les 10 compteurs avec la moyenne horaire la plus élevée',
    xaxis_title='Moyenne du comptage par heure sur la période sélectionnée')

#HTML(fig2.to_html())

# Pour inclusion dans le site web
fig2.write_json("plotly2.json")
```

{{% /box %}}

La première question permet de construire le graphique suivant:

{{< chart data="plotly1" >}}

Alors qu'avec le thème sombre (question 2), on obtient :

{{< chart data="plotly2" >}}

# Exercices supplémentaires

https://plotly.com/python/v3/3d-network-graph/

---
title: "Partie 2: visualiser les données"
date: 2023-07-16T13:00:00Z
summary: |
  Cette partie présente les outils pour visualiser des
  données avec `Python`, qu'il s'agisse de graphiques
  figés (`matplotlib`, `seaborn`, `geoplot`...) ou de
  visualisation réactives (`plotly`, `folium`, etc.)
slug: visualisation
type: book
---

L'écosystème `Python` pour la valorisation de données est très riche et
très éclaté.
Il est
possible de consacrer des livres entiers à celui-ci. `Python` propose
de nombreuses librairies pour produire de manière rapide et relativement
simple des visualisations de données[^1]. 

Les librairies graphiques se distinguent principalement en deux familles:

- Les librairies de représentation figées. Celles-ci ont plutôt vocation à être intégrées
dans des publications figées type PDF ou documents texte. Nous présenterons 
principalement `Matplotlib` et `Seaborn` mais il en existe d'autres,
comme [`Plotnine`](https://plotnine.readthedocs.io/en/stable/).

[^1]: Pour être honnête, `Python` est sur ce point un peu moins agréable
que `R` qui bénéficie de
l'incontournable librairie [`ggplot2`](https://juba.github.io/tidyverse/08-ggplot2.html).

    N'étant pas
construite sur la [grammaire des graphiques](http://r.qcbs.ca/workshop03/book-fr/la-grammaire-des-graphiques-gg.html),
la principe librairie de graphiques en `Python` qu'est `Matplotlib` est plus fastidieuse
à utiliser que `ggplot2`. 

    [`seaborn`](https://seaborn.pydata.org/), que nous présenterons,
facilite un peu le travail de représentation graphique mais, là encore, il est difficile de faire
plus malléable et universel que `ggplot2`.

    La librairie [`plotnine`](https://plotnine.readthedocs.io/en/stable/) vise à proposer une implémentation similaire
à `ggplot` pour les utilisateurs de `Python`. Son développement est à suivre. 

Dans le domaine de la visualisation, ce cours adopte le parti pris
d'explorer quelques
librairies centrales à partir d'un nombre restreint d'exemples en
répliquant des graphiques qu'on peut trouver sur le site d'*open data* de la 
mairie de Paris. 

Seront principalement évoqués, dans la première partie :

* la représentation graphique fixe avec les librairies `matplotlib` et `seaborn`
* les graphiques réactifs avec `plotly`
* les cartes fixes avec `geopandas` ou `geoplot`
* les cartes réactives avec `folium`

Des éléments supplémentaires pour produire de belles
valorisations de données seront progressivement 
ajoutés à cette partie, notamment `ObservableHQ`.


## Références utiles

- `Datawrapper`


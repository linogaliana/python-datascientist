---
title: "Partie 2: visualiser les données"
date: 2023-07-16T13:00:00Z
categories:
  - Introduction
  - Visualisation
summary: |
  Cette partie présente les outils pour visualiser des
  données avec `Python`, qu'il s'agisse de graphiques
  figés (`matplotlib`, `seaborn`, `geoplot`...) ou de
  visualisation réactives (`plotly`, `folium`, etc.)
slug: visualisation
image: snake-chart.png
bibliography: ../../../reference.bib
---

L'écosystème `Python` pour la valorisation de données est très riche et
très éclaté.
Il est
possible de consacrer des livres entiers à celui-ci [@dale2022data].
`Python` propose
de nombreuses librairies pour produire de manière rapide et relativement
simple des visualisations de données[^1]. 

Les librairies graphiques se distinguent principalement en deux familles:

- Les librairies de __représentations figées__. Celles-ci ont plutôt vocation à être intégrées
dans des publications figées type PDF ou documents texte. Nous présenterons 
principalement `Matplotlib` et `Seaborn` mais il en existe d'autres,
comme [`Plotnine`](https://plotnine.readthedocs.io/en/stable/).
- Les librairies de __représentations dynamiques__.  Celles-ci sont adaptées à des représentations
_web_ et offrent la possibilité aux lecteurs d'agir sur la représentation graphique affichée. 
Les librairies qui proposent ces fonctionnalités reposent généralement sur `JavaScript`, l'écosystème
du développement _web_, pour lequel elles offrent un point d'entrée via `Python`. 
Nous évoquerons principalement `Plotly` et `Folium` dans cette famille mais il existe de nombreux
autres _frameworks_ dans ce domaine[^2].


[^1]: Pour être honnête, `Python` est sur ce point un peu moins agréable
que `R` qui bénéficie de
l'incontournable librairie [`ggplot2`](https://juba.github.io/tidyverse/08-ggplot2.html).

    N'étant pas
construite sur la [grammaire des graphiques](http://r.qcbs.ca/workshop03/book-fr/la-grammaire-des-graphiques-gg.html),
la principe librairie de graphiques en `Python` qu'est `Matplotlib` est plus fastidieuse
à utiliser que `ggplot2`. 

    [`seaborn`](https://seaborn.pydata.org/), que nous présenterons,
facilite un peu le travail de représentation graphique mais, là encore, il est difficile de faire
plus malléable et universel que `ggplot2`.

    La librairie [`plotnine`](https://plotnine.readthedocs.io/en/stable/) vise à proposer une implémentation similaire
à `ggplot` pour les utilisateurs de `Python`. Son développement est à suivre. 


[^2]: A cet égard, je recommande vivement de suivre l'actualité de la _dataviz_
sur la plateforme [`Observable`](https://observablehq.com/) qui tend à
rapprocher les communautés des spécialistes de la _dataviz_ et des analystes
de données. La librairie [`Plot`](https://observablehq.com/plot/) pourrait devenir
un nouveau standard dans les prochaines années, sorte d'intermédiaire
entre `ggplot` et `d3`. 

Dans le domaine de la visualisation, ce cours adopte le parti pris
d'explorer quelques
librairies centrales à partir d'un nombre restreint d'exemples en
répliquant des graphiques qu'on peut trouver sur le site d'*open data* de la 
mairie de Paris. 
La meilleure école pour la visualisation est la pratique sur des jeux de données. 

### Les applications de visualisation {.unnumbered}

Cette partie du cours se focalise sur des représentations synthétiques simples. 
Elle n'évoque pas (_encore ?_) la construction d'applications de visualisation
de données où un ensemble de graphiques se mettent à jour de manière synchrone
en fonction d'actions d'utilisateurs. 

Ceci dépasse en effet le cadre d'un cours d'introduction car cela implique 
de maîtriser des concepts plus complexes comme l'interaction entre une page
_web_ et un serveur (local). Néanmoins, j'ai déjà construit
avec [Romain Avouac](https://github.com/avouacr)
un [tutoriel 101](https://inseefrlab.github.io/funathon2023_sujet4/) très détaillé sur `Streamlit`
(permettant de créer une [application type `Yuka`](https://myyuka.lab.sspcloud.fr/))
pour une formation à l'Insee. 


## Résumé de cette partie {.unnumbered}

Cette partie est divisée en deux et chaque chapitre est lui-même
dual, selon qu'on s'intéresse aux représentations figées
ou dynamiques :

- Dans un premier temps, nous évoquerons des
représentations graphiques standards (histogrammes, diagrammes
en barre...) pour synthétiser certaines informations quantitatives ;
    + Les représentations fixes reposeront sur `Pandas`, `Matplotlib` et `Seaborn`
    + Les graphiques réactifs s'appuieront sur `Plotly`
- Dans un deuxième temps, nous présenterons les représentations
cartographiques:
    + Les cartes fixes avec `Geopandas` ou `Geoplot`
    + Les cartes réactives avec `Folium` (adaptation `Python` de la librairie `Leaflet.js`)


## Références utiles {.unnumbered}

La visualisation de données est un art qui s'apprend, au début, principalement
par la pratique. Néanmoins, il n'est pas évident de produire
des visualisations lisibles et ergonomiques
et il est utile de s'inspirer d'exemples de
spécialistes (les grands titres de presse disposent d'excellentes visualisations).

Voici quelques ressources utiles sur ces sujets:

- [`Datawrapper`](https://blog.datawrapper.de/) propose un excellent blog sur les 
bonnes pratiques de visualisation, notamment
avec les articles de [Lisa Charlotte Muth](https://lisacharlottemuth.com/). Je recommande notamment cet article sur
les [couleurs](https://blog.datawrapper.de/emphasize-with-color-in-data-visualizations/) ou
celui-ci sur les [textes](https://blog.datawrapper.de/text-in-data-visualizations/) ;
- Les [visualisations _trending_](https://observablehq.com/explore) sur `Observable` ;
- Le _New York Times_ (les rois de la _dataviz_) revient tous les ans sur les meilleures visualisations
de l'année dans la veine du [_data scrollytelling_](https://makina-corpus-blog-scrollytelling.netlify.app/). Voir par exemple la [rétrospective de l'année 2022](https://www.nytimes.com/interactive/2022/12/28/us/2022-year-in-graphics.html).


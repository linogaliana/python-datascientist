::: {.content-visible when-profile="fr"}

# Pourquoi faire du `Python` {{< fa brands python >}} pour l'analyse de données ?

Cette question est un peu différente car si `Python` est un langage commun pour découvrir la programmation informatique du fait de sa simplicité d'usage, comment se fait-il qu'il se soit imposé comme le langage dominant dans l'écosystème de la _data_ et de l'IA ?

`Python` est d'abord connu, dans le monde de la _data science_, pour avoir fourni très tôt les outils utiles à l'entraînement d'algorithmes de _machine learning_, avant même que cette approche devienne incontournable. Certes,
le succès de [`Scikit Learn`](https://scikit-learn.org/stable/), de [`Tensorflow`](https://www.tensorflow.org/) ou plus récemment de [`PyTorch`](https://pytorch.org/) dans la communauté de la *data science* ont beaucoup contribué à l'adoption de `Python`[^scikit-and-co]. Cependant,
réduire `Python` à quelques librairies de _machine learning_
serait réducteur tant il s'agit
d'un véritable couteau-suisse pour les *data scientists*,
les *social scientists*, les économistes ou plus généralement pour les praticiens de la donnée quelque soit leur champ d'application. La _success story_ de `Python`
n'est pas seulement le fait d'avoir proposé des librairies de _machine learning_ à un moment adéquat: ce
langage dispose de réels atouts pour de nouveaux praticiens de la donnée.

[^scikit-and-co]:
    [`Scikit Learn`](https://scikit-learn.org/stable/) est une librairie développée par les laboratoires de recherche publique français de l'INRIA depuis 2007. C'est un projet _open source_ depuis le début. Le projet est désormais maintenu par [`:probabl.`](https://probabl.ai/), une _startup_ dédiée à la gestion du projet _open source_ `Scikit` et tout son écosystème associé qui rassemble une partie des équipes de recherche de l'INRIA qui a a participé au développement de l'écosystème incontournable du _machine learning_.

    [`Tensorflow`](https://www.tensorflow.org/) est une librairie initialement développée par Google pour leurs besoins internes, celle-ci a été rendue publique en 2015. Bien que moins de moins en moins utilisée, notamment du fait de la popularité de `PyTorch`, cette librairie a eu une influence importante dans les années 2010 en favorisant l'usage des réseaux de neurone dans la recherche ou pour l'exploitation à des fins opérationnelles.

    [`PyTorch`](https://pytorch.org/) est une librairie développée par Meta depuis 2018 et rattachée depuis 2022 à la [_PyTorch foundation_](https://pytorch.org/foundation). Il s'agit aujourd'hui du principal _framework_ pour entraîner des réseaux de neurones.

L'intérêt de `Python` est son rôle central dans un
écosystème plus large autour d'outils puissants, flexibles et *open-source*. Il appartient, comme le langage {{< fa brands r-project >}}, à cette classe de langages pouvant servir au quotidien pour des tâches très diversifiées. Dans de nombreux domaines explorés dans ce cours, `Python` est, de loin, le langage informatique proposant l'écosystème le plus complet et le plus simple d'accès. Contrairement à d'autres langages très populaires, notamment `JavaScript` ou `Rust`, la courbe d'appentissage de `Python` est très légère et on peut rapidement être opérationnel et produire du code de qualité, si on a les bons réflexes (que ce cours, ainsi que celui de [mise en production](https://ensae-reproductibilite.github.io/), ambitionnent de donner).

En plus des projets d'IA (@nte-ia), `Python` est
incontournable dès lors qu'on désire récupérer des données par le biais d'API ou de _web scraping_[^js-webscraping], deux approches que nous explorerons dans la première partie du cours. Dans les domaines de l'analyse de données tabulaires[^nlp-cv], de la publication de contenu web ou de la production de graphiques, `Python` présente un écosystème
de plus en plus similaire à {{< fa brands r-project >}} du fait de l'investissement croissant de [`Posit`](https://posit.co/) et sa traduction en `Python` des librairies qui ont fait le succès de {{< fa brands r-project >}} dans le domaine de l'analyse de données ([ggplot](https://ggplot2.tidyverse.org/) notamment)

:::: {#nte-ia .callout-note collapse="false"}
## Pourquoi parler si peu d'IA dans un cours de `Python` {{< fa brands python >}} ?

Bien qu'une partie conséquente de ce cours évoque les problématiques de _machine learning_ et d'algorithmie, je rechigne généralement à rentrer dans la mode, particulièrement forte depuis fin 2022 et la sortie de `ChatGPT`, de tout dénommer IA.

En premier lieu car le terme est souvent mal défini, galvaudé et instrumentalisé par des acteurs qui profitent de sa charge symbolique forte, lié à notre imaginaire de la science fiction, pour vendre un produit "miracle" ou au contraire activer nos peurs.

Mais aussi car ce terme recouvre énormément de méthodes potentielles si on accepte une définition large. Les parties modélisation et NLP de ce cours, celles les plus proches du sujet IA, se concentrent sur les méthodes d'apprentissage. Si on reprend les définitions suivantes @RN2020 ou de l'[IA Act Européen](https://artificialintelligenceact.eu/fr/article/3/), on peut faire rentrer beaucoup plus que ces méthodes dans le concept d'intelligence artificielle:

> « L’étude des agents [intelligents] qui reçoivent des perceptions de l’environnement et agissent. Chacun de ces agents est mis en oeuvre par une fonction qui associe les perceptions aux actions, et nous couvrons différentes manières de de représenter ces fonctions, telles que les systèmes de production, les agents réactifs, les planificateurs logiques, les réseaux de neurones et les systèmes de gestion de l’information et les systèmes de théorie de la décision »
>
> @RN2020

> « Système basé sur une machine qui est conçu pour fonctionner avec différents niveaux d’autonomie et qui peut faire preuve d’adaptabilité après son déploiement, et qui, pour des objectifs explicites ou implicites, déduit, à partir des données qu’il reçoit, comment générer des résultats tels que des prédictions, du contenu, des recommandations ou des décisions qui peuvent influencer des environnements physiques ou virtuels »
>
> [AI Act européen](https://artificialintelligenceact.eu/fr/article/3/)

Pour en apprendre plus sur ce sujet, voici une présentation que j'ai faite sur le sujet de l'IA en 2024:

{{< details-iframe
     summary="Dérouler les _slides_ ou consulter celles-ci sur [plein écran](https://linogaliana.github.io/20241015-prez-ia-masa/#/title-slide/)."
     src="https://linogaliana.github.io/20241015-prez-ia-masa/#/title-slide/"
>}}

Enfin, la question est également pédagogique. Quand on parle d'IA depuis 2023, on pense à l'IA générative. Je pense que pour comprendre le fonctionnement de cette approche, radicalement différent d'autres paradigmes, et être capable de mettre en oeuvre des projets d'IA générative porteurs de valeur, il faut avoir des notions sur les apports et les limites de l'approche scientifique du _machine learning_. Sinon, on se retrouve à construire des usines à gaz pour des besoins simples ou à être incapables d'évaluer l'apport d'une approche générative par rapport à d'autres approches. Ce cours étant introductif, j'ai donc choisi de me concentrer sur le _machine learning_ et du NLP basique, là encore à un niveau assez introductifs mais néanmoins déjà un peu creusés, et laisser aux curieux le soin de s'autoformer sur les sujets genIA.

::::


[^js-webscraping]: Dans ces deux domaines, le concurrent le plus sérieux pour `Python`
est `Javascript`. Néanmoins, la communauté autour de ce dernier langage est plus orientée
autour des problématiques de développement web que de _data science_.

[^nlp-cv]: Les données tabulaires sont des données structurées, organisées, comme leur nom l'indique, sous forme de tableau permettant de mettre en correspondance des observations avec des variables. Cette structuration se distingue d'autres types de données plus complexes: textes libres, images, sons, vidéos... Dans le domaine des données
non structurées, `Python` est le langage d'analyse hégémonique. Dans le domaine des données tabulaires, l'avantage compétitif de `Python` est moindre, notamment par rapport à {{< fa brands r-project >}}, mais ces deux langages proposent un noyau de fonctionnalités assez similaires. Nous aurons l'occasion de régulièrement faire le parallèle entre ces deux langages lors des chapitres consacrés à la librairie `Pandas`.

Néanmoins, il ne s'agit pas, par ces éléments, de rentrer dans la guéguerre stérile  {{< fa brands r-project >}} vs `Python`.
Ces deux langages ayant beaucoup plus de points de convergence que de divergence, il est très simple de transposer les bonnes
pratiques d'un langage à l'autre. Il s'agit d'un point qui est développé plus amplement dans le cours plus avancé que je donne avec Romain Avouac en dernière année d'ENSAE : [ensae-reproductibilite.github.io/website](https://ensae-reproductibilite.github.io/website).

A terme, les data scientists et chercheurs en sciences sociales ou en économie utiliseront de manière presque indifférente, et en alternance, {{< fa brands r-project >}} ou `Python`. Ce cours présentera ainsi régulièrement des analogies avec {{< fa brands r-project >}} pour aider les
personnes découvrant `Python`, mais connaissant déjà bien {{< fa brands r-project >}}, à mieux comprendre certains messages.
:::

:::: {.content-visible when-profile="en"}
# Why use `Python` {{< fa brands python >}} for data analysis?

This question is slightly different: if `Python` is already a popular language for learning programming due to its ease of use, how did it also become the dominant language in the _data_ and AI ecosystem?

Python first gained traction in the _data science_ world for offering tools to train _machine learning_ algorithms, even before such approaches became mainstream. Of course, the success of libraries like [`Scikit-Learn`](https://scikit-learn.org/stable/), [`TensorFlow`](https://www.tensorflow.org/), and more recently [`PyTorch`](https://pytorch.org/), played a major role in `Python`'s adoption by the *data science* community[^scikit-and-co-en]. However, reducing `Python` to a handful of _machine learning_ libraries would be overly simplistic. It is truly a Swiss Army knife for *data scientists*, social scientists, economists, and data practitioners of all kinds. Its success is not only due to offering the right tools at the right time, but also because the language itself offers real advantages for newcomers to data work.

[^scikit-and-co-en]:
    [`Scikit-Learn`](https://scikit-learn.org/stable/) is a library developed since 2007 by French public research labs at INRIA. Open source from the outset, it is now maintained by [`:probabl.`](https://probabl.ai/), a startup created to manage the `Scikit` ecosystem, bringing together some of the INRIA research teams behind the core of the modern _machine learning_ stack.

    [`TensorFlow`](https://www.tensorflow.org/) was developed internally at Google and made public in 2015. Although now less widely used - partly due to the rise of `PyTorch` - it played a major role in popularizing neural networks in both research and production during the 2010s.

    [`PyTorch`](https://pytorch.org/) was developed by Meta starting 2018 and has been governed by the [_PyTorch Foundation_](https://pytorch.org/foundation) since 2022. It is now the most widely used framework to train neural networks.

What makes `Python` appealing is its central role in a broader ecosystem of powerful, flexible, and open-source tools. Like {{< fa brands r-project >}}, it belongs to a category of languages suitable for everyday use across a wide variety of tasks. In many of the fields covered in this course, `Python` has by far the richest and most accessible ecosystem. Unlike other popular languages such as `JavaScript` or `Rust`, it has a very gentle learning curve, allowing users to write high-quality code quickly - provided they learn the right habits, which this course (and the companion course on [production workflows](https://ensae-reproductibilite.github.io/)) aims to instill.

Beyond AI projects[^nte-ia-en], `Python` is also indispensable for retrieving data via APIs or through _web scraping_[^js-webscraping-en], two techniques introduced early in the course. In areas like tabular data analysis[^nlp-cv-en], web publishing or data visualization, `Python` now offers an ecosystem comparable to {{< fa brands r-project >}}, thanks in part to growing investment from [`Posit`](https://posit.co/), which has ported many of {{< fa brands r-project >}}'s most successful libraries—such as [ggplot](https://ggplot2.tidyverse.org/) to `Python`.

::: {.callout-note collapse="true" #nte-ia-en}
## Why discuss AI so little in a `Python` {{< fa brands python >}} course?

While a significant portion of this course covers _machine learning_ and related algorithms, I tend to resist the current trend - especially strong since the release of `ChatGPT` in late 2022 - of labeling everything as "AI".

First, because the term is vague, overused, and often exploited for marketing purposes, capitalizing on its symbolic power drawn from science fiction to sell miracle solutions or stoke fear.

Second, because the term "AI" covers a vast range of possible methods, depending on how broadly we define it. The sections on modeling and NLP in this course, which are the closest to the AI field, focus on learning-based methods. But as definitions from @RN2020-en or the [European AI Act](https://artificialintelligenceact.eu/fr/article/3/) show, artificial intelligence encompasses much more:

> The study of [intelligent] agents that perceive their environment and act upon it. Each such agent is implemented by a function that maps perceptions to actions. We study different ways to define this function, such as production systems, reactive agents, logical planners, neural networks, and decision-theoretic systems.
>
> @RN2020-en

> "AI system" means a machine-based system designed to operate with varying levels of autonomy and capable of adapting after deployment. It infers, based on its inputs, how to generate outputs—such as predictions, content, recommendations, or decisions—that can influence physical or virtual environments.
>
> [European AI Act](https://artificialintelligenceact.eu/fr/article/3/)

For more on this topic, see a presentation I gave in 2024 (in French):

{{< details-iframe
summary="Scroll the _slides_ or open in [full screen](https://linogaliana.github.io/20241015-prez-ia-masa/#/title-slide/)."
src="https://linogaliana.github.io/20241015-prez-ia-masa/#/title-slide/"
>}}

Finally, there’s also a pedagogical reason. Since 2023, "AI" has largely become synonymous with generative AI. But to understand how this radically different paradigm works - and to implement meaningful, value-driven generative AI projects - one must first understand the foundations and limitations of the _machine learning_ approach. Otherwise, there’s a risk of building overly complex solutions for simple problems or misjudging the value of generative models compared to more traditional methods. Since this is an introductory course, I’ve chosen to focus on _machine learning_ and introductory NLP, deep enough to be meaningful, while leaving it to the curious to explore generative AI further on their own.
::::

[^js-webscraping-en]: In the domains of API access and _web scraping_, `JavaScript` is `Python`'s most serious competitor. However, its community is more focused on web development than on _data science_.

[^nlp-cv-en]: Tabular data refers to structured data organized in tables that map observations to variables. This structure contrasts with unstructured data like free text, images, audio, or video. In unstructured data analysis, `Python` dominates. For tabular data, `Python` advantage is less clear - especially compared to {{< fa brands r-project >}} - but both languages now offer similar capabilities. We will regularly draw parallels between them in chapters on the `Pandas` library.

That said, this course does not aim to stir up the sterile debate between {{< fa brands r-project >}} and `Python`. The two languages share far more than they differ, and best practices are often transferable between them. This idea is explored more deeply in the advanced course I co-teach with Romain Avouac ([ensae-reproductibilite.github.io/website](https://ensae-reproductibilite.github.io/website)).

In practice, data scientists and researchers in social sciences or economics increasingly use {{< fa brands r-project >}} and `Python` interchangeably. This course will frequently draw analogies between the two, to help learners already familiar with {{< fa brands r-project >}} transition smoothly to `Python`.

:::

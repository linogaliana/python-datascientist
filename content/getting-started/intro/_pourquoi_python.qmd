::: {.content-visible when-profile="fr"}
# Pourquoi faire du `Python` {{< fa brands python >}} ?

`Python`, dont le logo assez reconnaissable prend la forme de {{< fa brands python >}},
est un langage qui a déjà plus de trente ans
mais qui a connu, au cours de la décennie 2010, une
nouvelle jeunesse  du fait de l'engouement autour de
la _data science_.

`Python`, plus que tout autre
langage informatique, réunit des communautés aussi
diverses que des statisticiens, des développeurs,
des gestionnaires
d'applications ou d'infrastructures informatiques,
des lycéens - `Python` est au programme du bac français
depuis quelques années - ou des chercheurs
dans des champs à la fois théoriques et appliqués.

Contrairement à beaucoup de langages informatiques qui fédèrent
une communauté assez homogène, `Python` est parvenu à réunir
largement grâce à quelques principes centraux : la lisibilité
du langage, la simplicité à utiliser des modules,
la simplicité à l'associer à des langages plus performants
pour certaines tâches données, l'énorme volume de documentation
disponible en ligne...
Être le deuxième meilleur langage pour réaliser telle ou telle
tâche
peut ainsi être une source de succès lorsque la concurrence ne dispose
pas d'un éventail aussi large d'avantages.

Le succès de `Python`, de par sa nature de
langage couteau-suisse, est indissociable
de l'émergence du profil du _data scientist_, profil
capable de s'intégrer à différents niveaux dans la valorisation
de données.
@davenport2012data, dans la _Harvard Business Review_,
ont ainsi pu parler du _"boulot le plus sexy du 21e siècle"_
et ont pu, dix ans plus tard, faire un panorama complet de l'évolution
des compétences attendues d'un _data scientist_ dans
la même revue [@davenport2022data]. Ce ne sont d'ailleurs pas que les
_data scientists_ qui ont vocation à pratiquer `Python` ; dans le halo
des emplois autour de la donnée (_data scientist_, _data engineer_, _ML engineer_...),
`Python` fait office de tour de Babel permettant la communication entre ces
différents profils interdépendants.

La richesse de `Python` permet de l'utiliser dans toutes les phases du traitement de la donnée, de sa récupération et structuration à partir de
sources diverses à sa valorisation.
Par le prisme de la _data science_, nous verrons que `Python` est un très bon candidat pour assister les _data scientists_ dans tous les aspects du travail quotidien leur permettant de tirer de la valeur de gisements hétérogènes de données. Ce cours a néanmoins l'ambition, peut-être illusoire, d'être plus qu'un énième cours d'introduction au langage `Python`: il s'agit plutôt d'un cours d'introduction à la _data science_ s'appuyant sur `Python`. En fait, apprendre `Python` est un prétexte pour apprendre à avoir les bons réflexes quand on est confronté à un jeu de données.

Ce cours introduit différents outils qui permettent de mettre en relation grâce à `Python` des données à des concepts théoriques issus de la statistique ou des sciences économiques et sociales. Néanmoins, ce cours va au-delà d'une simple introduction au langage et revient régulièrement sur les apports, mais aussi les limites, du langage pour répondre à des besoins opérationnels ou scientifiques.
:::

::: {.content-visible when-profile="en"}
# Why `Python` ?

`Python` whose recognizable logo appears as {{< fa brands python >}}, is a language that’s been around for over thirty years. But it was in the 2010s that it experienced a major resurgence, driven by the growing popularity of _data science_.

More than any other language, `Python` brings together a wide range of communities: statisticians, application developers, IT infrastructure managers, high school students (it has been part of the French baccalaureate curriculum for several years), and researchers in both theoretical and applied fields.

Unlike many programming languages that cater to relatively homogeneous communities, `Python` has succeeded in uniting diverse users thanks to a few key principles: its readable syntax, the simplicity of using modules, the ease of integration with more powerful languages for specific tasks, and the vast amount of online documentation. Sometimes, being the second-best tool for a task—while offering a broader set of advantages—can be the key to success.

`Python` success story is closely tied to the rise of the _data scientist_ role, a profile capable of working across the entire data processing pipeline. In the _Harvard Business Review_, @davenport2012data famously called it "the sexiest job of the 21st century." A decade later, he and his co-authors provided a full update on the evolving expectations for _data scientists_ [@davenport2022data].

But it’s not only _data scientists_ who need to use `Python`. In the broader ecosystem of data-related professions—_data scientists_, _data engineers_, _ML engineers_, and more—`Python` serves as a kind of Tower of Babel, enabling collaboration among interdependent roles.

This course introduces various tools that use `Python` to connect data with theoretical concepts from statistics and the economic and social sciences. However, it goes beyond a simple introduction to the language: it regularly reflects on both the strengths and the limitations of `Python` in meeting operational and scientific needs.
:::

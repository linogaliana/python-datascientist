---
title: "Avoir un environnement Python fonctionnel pour la data science"
title-en: "A functional Python environment for data science"
echo: false
description: |
    Ce chapitre introduit les bases de l'environnement `Python` pour la _data science_ en mettant l'accent sur la modularité du langage et l'utilisation des _notebooks_ `Jupyter`. Il présente les éléments essentiels pour configurer un environnement Python fonctionnel, explique les avantages des IDE comme `VSCode`, et propose une prise en main des _notebooks_ interactifs. Ce chapitre aborde également la gestion des erreurs et l'importance de la formation continue en `Python`, en fournissant des ressources utiles pour rester à jour dans cet écosystème dynamique.
description-en: |
    This chapter introduces the basics of the `Python` environment for _data science_, focusing on the modularity of the language and the use of `Jupyter` _notebooks_. It presents the essentials for setting up a functional Python environment, explains the advantages of IDEs such as `VSCode`, and offers a hands-on introduction to interactive _notebooks_. The chapter also discusses error handling and the importance of ongoing training in `Python`, providing useful resources for staying up to date in this dynamic ecosystem.
---


::: {.content-visible when-profile="fr"}
:::: {.tip}
## Objet de ce chapitre

- Exposer les enjeux liés à la modularité de `Python` ;
- Introduire à l'environnement quotidien de travail des _data scientists_ à savoir le _notebook_ ;
- Illustrer l'utilisation des _notebooks_ dans le cadre de ce cours ; 
- Présenter la démarche à adopter quand on rencontre une erreur ;
- Comprendre les enjeux d'une formation continue en `Python` et découvrir quelques bonnes ressources pour cela.
::::
:::

::: {.content-visible when-profile="en"}
:::: {.tip}
## Objective of This Chapter

- Expose the issues related to the modularity of `Python`;
- Introduce the daily working environment of _data scientists_, namely the _notebook_;
- Illustrate the use of _notebooks_ within the framework of this course;
- Present the approach to take when encountering an error;
- Understand the importance of ongoing training in `Python` and discover some good resources for it.
::::

:::


# Introduction

::: {.content-visible when-profile="fr"}

La richesse des langages _open-source_ vient de la possibilité
d'utiliser des _packages_
développés par des spécialistes. `Python` est particulièrement
bien doté dans le domaine. Pour caricaturer, on lit parfois
que `Python` est le deuxième meilleur langage pour toutes les
tâches, ce qui en fait le meilleur langage. 

En effet, la malléabilité de `Python` fait qu'on peut
l'aborder de manière très différentes
selon que l'on est plutôt _SysAdmin_, développeur web ou 
_data scientist_. C'est ce dernier profil qui va ici nous
intéresser.

Cette richesse est néanmoins un défi pour se lancer dans 
l'apprentissage de `Python` ou la réutilisation de codes
écrits par d'autres personnes. Les 
langages statistiques
propriétaires sont dans un modèle _top-down_, où, une fois une licence acquise,
il suffit d'installer le logiciel et suivre la documentation écrite par 
l'entreprise développeuse pour avancer. Dans les langages _open source_, le fonctionnement sera plutôt _bottom up_: l'écosystème est enrichi par des
contributions et de la documentation issue de divers horizons. Plusieurs manières de faire la même chose coexistent et cela fait parti du travail
de prendre le temps avant de choisir la meilleure approche.

Il existe principalement deux manières d'utiliser `Python` pour la _data science_[^wasm]:

1. __Installation locale__ : [Installer le logiciel `Python`](https://www.python.org/downloads/) sur votre machine, configurer un environnement adapté (généralement par le biais d'[`Anaconda`](https://www.anaconda.com/download)), et utiliser un logiciel de développement, tel que [`Jupyter`](https://jupyter.org/) ou [`VSCode`](https://code.visualstudio.com/), pour écrire et exécuter du code `Python`. Nous reviendrons dans la prochaine section sur ces trois niveaux d'abstraction. 
2. __Utilisation d'un environnement en ligne__ : Accéder à un environnement 
`Python` préconfiguré via votre navigateur, hébergé sur une machine distante. C'est cette machine qui exécutera le code que vous éditez depuis votre navigateur. Cette méthode est particulièrement recommandée pour les débutants ou pour ceux qui ne souhaitent pas se soucier de la configuration du système. 

La deuxième approche est liée à des services _cloud_. Dans le cadre de ce cours, comme cela sera expliqué ultérieurement, nous proposons deux solutions: le `SSPCloud`, un _cloud_ développé par l'administration française et mis à disposition gratuitement aux étudiants, chercheurs et agents publics ou `Google Colab`. 

Les deux méthodes sont décrites succinctement ci-dessous. La méthode d'installation locale est présentée pour introduire des notions utiles, mais n'est pas détaillée car elle peut être complexe et sujette à des problèmes de configuration. Si vous choisissez cette voie, préparez-vous à rencontrer des difficultés techniques et des configurations parfois obscures, nécessitant souvent des recherches fastidieuses pour résoudre des problèmes que vous n'auriez probablement pas rencontrés dans un environnement en ligne.

[^wasm]: Une troisième manière d'utiliser `Python`, encore en développement, s'appuie sur une technologie appelée _WebAssembly_. Cette approche permet d'exécuter du code `Python` directement dans le navigateur, offrant une expérience d'exécution locale sans nécessiter d'installation complexe.

:::

::: {.content-visible when-profile="en"}

The richness of _open-source_ languages comes from the ability
to use _packages_
developed by specialists. `Python` is particularly
well-endowed in this area. To caricature, it is sometimes said
that `Python` is the second-best language for all tasks, which makes it the best language.

Indeed, the malleability of `Python` means that it can be
approached in very different ways
depending on whether you are a _SysAdmin_, a web developer, or a 
_data scientist_. It is this latter profile that will interest us here.

However, this richness poses a challenge when starting to
learn `Python` or reusing code
written by others. Proprietary statistical
languages operate in a _top-down_ model, where, once a license is acquired,
you simply install the software and follow the documentation provided by 
the developing company to proceed. In _open source_ languages, the approach is more _bottom up_: the ecosystem is enriched by contributions and documentation from various sources. Several ways of doing the same thing coexist, and it is part of the work to take the time to choose the best approach.

There are primarily two ways to use `Python` for _data science_[^wasm]:

1. __Local installation__: [Install the `Python` software](https://www.python.org/downloads/) on your machine, configure a suitable environment (usually via [`Anaconda`](https://www.anaconda.com/download)), and use a development tool, such as [`Jupyter`](https://jupyter.org/) or [`VSCode`](https://code.visualstudio.com/), to write and execute `Python` code. We will revisit these three levels of abstraction in the next section.
2. __Using an online environment__: Access a preconfigured `Python` environment via your browser, hosted on a remote machine. This machine will execute the code you edit from your browser. This method is particularly recommended for beginners or for those who do not want to deal with system configuration.

The second approach is related to _cloud_ services. In the context of this course, as will be explained later, we offer two solutions: `SSPCloud`, a _cloud_ developed by the French administration and provided free of charge to students, researchers, and public officials, or `Google Colab`.

The two methods are briefly described below. The local installation method is presented to introduce useful concepts but is not detailed as it can be complex and prone to configuration issues. If you choose this route, be prepared to encounter technical difficulties and sometimes obscure configurations, often requiring tedious searches to resolve problems that you would probably not have encountered in an online environment.

[^wasm]: A third way to use `Python`, still under development, relies on a technology called _WebAssembly_. This approach allows executing `Python` code directly in the browser, offering a local execution experience without requiring complex installation.

:::


::: {.content-visible when-profile="fr"}
# Les ingrédients pour avoir un environnement `Python` fonctionnel

Comme évoqué précédemment, l'utilisation de `Python` en local pour la data science repose sur trois éléments principaux : l'interpréteur `Python`, un environnement virtuel et un environnement de développement intégré (IDE). Chacun de ces composants joue un rôle complémentaire dans le processus de développement.
:::

::: {.content-visible when-profile="en"}
# Ingredients for a functional `Python` environment

As mentioned earlier, using `Python` locally for data science relies on three main elements: the `Python` interpreter, a virtual environment, and an integrated development environment (IDE). Each of these components plays a complementary role in the development process.
:::


::: {.content-visible when-profile="fr"}

## L'interpréteur `Python`

Il s'agit du langage de programmation lui-même. Installer `Python` sur votre machine est la première étape essentielle, car cela fournit l'interpréteur nécessaire pour exécuter votre code `Python`. Cette installation définit la version de `Python` utilisée. A ce stade, ce n'est que le langage de base et un outil en ligne de commande.
:::

::: {.content-visible when-profile="en"}

## `Python` Interpreter

This refers to the programming language itself. Installing `Python` on your machine is the essential first step, as it provides the interpreter needed to run your `Python` code. At this stage, it is only the base language and a command-line tool.
:::


::: {.content-visible when-profile="fr"}
:::: {.note}
## Illustration

Si vous avez accès à une ligne de commande dans un environnement où `Python` est disponible et bien configuré (notamment ajouté au [`PATH`](https://fr.wikipedia.org/wiki/Variable_d%27environnement#%3CPATH%3E_pour_l'emplacement_des_ex%C3%A9cutables)), vous pouvez déjà faire du `Python` par le biais de la ligne de commande[^vscode]

```{python}
#| file: Ligne de commande Linux
#| filename: Ligne de commande Linux
#| eval: false
#| echo: true
python --version
python -c "print(3+3)"
echo "print(3+3)" > example.py && python example.py && rm example.py #<1>
```
1. Un exemple d'utilisation de création de fichier `example.py` depuis la ligne de commande et d'utilisation de celui-ci par la ligne de commande. Créer des fichiers depuis la ligne de commande n'étant pas un mode de travail réaliste, nous aurons l'occasion d'expliquer comment créer des fichiers par le biais d'un éditeur de texte. 

::::
:::

::: {.content-visible when-profile="en"}
:::: {.note}
## Illustration

If you have access to a command line in an environment where `Python` is available and properly configured (including being added to the [`PATH`](https://en.wikipedia.org/wiki/Environment_variable#%3CPATH%3E_for_executable_locations)), you can already run `Python` through the command line[^vscode-en]

```{python}
#| file: Linux terminal
#| filename: Linux terminal
#| eval: false
#| echo: true
python --version
python -c "print(3+3)"
echo "print(3+3)" > example.py && python example.py && rm example.py #<1>
```
1. An example of creating a file `example.py` from the command line and using it from the command line. Since creating files from the command line is not a realistic working mode, we will explain how to create files using a text editor.

::::
:::

::: {.content-visible when-profile="fr"}

[^vscode]: Vous n'avez pas accès directement à la ligne de commande avec `Google Colab`, seulement de manière détournée par le biais de l'interface du _notebook_ en faisant précéder la commande d'un `!`. Sur les services `VSCode` du `SSPCloud`, l'interface recommandée pour ce cours, vous avez accès à une ligne de commande en cliquant sur `☰ > Terminal > New Terminal`. Sur une installation personnelle de `VSCode`, ce sera en haut dans le menu `Terminal > New Terminal`.

:::

::: {.content-visible when-profile="en"}

[^vscode-en]: You do not have direct access to the command line with `Google Colab`, only indirectly through the notebook interface by prefixing commands with `!`. On `VSCode` services provided by `SSPCloud`, the recommended interface for this course, you can access a command line by clicking `☰ > Terminal > New Terminal`. On a personal installation of `VSCode`, this will be at the top in the `Terminal > New Terminal` menu.

:::


::: {.content-visible when-profile="fr"}

## L'environnement `Python` 

Le langage `Python` est construit, comme les autres langages _open source_, sous forme de socle de base et de _packages_ supplémentaires. Ce sont ces derniers qui forment l'écosystème foisonnant et dynamique de `Python` et qui permettent à ce langage d'être si confortable.

`Python` est un langage _open source_ ce qui signifie que n'importe qui peut proposer la réutilisation de son code sous la forme de _package_. Il existe donc des plateformes centralisant des packages communautaires. La principale est [`PyPI`](https://pypi.org/) dans l'écosystème `Python`. 

On parle d'environnement pour désigner l'ensemble des packages disponibles à  `Python` pour effectuer des traitements spécifiques. `Python` n'est pas installé avec l'ensemble des _packages_ disponibles sur [`PyPI`](https://pypi.org/), c'est donc à vous d'enrichir votre environnement en installant de nouveaux _packages_ lorsque vous en avez besoin. 

Si votre `Python` est correctement configuré, vous pourrez installer de nouveaux packages avec `pip install`[^repro-ensae]. Nous allons utiliser de nombreux _packages_ dans ce cours, cette commande reviendra donc régulièrement.

Ensuite, une fois installé, un script doit déclarer un _package_ avant de l'utiliser (sinon `Python` ne saura pas où chercher telle ou telle fonction). C'est l'objet de la commande `import`. Par exemple `import pandas as pd` permet d'utiliser le package `Pandas` (à condition qu'il soit déjà installé) 

[^repro-ensae]: Plus d'éléments sur le sujet des environnements sont disponibles dans le cours de 3e année ["Mise en production de projets data science"](https://ensae-reproductibilite.github.io/website/), notamment les différents types d'environnements virtuels (`conda` ou `venv`) et les implications de ceux-ci sur les chaînes informatiques en `Python`.

:::

::: {.content-visible when-profile="en"}

## `Python` Environment

The `Python` language is built, like other open-source languages, with a basic core and additional packages. It is these packages that form the rich and dynamic ecosystem of `Python`, making it such a comfortable language.

`Python` is an open-source language, which means that anyone can offer their code for reuse in the form of a package. There are platforms that centralize community packages, with the main one in the `Python` ecosystem being [`PyPI`](https://pypi.org/).

An environment refers to the collection of packages available to `Python` for performing specific tasks. `Python` is not installed with all the packages available on [`PyPI`](https://pypi.org/), so it is up to you to enrich your environment by installing new packages as needed.

If your `Python` is correctly configured, you can install new packages using `pip install`[^repro-ensae]. We will use many packages in this course, so this command will come up regularly.

Once installed, a script must declare a package before using it (otherwise `Python` won't know where to find specific functions). This is the purpose of the `import` command. For example, `import pandas as pd` allows you to use the `Pandas` package (provided it is already installed).

[^repro-ensae]: More details on environments are available in the 3rd-year course ["Deployment of Data Science Projects"](https://ensae-reproductibilite.github.io/website/), including different types of virtual environments (`conda` or `venv`) and their implications for `Python` computing chains.

:::


::: {.content-visible when-profile="fr"}

:::: {.note}
## Illustration

Voici une illustration de la manière dont fonctionne la gestion de _packages_ en `Python`

```{python}
#| file: Ligne de commande Linux
#| filename: Ligne de commande Linux
#| eval: false
#| echo: true
python -c "import geopandas as gpd" #<1>
pip install geopandas
python -c "import geopandas as gpd ; print(gpd.GeoDataFrame)" #<2>
```
1. Cela devrait provoquer une erreur si `GeoPandas` n'est pas installé
`ModuleNotFoundError: No module named 'geopandas'`
2. L'erreur devrait avoir disparue

::::
:::

::: {.content-visible when-profile="en"}

:::: {.note}
## Illustration

Here is an illustration of how package management works in `Python`

```{python}
#| file: Linux terminal
#| filename: Linux terminal
#| eval: false
#| echo: true
python -c "import geopandas as gpd" #<1>
pip install geopandas
python -c "import geopandas as gpd ; print(gpd.GeoDataFrame)" #<2>
```
1. This should cause an error if `GeoPandas` is not installed
`ModuleNotFoundError: No module named 'geopandas'`
2. The error should be gone

::::
:::


::: {.content-visible when-profile="fr"}
:::: {.important}
Il est déconseillé d'utiliser des importations globales sous la forme `from pkg import *`. Par exemple, prenons deux modules qui proposent une fonction `sqrt`:
::::
:::

::: {.content-visible when-profile="en"}
:::: {.important}
It is discouraged to use global imports like `from pkg import *`. For example, consider two modules that provide a `sqrt` function:
::::
:::

```python
# Don't do that please !
from numpy import *
from math import *
sqrt([4, 3])
```

::: {.content-visible when-profile="fr"}
Ces importations globales chargent toutes les fonctions et variables des modules `numpy` et `math` dans l'espace de noms global (_namespace_), ce qui peut entraîner des conflits de nommage.

D'abord, cela peut mener à des résultats imprévisibles car si les implémentations diffèrent, comment sait-on si c'est la fonction du package `numpy` ou `math` qui a été utilisée. Ici ce sera celle du package `math`, importé en dernier, ce qui provoquera une erreur: le module `math` ne gère que des entiers, pas des vecteurs, _a contrario_ de `numpy`. 

Ensuite, cela rend le code moins lisible, car il devient difficile de savoir d'où provient chaque fonction ou variable utilisée, ce qui complique la maintenance et le débogage. 

Il donc préférable d'importer uniquement les fonctions nécessaires ou d'utiliser des alias explicites, comme import numpy as np et import math pour éviter ces problèmes.
:::

::: {.content-visible when-profile="en"}
Global imports load all functions and variables from the `numpy` and `math` modules into the global namespace, which can lead to naming conflicts.

First, this can lead to unpredictable results, as if the implementations differ, how do you know whether it’s the `numpy` or `math` package function that was used? Here, it will be the `math` package function, imported last, which will cause an error: the `math` module only handles integers, not vectors, unlike `numpy`.

Second, it makes the code less readable, as it becomes difficult to know where each function or variable used comes from, complicating maintenance and debugging.

It is therefore preferable to import only the necessary functions or use explicit aliases, such as `import numpy as np` and `import math`, to avoid these issues.
:::


```python
import numpy as np
from math import sqrt

np.sqrt([3,4])
sqrt(3)
```


::: {.content-visible when-profile="fr"}
### Environnements de développement et _notebooks_

L'utilisation de `Python` en ligne de commande est fondamentale dans le monde applicatif. Néanmoins, ce n'est pas pratique d'écrire directement son code dans la ligne de commande au quotidien. Heureusement, il existe des éditeurs adaptés qu'on appelle des IDE. Ce sont des logiciels qui offrent une interface pratique pour écrire et exécuter votre code. Ils offrent des fonctionnalités permettant de simplifier la lecture et l'écriture de code: coloration syntaxique, autocomplétion, débuggage, diagnostics de qualité formelle du code, etc. 

Les _notebooks_ `Jupyter`[^jupyter] offrent une interface interactive qui permet d'écrire du code `Python`, de tester celui-ci et d'avoir le résultat en dessous de l'instruction plutôt que dans une console séparée. Les _notebooks_ `Jupyter` sont incontournables dans les domaines de la _data science_ et de l'enseignement et de la recherche car ils simplifient grandement l'exploration et le tâtonnement. 

Ils permettent, dans un même document, de combiner du texte au format `Markdown` (un format de texte au balisage plus léger que `HTML` ou $\LaTeX$), du code `Python`, et du code `HTML` pour les visualisations et animations.


[^jupyter]: `Jupyter` est né du projet `IPython`, un environnement interactif pour `Python` développé par Fernando Pérez en 2001. En 2014, le projet a évolué pour supporter d'autres langages de programmation en plus de Python, ce qui a conduit à la création du projet Jupyter. Le nom "Jupyter" est un acronyme qui fait référence aux trois langages principaux qu'il supporte : `Julia`, `Python` et `R`. Les _notebooks_ `Jupyter` sont incontournables dans les domaines de la _data science_ et de l'enseignement et de la recherche car ils simplifient grandement l'exploration et le tâtonnement. 

![Illustration du principe d'un _notebook_ `Jupyter`. Source: [Cours de Python pour les sciences de la vie (Paris 18) par Patrick Fuchs et Pierre Poulain](https://python.sdv.u-paris.fr/)](https://python.sdv.u-paris.fr/img/jupyter-exemple.png)

A l'origine, le logiciel `Jupyter` était le seul offrant ces fonctionnalités interactives. Il existe maintenant d'autres manières de bénéficier des avantages du _notebook_ tout en ayant un IDE aux fonctionnalités plus complètes que `Jupyter`. C'est pour cette raison qu'il est plus pratique, en 2024, d'utiliser `VSCode`[^vscode-python], un éditeur de code généraliste mais proposant d'excellentes fonctionnalités en `Python`, que `Jupyter`. Pour en savoir plus sur l'utilisation des _notebooks_ dans VSCode, se référer à la [documentation officielle](https://code.visualstudio.com/docs/datascience/jupyter-notebooks).
:::

::: {.content-visible when-profile="en"}
### Development environments and notebooks

Using `Python` via the command line is fundamental in the application world. However, it's impractical to write your code directly in the command line on a daily basis. Fortunately, there are suitable editors known as IDEs. These are software that provide a convenient interface for writing and executing your code. They offer features to simplify code reading and writing: syntax highlighting, autocompletion, debugging, formal code quality diagnostics, etc.

`Jupyter` notebooks[^jupyter] offer an interactive interface that allows you to write `Python` code, test it, and see the result below the instruction rather than in a separate console. `Jupyter` notebooks are essential in the fields of data science and education and research because they greatly simplify exploration and experimentation.

They allow you to combine text in `Markdown` format (a lighter markup text format than `HTML` or $\LaTeX$), `Python` code, and `HTML` code for visualizations and animations in a single document.

[^jupyter]: `Jupyter` originated from the `IPython` project, an interactive environment for `Python` developed by Fernando Pérez in 2001. In 2014, the project evolved to support other programming languages in addition to Python, leading to the creation of the Jupyter project. The name "Jupyter" is an acronym referring to the three main languages it supports: `Julia`, `Python`, and `R`. `Jupyter` notebooks are crucial in the fields of data science and education and research because they greatly simplify exploration and experimentation.

![Illustration of a Jupyter notebook concept. Source: [Python Course for Life Sciences (Paris 18) by Patrick Fuchs and Pierre Poulain](https://python.sdv.u-paris.fr/)](https://python.sdv.u-paris.fr/img/jupyter-exemple.png)

Initially, `Jupyter` was the only software offering these interactive features. Now, there are other ways to benefit from notebook advantages while having an IDE with more comprehensive features than `Jupyter`. For this reason, as of 2024, it is more practical to use `VSCode`[^vscode-python], a general-purpose code editor but offering excellent features in `Python`, than `Jupyter`. For more information on using notebooks in VSCode, refer to the [official documentation](https://code.visualstudio.com/docs/datascience/jupyter-notebooks).
:::

::: {.content-visible when-profile="fr"}
# Utilisation des _notebooks_ dans le cadre de ce cours

La meilleure manière de découvrir `Python` ou les _notebooks_ étant la pratique, tous les chapitres de ce cours seront exécutables au format _notebook_. Les boutons suivants permettent d'ouvrir ce chapitre sous format _notebook_ dans différents environnements:
:::

::: {.content-visible when-profile="en"}
# Using notebooks in the context of this course

The best way to learn `Python` or notebooks is through practice, so all chapters of this course will be executable in notebook format. The following buttons allow you to open this chapter in notebook format in different environments:
:::


{{< badges
    printMessage="false"
>}}



::: {.content-visible when-profile="fr"}
1. Sur `Github` {{< fa brands github >}}, seulement pour visualiser et télécharger ceux-ci car `Github` n'est pas un environnement de développement et d'utilisation des _notebooks_ ;
2. Sur le [`SSPCloud`](https://datalab.sspcloud.fr/home), un _cloud_ moderne développé par l'[Insee](https://www.insee.fr/fr/accueil) et mis à disposition gratuitement aux agents publics, aux étudiants, aux chercheurs et aux agents des instituts de statistiques publiques européens. Comme ceci est mentionné dans l'encadré dédié, c'est le point d'entrée aux _notebooks_ recommandé pour toutes les personnes ayant la possibilité de l'utiliser. Les _notebooks_ peuvent y être ouverts via `VSCode` (approche recommandée) ou `Jupyter`, un accès à une ligne de commande avec les droits adéquats pour l'installation de _package_ est garanti dans ces deux interfaces. A ces caractéristiques déjà désirables pour découvrir `Python`, s'ajoutent d'autres fonctionnalités utiles pour l'apprentissage en continu et qui sont plus explorées en troisième année dans le cours de ["Mise en production de projets data science"](https://ensae-reproductibilite.github.io/website/): accès à de la GPU gratuitement, interfaçage avec d'autres technologies _cloud_ comme un système de stockage objet, etc.
3. [Google Colab](https://colab.google/) est un service en ligne gratuit, basé sur l'interface de `Jupyter`, qui permet d'accéder à des ressources `Python` exécutées par les serveurs de Google. 

:::

::: {.content-visible when-profile="en"}
1. On `Github` {{< fa brands github >}}, only for viewing and downloading notebooks as `Github` is not a development and execution environment for notebooks;
2. On [`SSPCloud`](https://datalab.sspcloud.fr/home), a modern cloud platform developed by [Insee](https://www.insee.fr/fr/accueil) and provided free of charge to public agents, students, researchers, and agents of European public statistical institutes. As mentioned in the dedicated box, this is the recommended entry point for notebooks for anyone who has access to it. Notebooks can be opened there via `VSCode` (recommended approach) or `Jupyter`, with command-line access and appropriate rights for package installation guaranteed in both interfaces. In addition to these already desirable features for discovering `Python`, other useful features for continuous learning are explored in more detail in the third year in the course on ["Deploying Data Science Projects"](https://ensae-reproductibilite.github.io/website/): free GPU access, interfacing with other cloud technologies such as object storage systems, etc.
3. [Google Colab](https://colab.google/) is a free online service based on the `Jupyter` interface that provides access to `Python` resources run on Google's servers.

:::


::: {.content-visible when-profile="fr"}
:::: {.important}
## Environnement recommandé pour ce cours

Pour les agents de la fonction publique, ou
les élèves des écoles partenaires, il est recommandé
de privilégier le bouton `SSPCloud` qui est
une infrastructure _cloud_ moderne, puissante et flexible
développée par l'Insee et accessible à l'url
[https://datalab.sspcloud.fr](https://datalab.sspcloud.fr/home)[^portail-formation].

[^portail-formation]: Pour les utilisateurs de cette infrastructure, les _notebooks_ de ce cours
sont également listés, parmi de nombreuses autres
ressources de qualité, sur la
[page `Formation`](https://www.sspcloud.fr/formation)

Comme nous l'avons évoqué, `VSCode` est un environnement bien plus complet que `Jupyter` pour l'utilisation des _notebooks_.
::::
:::

::: {.content-visible when-profile="en"}
:::: {.important}
## Recommended environment for this course

For public sector employees or students from partner schools, it is recommended to use the `SSPCloud` button, which is a modern, powerful, and flexible cloud infrastructure developed by Insee and accessible at [https://datalab.sspcloud.fr](https://datalab.sspcloud.fr/home)[^portail-formation].

[^portail-formation]: For users of this infrastructure, the notebooks for this course are also listed, along with many other high-quality resources, on the [Training page](https://www.sspcloud.fr/formation).

As mentioned, `VSCode` is a much more complete environment than `Jupyter` for using notebooks.

::::
:::


::: {.content-visible when-profile="fr"}

# Exercice pour découvrir les fonctionnalités basiques d'un _notebook_

Tous les chapitres de ce cours sont pensés sous la forme d'un fil conducteur visant à répondre à une problématique avec des exercices intermédiaires faisant office de jalons. Ils sont facilement identifiables sous la forme suivante:

:::: {.exercise}
Un exemple de boite exercice
::::

L'exercice suivant a pour but de vous familiariser avec l'utilisation des _notebooks_ `Jupyter` en `Python` si vous ne connaissez pas cet environnement. Il illustre des fonctionnalités de base comme l'écriture de code, l'exécution de cellules, l'ajout de texte, et la visualisation de données.

Pour cela, ouvrir ce chapitre dans un environnement adapté aux _notebooks_: [^compte]

[^compte]: Pour utiliser [https://datalab.sspcloud.fr](https://datalab.sspcloud.fr/home) si vous y êtes éligibles, vous devez vous créer un compte.

:::

::: {.content-visible when-profile="en"}

# Exercise to Explore Basic Notebook Features

All the chapters of this course are designed as a narrative aiming to address a problem with intermediate exercises serving as milestones. They are easily identifiable in the following format:

:::: {.exercise}
An example of an exercise box
::::

The following exercise aims to familiarize you with using `Jupyter` notebooks in `Python` if you are not familiar with this environment. It illustrates basic features such as writing code, executing cells, adding text, and visualizing data.

To do this, open this chapter in a notebook-compatible environment: [^compte]

[^compte]: To use [https://datalab.sspcloud.fr](https://datalab.sspcloud.fr/home) if you are eligible, you need to create an account.

:::

{{< badges
    printMessage="false"
>}}

::: {.content-visible when-profile="fr"}
:::: {.exercise}
## Exercice 1

1. Sous cet exercice, créer une cellule de code. Ecrivez un code `Python` qui affiche la phrase : _"Bienvenue dans un notebook !"_ puis exécutez la cellule. Modifiez votre code et re-exécutez.
2. En cherchant sur internet, ajoutez une nouvelle cellule et changez son type en "Markdown". Dans cette cellule, écrivez un court texte comportant les éléments suivants:
    + Un petit bout en italique
    + Une liste non ordonnée
    + Un titre de niveau 2 (équivalent du `<h2>` en HTML ou `\subsection` en $\LaTeX$ )
    + Une équation
3. Créez une cellule de code, n'importe où dans le document. Créez une liste de nombres entiers allant de 1 à 10 sous le nom `numbers`. Affichez cette liste.
4. Créez une nouvelle cellule de code. Utilisez le code sous cet exercice pour générer une figure.
::::
:::

::: {.content-visible when-profile="en"}
:::: {.exercise}
## Exercise 1

1. Under this exercise, create a code cell. Write a `Python` code that displays the phrase: _"Welcome to a notebook!"_ and then execute the cell. Modify your code and re-run it.
2. By searching online, add a new cell and change its type to "Markdown". In this cell, write a short text including the following elements:
    + A small part in italics
    + An unordered list
    + A level 2 heading (equivalent to `<h2>` in HTML or `\subsection` in $\LaTeX$)
    + An equation
3. Create a code cell anywhere in the document. Create a list of integers from 1 to 10 named `numbers`. Display this list.
4. Create a new code cell. Use the code below this exercise to generate a figure.
::::
:::


```{python}
#| output: false
print("Bienvenue dans Jupyter Notebook !")
```

```{python}
#| output: false
import numpy as np

# List from 1 to 10
numbers = np.arange(1, 11)

# Showing the list
numbers
```

::: {.content-visible when-profile="fr"}
La figure obtenue à la fin de l'exercice ressemblera à celle-ci:
:::

::: {.content-visible when-profile="en"}
The figure obtained at the end of the exercise will look like this:
:::


```{python}
import matplotlib.pyplot as plt

# Création du graphique
plt.plot(numbers, numbers**2)

# Ajout de titres et labels
plt.title('Example of matplotlib output within a notebook')
plt.xlabel('Number')
plt.ylabel('Squared number')

# Affichage du graphique
plt.show()
```

::: {.content-visible when-profile="fr"}
# Comment résoudre les erreurs ?

La survenue d'erreurs est tout à fait naturelle et attendue lors de l'apprentissage (et même après !) d'un langage informatique. La résolution de ces erreurs est vraiment l'occasion de comprendre comment fonctionne le langage et de devenir autonome dans sa pratique de celui-ci. Voici une proposition d'étapes à suivre (dans cet ordre) pour résoudre une erreur :

1. __Bien lire les *logs*__, i.e. les sorties renvoyées par `Python` en cas d'erreur. Souvent, elles sont informatives et peuvent contenir directement la réponse.
2. __Chercher sur internet__ (de préférence en Anglais et sur `Google`). Par exemple, donner le nom de l'erreur et une partie informative du message d'erreur renvoyé par `Python` permet généralement de bien orienter les résultats vers ce que l'on cherche.
3. Souvent, la __recherche amènera vers le forum [Stackoverflow](https://stackoverflow.com/)__, destiné à cet usage. Si l'on ne trouve vraiment pas la réponse à son problème, on peut poster sur `Stackoverflow` en détaillant bien le problème rencontré de sorte à ce que les utilisateurs du forum puissent le reproduire et trouver une solution.
4. Les __documentations officielles__ (de `Python` et des différents packages) sont souvent un peu arides, mais généralement exhaustives. Elles permettent notamment de bien comprendre la manière d'utiliser les différents objets. Par exemple pour les fonctions : ce qu'elles attendent en entrée, les paramètres et leur type, ce qu'elles renvoient en sortie, etc.
5. Les IA assistantes de code (`ChatGPT`, `Github Copilot`) peuvent être d'une grande aide. En faisant attention à leur donner des instructions adaptées et en vérifiant le code produit pour éviter les hallucinations, on peut gagner beaucoup de temps grâce à celles-ci.
:::

::: {.content-visible when-profile="en"}
# How to solve errors?

Encountering errors is completely natural and expected when learning (and even after!) a programming language. Resolving these errors is a great opportunity to understand how the language works and to become self-sufficient in its use. Here is a suggested sequence of steps to follow (in this order) to resolve an error:

1. __Read the *logs* carefully__, i.e., the outputs returned by `Python` in case of an error. Often, they are informative and may contain the answer directly.
2. __Search on the internet__ (preferably in English and on `Google`). For example, providing the error name and part of the informative error message returned by `Python` usually helps to orient the search results towards what you are looking for.
3. Often, the __search will lead you to the [Stackoverflow](https://stackoverflow.com/) forum__, which is designed for this purpose. If you really can't find the answer to your problem, you can post on `Stackoverflow` by detailing the problem encountered so that forum users can reproduce it and find a solution.
4. __Official documentation__ (of `Python` and various packages) is often a bit dry but generally exhaustive. It helps to understand how to use the various objects. For example, for functions: what they expect as input, parameters and their types, what they return as output, etc.
5. Code assistant AIs (`ChatGPT`, `Github Copilot`) can be very helpful. By providing them with appropriate instructions and verifying the generated code to avoid hallucinations, you can save a lot of time with these tools.
:::


::: {.content-visible when-profile="fr"}
:::: {.exercise}
## Exercice 2: apprendre en se trompant

Corriger la cellule ci-dessous pour qu'elle ne produise plus d'erreur

:::: 
:::

::: {.content-visible when-profile="en"}
:::: {.exercise}
## Exercise 2: Learning by Making Mistakes

Fix the cell below so that it no longer produces an error

:::: 
:::



```{python}
#| error: true
#| echo: true
pd.DataFrame(x)
```

::: {.content-visible when-profile="fr"}
# Continuer à se former après ce cours

## Contenu sur ce site

Ce cours est une introduction à la _data science_ avec `Python`. La majorité du contenu de celui-ci est donc pensée pour un public qui découvre le sujet ou désire découvrir une thématique plus précise dans ce domaine, par exemple le NLP.

Cependant, ce cours est aussi le fruit de mon expérience passée de bientôt une décennie 👴 à faire du `Python` sur des sources de données, des infrastructures et des problématiques variées: il est donc assez éditorialisé ("_opinionated_" diraient les anglo-saxons) pour mettre en avant certaines exigences attendues des _data scientists_ mais aussi vous éviter de vous fourvoyer dans les mêmes eaux tumultueuses que moi par le passé.

Ce cours propose aussi du contenu permettant d'aller au-delà des premiers mois d'apprentissage. Tout le contenu de ce site web n'est pas enseigné, certaines sections d'approfondissement voire certains chapitres ont vocation à servir à l'apprentissage continu et peuvent être consommés plusieurs mois après la découverte de ce cours.

[pythonds.linogaliana.fr](https://pythonds.linogaliana.fr) évolue constamment pour tenir compte de l'écosystème `Python` mouvant. Les _notebooks_ resteront disponibles au-delà du semestre d'enseignement.
:::

::: {.content-visible when-profile="en"}
# How to continue learning after this course

## Website content

This course is an introduction to data science with `Python`. Most of the content is designed for those who are new to the subject or wish to explore a specific topic in this field, such as NLP.

However, this course also reflects my nearly decade-long experience 👴 with `Python` on various data sources, infrastructures, and problems: it is thus somewhat editorialized ("_opinionated_" as the Anglo-Saxons would say) to highlight certain expectations for data scientists and to help you avoid the same pitfalls I encountered in the past.

This course also provides content to go beyond the first few months of learning. Not all the content on this site is taught; some advanced sections and even chapters are intended for continuous learning and can be used several months after discovering this course.

[pythonds.linogaliana.fr](https://pythonds.linogaliana.fr) is continuously updated to reflect the evolving `Python` ecosystem. The notebooks will remain available beyond the teaching semester.
:::


::: {.content-visible when-profile="fr"}
## La veille technique

L'écosystème riche et foisonnant de `Python` a comme contrepartie qu'il faut rester attentif à ses évolutions pour ne pas voir son capital humain vieillir et ainsi devenir _has-been_. Alors qu'avec des langages monolithiques comme `SAS` ou `Stata` on pouvait se permettre de ne faire de veille technique mais seulement consulter la documentation officielle, avec `Python` ou `R` c'est impossible. Ce cours lui-même est en évolution continue, ce qui est assez exigeant 😅, pour épouser les évolutions de l'écosystème.

Les réseaux sociaux comme `Linkedin` ou `X` ou les agrégateurs de contenu comme `medium` ou `towardsdatascience` proposent des _posts_ de qualité hétérogène mais il n'est pas inutile d'avoir une veille technique continue sur ces sujets : au bout d'un certain temps, cela peut permettre de dégager les nouvelles tendances. Le site `realpython` propose généralement de très bon posts, complets et pédagogiques. `Github` peut être utile pour la veille technique: en allant voir les projets à la mode, on peut voir les tendances qui émergeront prochainement.

En ce qui concerne les ouvrages papiers, certains sont de très bonne qualité. Cependant, il convient de faire attention à la date de mise à jour de ceux-ci : la vitesse d'évolution de certains éléments de l'écosystème peut les périmer très rapidement. Il est généralement plus utile de bénéficier d'un _post_ non exhaustif mais plus récent qu'un ouvrage complet.
:::

::: {.content-visible when-profile="en"}
## Technical monitoring

The rich and thriving `Python` ecosystem means you must stay attentive to its developments to avoid becoming outdated. While with monolithic languages like `SAS` or `Stata` one could rely solely on official documentation without ongoing technical monitoring, this is not feasible with `Python` or `R`. This course itself is continuously evolving, which is quite demanding 😅, to keep up with the ecosystem changes.

Social networks like `LinkedIn` or `X`, and content aggregators like `Medium` or `Towards Data Science`, offer posts of varying quality, but maintaining continuous technical monitoring on these topics is not useless: over time, it can help identify new trends. The site `Real Python` generally provides very good posts, comprehensive and educational. `Github` can also be useful for technical monitoring: by looking at trending projects, you can see the trends that will emerge soon.

Regarding printed books, some are of very high quality. However, it is important to pay attention to their update dates: the rapid pace of some elements of the ecosystem can render them outdated very quickly. It is generally more useful to have a recent but non-exhaustive post than a complete but outdated book.
:::


::: {.content-visible when-profile="fr"}
:::: {.tip}
## Les newsletters utiles

Il existe de nombreuses _newsletters_ très bien faites pour suivre régulièrement les évolutions de l'écosystème de la _data science_. C'est, pour ma part, ma principale source d'informations fraiches.

S'il ne fallait s'abonner qu'à une _newsletter_, la plus importante à suivre est celle de Andrew Ng, [_"The batch"_](https://www.deeplearning.ai/the-batch/). Réflexions sur les avancées académiques des réseaux de neurone, évolution de l'écosystème logiciel et institutionnel, cette _newsletter_ est une excellente _food for thoughts_.

La [_newsletter_ de Christophe Bleffari](https://www.blef.fr/) à destination des _data engineers_ mais qui intéressera également beaucoup les _data scientists_ présente souvent du très bon contenu. 
La [_newsletter_ de Rami Krispin (_data scientist à Apple_)](https://www.linkedin.com/newsletters/7230119265956216833/) est également très utile, notamment quand on travaille régulièrement non seulement avec `Python` mais aussi avec {{< fa brands r-project >}} et `Quarto`, le logiciel de publication reproductible.

Assez technique, les vidéos d'[Andrej Karpathy](https://www.youtube.com/andrejkarpathy?cbrd=1) (_data scientist_ à OpenAI) sont très instructives pour comprendre le fonctionnement des modèles de langage à l'état de l'art. De même, le contenu produit par [Sebastian Raschka](https://magazine.sebastianraschka.com/?hide_intro_popup=true) permet de connaître les dernières avancées dans la recherche sur le sujet.

Les _newsletters_ généralistes de [_Data Elixir_](https://dataelixir.com/) et [Alpha Signal](https://alphasignal.ai/) permettent de connaître les dernières nouveautés. Dans le domaine de la dataviz, celles de [_DataWrapper_](https://blog.datawrapper.de/newsletter/) permettent de bénéficier d'un contenu accessible sur le sujet.
::::
:::

::: {.content-visible when-profile="en"}
:::: {.tip}
## Useful newsletters

There are many well-crafted newsletters for regularly tracking developments in the data science ecosystem. For me, they are the primary source of fresh information.

If you had to subscribe to only one newsletter, the most important to follow is Andrew Ng's, [_"The Batch"_](https://www.deeplearning.ai/the-batch/). It provides reflections on academic advances in neural networks, evolution of the software and institutional ecosystem, making it an excellent _food for thought_.

The [_newsletter by Christophe Bleffari_](https://www.blef.fr/), aimed at data engineers but also of great interest to data scientists, often presents very good content. The [_newsletter by Rami Krispin (data scientist at Apple)_](https://www.linkedin.com/newsletters/7230119265956216833/) is also very useful, especially when working regularly with both `Python` and {{< fa brands r-project >}} and `Quarto`, the reproducible publishing software.

Fairly technical, the videos by [Andrej Karpathy](https://www.youtube.com/andrejkarpathy?cbrd=1) (data scientist at OpenAI) are very informative for understanding the workings of state-of-the-art language models. Similarly, content produced by [Sebastian Raschka](https://magazine.sebastianraschka.com/?hide_intro_popup=true) helps in knowing the latest advancements in research on the topic.

General newsletters from [_Data Elixir_](https://dataelixir.com/) and [Alpha Signal](https://alphasignal.ai/) keep you updated with the latest news. In the field of data visualization, newsletters from [_DataWrapper_](https://blog.datawrapper.de/newsletter/) provide accessible content on the subject.
::::
:::

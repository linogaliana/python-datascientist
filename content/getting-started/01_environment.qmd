---
title: "Avoir un environnement Python fonctionnel pour la data science"
title-en: "A functional Python environment for data science"
echo: false
description: |
    Ce chapitre introduit les bases de l'environnement `Python` pour la _data science_ en mettant l'accent sur la modularité du langage et l'utilisation des _notebooks_ `Jupyter`. Il présente les éléments essentiels pour configurer un environnement Python fonctionnel, explique les avantages des IDE comme `VSCode`, et propose une prise en main des _notebooks_ interactifs. Ce chapitre aborde également la gestion des erreurs et l'importance de la formation continue en `Python`, en fournissant des ressources utiles pour rester à jour dans cet écosystème dynamique.
description-en: |
    This chapter introduces the basics of the `Python` environment for _data science_, focusing on the modularity of the language and the use of `Jupyter` _notebooks_. It presents the essentials for setting up a functional Python environment, explains the advantages of IDEs such as `VSCode`, and offers a hands-on introduction to interactive _notebooks_. The chapter also discusses error handling and the importance of ongoing training in `Python`, providing useful resources for staying up to date in this dynamic ecosystem.
---

:::: {.tip}
## Objet de ce chapitre

- Exposer les enjeux liés à la modularité de `Python` ;
- Introduire à l'environnement quotidien de travail des _data scientists_ à savoir le _notebook_ ;
- Illustrer l'utilisation des _notebooks_ dans le cadre de ce cours ; 
- Présenter la démarche à adopter quand on rencontre une erreur ;
- Comprendre les enjeux d'une formation continue en `Python` et découvrir quelques bonnes ressources pour cela.
::::


# Introduction

La richesse des langages _open-source_ vient de la possibilité
d'utiliser des _packages_
développés par des spécialistes. `Python` est particulièrement
bien doté dans le domaine. Pour caricaturer, on lit parfois
que `Python` est le deuxième meilleur langage pour toutes les
tâches, ce qui en fait le meilleur langage. 

En effet, la malléabilité de `Python` fait qu'on peut
l'aborder de manière très différentes
selon que l'on est plutôt _SysAdmin_, développeur web ou 
_data scientist_. C'est ce dernier profil qui va ici nous
intéresser.

Cette richesse est néanmoins un défi pour se lancer dans 
l'apprentissage de `Python` ou la réutilisation de codes
écrits par d'autres personnes. Les 
langages statistiques
propriétaires sont dans un modèle _top-down_, où, une fois une licence acquise,
il suffit d'installer le logiciel et suivre la documentation écrite par 
l'entreprise développeuse pour avancer. Dans les langages _open source_, le fonctionnement sera plutôt _bottom up_: l'écosystème est enrichi par des
contributions et de la documentation issue de divers horizons. Plusieurs manières de faire la même chose coexistent et cela fait parti du travail
de prendre le temps avant de choisir la meilleure approche.

Il existe principalement deux manières d'utiliser `Python` pour la _data science_[^wasm]:

1. __Installation locale__ : [Installer le logiciel `Python`](https://www.python.org/downloads/) sur votre machine, configurer un environnement adapté (généralement par le biais d'[`Anaconda`](https://www.anaconda.com/download)), et utiliser un logiciel de développement, tel que [`Jupyter`](https://jupyter.org/) ou [`VSCode`](https://code.visualstudio.com/), pour écrire et exécuter du code `Python`. Nous reviendrons dans la prochaine section sur ces trois niveaux d'abstraction. 
2. __Utilisation d'un environnement en ligne__ : Accéder à un environnement 
`Python` préconfiguré via votre navigateur, hébergé sur une machine distante. C'est cette machine qui exécutera le code que vous éditez depuis votre navigateur. Cette méthode est particulièrement recommandée pour les débutants ou pour ceux qui ne souhaitent pas se soucier de la configuration du système. 


La deuxième approche est liée à des services _cloud_. Dans le cadre de ce cours, comme cela sera expliqué ultérieurement, nous proposons deux solutions: le `SSPCloud`, un _cloud_ développé par l'administration française et mis à disposition gratuitement aux étudiants, chercheurs et agents publics ou `Google Colab`. 

Les deux méthodes sont décrites succinctement ci-dessous. La méthode d'installation locale est présentée pour introduire des notions utiles, mais n'est pas détaillée car elle peut être complexe et sujette à des problèmes de configuration. Si vous choisissez cette voie, préparez-vous à rencontrer des difficultés techniques et des configurations parfois obscures, nécessitant souvent des recherches fastidieuses pour résoudre des problèmes que vous n'auriez probablement pas rencontrés dans un environnement en ligne.

[^wasm]: Une troisième manière d'utiliser `Python`, encore en développement, s'appuie sur une technologie appelée _WebAssembly_. Cette approche permet d'exécuter du code `Python` directement dans le navigateur, offrant une expérience d'exécution locale sans nécessiter d'installation complexe.

# Les ingrédients pour avoir un environnement `Python` fonctionnel

Comme évoqué précédemment, l'utilisation de `Python` en local pour la data science repose sur trois éléments principaux : l'interpréteur `Python`, un environnement virtuel et un environnement de développement intégré (IDE). Chacun de ces composants joue un rôle complémentaire dans le processus de développement.

## L'interpréteur `Python`

Il s'agit du langage de programmation lui-même. Installer `Python` sur votre machine est la première étape essentielle, car cela fournit l'interpréteur nécessaire pour exécuter votre code `Python`. Cette installation définit la version de `Python` utilisée. A ce stade, ce n'est que le langage de base et un outil en ligne de commande. 

::: {.note}
## Illustration
Si vous avez accès à une ligne de commande dans un environnement où `Python` est disponible et bien configuré (notamment ajouté au [`PATH`](https://fr.wikipedia.org/wiki/Variable_d%27environnement#%3CPATH%3E_pour_l'emplacement_des_ex%C3%A9cutables)), vous pouvez déjà faire du Python par le biais de la ligne de commande[^vscode] 

```{python}
#| file: Ligne de commande Linux
#| filename: Ligne de commande Linux
#| eval: false
#| echo: true
python --version
python -c "print(3+3)"
echo "print(3+3)" > example.py && python example.py && rm example.py #<1>
```
1. Un exemple d'utilisation de création de fichier `example.py` depuis la ligne de commande et d'utilisation de celui-ci par la ligne de commande. Créer des fichiers depuis la ligne de commande n'étant pas un mode de travail réaliste, nous aurons l'occasion d'expliquer comment créer des fichiers par le biais d'un éditeur de texte. 
:::

[^vscode]: Vous n'avez pas accès directement à la ligne de commande avec `Google Colab`, seulement de manière détournée par le biais de l'interface du _notebook_ en faisant précéder la commande d'un `!`. Sur les services `VSCode` du `SSPCloud`, l'interface recommandée pour ce cours, vous avez accès à une ligne de commande en cliquant sur `☰ > Terminal > New Terminal`. Sur une installation personnelle de `VSCode`, ce sera en haut dans le menu `Terminal > New Terminal`.

## L'environnement `Python` 

Le langage `Python` est construit, comme les autres langages _open source_, sous forme de socle de base et de _packages_ supplémentaires. Ce sont ces derniers qui forment l'écosystème foisonnant et dynamique de `Python` et qui permettent à ce langage d'être si confortable.

`Python` est un langage _open source_ ce qui signifie que n'importe qui peut proposer la réutilisation de son code sous la forme de _package_. Il existe donc des plateformes centralisant des packages communautaires. La principale est [`PyPI`](https://pypi.org/) dans l'écosystème `Python`. 

On parle d'environnement pour désigner l'ensemble des packages disponibles à  `Python` pour effectuer des traitements spécifiques. `Python` n'est pas installé avec l'ensemble des _packages_ disponibles sur [`PyPI`](https://pypi.org/), c'est donc à vous d'enrichir votre environnement en installant de nouveaux _packages_ lorsque vous en avez besoin. 

Si votre `Python` est correctement configuré, vous pourrez installer de nouveaux packages avec `pip install`[^repro-ensae]. Nous allons utiliser de nombreux _packages_ dans ce cours, cette commande reviendra donc régulièrement.

Ensuite, une fois installé, un script doit déclarer un _package_ avant de l'utiliser (sinon `Python` ne saura pas où chercher telle ou telle fonction). C'est l'objet de la commande `import`. Par exemple `import pandas as pd` permet d'utiliser le package `Pandas` (à condition qu'il soit déjà installé) 

[^repro-ensae]: Plus d'éléments sur le sujet des environnements sont disponibles dans le cours de 3e année ["Mise en production de projets data science"](https://ensae-reproductibilite.github.io/website/), notamment les différents types d'environnements virtuels (`conda` ou `venv`) et les implications de ceux-ci sur les chaînes informatiques en `Python`. 

::: {.note}
## Illustration

Voici une illustration de la manière dont fonctionne la gestion de _packages_ en `Python` 

```{python}
#| file: Ligne de commande Linux
#| filename: Ligne de commande Linux
#| eval: false
#| echo: true
python -c "import geopandas as gpd" #<1>
pip install geopandas
python -c "import geopandas as gpd ; print(gpd.GeoDataFrame)" #<2>
```
1. Cela devrait provoquer une erreur si `GeoPandas` n'est pas installé
`ModuleNotFoundError: No module named 'geopandas'`
2. L'erreur devrait avoir disparue

:::


::: {.important}

Il est déconseillé d'utiliser des importations globales sous la forme `from pkg import *`. Par exemple, prenons deux modules qui proposent une fonction `sqrt`:

```python
# Don't do that please !
from numpy import *
from math import *
sqrt([4, 3])
```

Ces importations globales chargent toutes les fonctions et variables des modules `numpy` et `math` dans l'espace de noms global (_namespace_), ce qui peut entraîner des conflits de nommage.

D'abord, cela peut mener à des résultats imprévisibles car si les implémentations diffèrent, comment sait-on si c'est la fonction du package `numpy` ou `math` qui a été utilisée. Ici ce sera celle du package `math`, importé en dernier, ce qui provoquera une erreur: le module `math` ne gère que des entiers, pas des vecteurs, _a contrario_ de `numpy`. 

Ensuite, cela rend le code moins lisible, car il devient difficile de savoir d'où provient chaque fonction ou variable utilisée, ce qui complique la maintenance et le débogage. 

Il donc préférable d'importer uniquement les fonctions nécessaires ou d'utiliser des alias explicites, comme import numpy as np et import math pour éviter ces problèmes.

```python
import numpy as np
from math import sqrt

np.sqrt([3,4])
sqrt(3)
```

:::

### Environnements de développement et _notebooks_

L'utilisation de `Python` en ligne de commande est fondamentale dans le monde applicatif. Néanmoins, ce n'est pas pratique d'écrire directement son code dans la ligne de commande au quotidien. Heureusement, il existe des éditeurs adaptés qu'on appelle des IDE. Ce sont des logiciels qui offrent une interface pratique pour écrire et exécuter votre code. Ils offrent des fonctionnalités permettant de simplifier la lecture et l'écriture de code: coloration syntaxique, autocomplétion, débuggage, diagnostics de qualité formelle du code, etc. 

Les _notebooks_ `Jupyter`[^jupyter] offrent une interface interactive qui permet d'écrire du code `Python`, de tester celui-ci et d'avoir le résultat en dessous de l'instruction plutôt que dans une console séparée. Les _notebooks_ `Jupyter` sont incontournables dans les domaines de la _data science_ et de l'enseignement et de la recherche car ils simplifient grandement l'exploration et le tâtonnement. 

Ils permettent, dans un même document, de combiner du texte au format `Markdown` (un format de texte au balisage plus léger que `HTML` ou $\LaTeX$), du code `Python`, et du code `HTML` pour les visualisations et animations.


[^jupyter]: `Jupyter` est né du projet `IPython`, un environnement interactif pour `Python` développé par Fernando Pérez en 2001. En 2014, le projet a évolué pour supporter d'autres langages de programmation en plus de Python, ce qui a conduit à la création du projet Jupyter. Le nom "Jupyter" est un acronyme qui fait référence aux trois langages principaux qu'il supporte : `Julia`, `Python` et `R`. Les _notebooks_ `Jupyter` sont incontournables dans les domaines de la _data science_ et de l'enseignement et de la recherche car ils simplifient grandement l'exploration et le tâtonnement. 

![Illustration du principe d'un _notebook_ `Jupyter`. Source: [Cours de Python pour les sciences de la vie (Paris 18) par Patrick Fuchs et Pierre Poulain](https://python.sdv.u-paris.fr/)](https://python.sdv.u-paris.fr/img/jupyter-exemple.png)

A l'origine, le logiciel `Jupyter` était le seul offrant ces fonctionnalités interactives. Il existe maintenant d'autres manières de bénéficier des avantages du _notebook_ tout en ayant un IDE aux fonctionnalités plus complètes que `Jupyter`. C'est pour cette raison qu'il est plus pratique, en 2024, d'utiliser `VSCode`[^vscode-python], un éditeur de code généraliste mais proposant d'excellentes fonctionnalités en `Python`, que `Jupyter`. Pour en savoir plus sur l'utilisation des _notebooks_ dans VSCode, se référer à la [documentation officielle](https://code.visualstudio.com/docs/datascience/jupyter-notebooks).

# Utilisation des _notebooks_ dans le cadre de ce cours

La meilleure manière de découvrir `Python` ou les _notebooks_ étant la pratique, tous les chapitres de ce cours seront exécutables au format _notebook_. Les boutons suivants permettent d'ouvrir ce chapitre sous format _notebook_ dans différents environnements:

{{< badges
    printMessage="false"
>}}



1. Sur `Github` {{< fa brands github >}}, seulement pour visualiser et télécharger ceux-ci car `Github` n'est pas un environnement de développement et d'utilisation des _notebooks_ ;
2. Sur le [`SSPCloud`](https://datalab.sspcloud.fr/home), un _cloud_ moderne développé par l'[Insee](https://www.insee.fr/fr/accueil) et mis à disposition gratuitement aux agents publics, aux étudiants, aux chercheurs et aux agents des instituts de statistiques publiques européens. Comme ceci est mentionné dans l'encadré dédié, c'est le point d'entrée aux _notebooks_ recommandé pour toutes les personnes ayant la possibilité de l'utiliser. Les _notebooks_ peuvent y être ouverts via `VSCode` (approche recommandée) ou `Jupyter`, un accès à une ligne de commande avec les droits adéquats pour l'installation de _package_ est garanti dans ces deux interfaces. A ces caractéristiques déjà désirables pour découvrir `Python`, s'ajoutent d'autres fonctionnalités utiles pour l'apprentissage en continu et qui sont plus explorées en troisième année dans le cours de ["Mise en production de projets data science"](https://ensae-reproductibilite.github.io/website/): accès à de la GPU gratuitement, interfaçage avec d'autres tecnologies _cloud_ comme un système de stockage objet, etc.
3. [Google Colab](https://colab.google/) est un service en ligne gratuit, basé sur l'interface de `Jupyter`, qui permet d'accéder à des ressources `Python` exécutées par les serveurs de Google. 

[^vscode-python]: Visual Studio Code (VSCode) est un éditeur de code source développé par Microsoft reposant sur le principe des extensions. Une extension officielle Python, développée directement par Microsoft, offre un support avancé pour l'autocomplétion, le débogage, l'inspection de code, etc. Cette extension intègre également des fonctionnalités dédiées à la _data science_, comme le support des _notebooks_ Jupyter et l'exécution de scripts Python dans des environnements virtuels. La polyvalence de VSCode, associée à un socle important d'extensions communautaires, certaines génériques, d'autres spécifiques à `Python`, fait de ce logiciel le plus pratique pour travailler au quotidien. 


::: {.important}
## Environnement recommandé pour ce cours

Pour les agents de la fonction publique, ou
les élèves des écoles partenaires, il est recommandé
de privilégier le bouton `SSPCloud` qui est
une infrastructure _cloud_ moderne, puissante et flexible
développée par l'Insee et accessible à l'url
[https://datalab.sspcloud.fr](https://datalab.sspcloud.fr/home)[^portail-formation].

[^portail-formation]: Pour les utilisateurs de cette infrastructure, les _notebooks_ de ce cours
sont également listés, parmi de nombreuses autres
ressources de qualité, sur la
[page `Formation`](https://www.sspcloud.fr/formation)

Comme nous l'avons évoqué, `VSCode` est un environnement bien plus complet que `Jupyter` pour l'utilisation des _notebooks_. 

:::

# Exercice pour découvrir les fonctionnalités basiques d'un _notebook_

Tous les chapitres de ce cours sont pensés sous la forme d'un fil conducteur visant à répondre à une problématique avec des exercices intermédiaires faisant office de jalons. Ils sont facilement identifiables sous la forme suivante:

::: {.exercise}
Un exemple de boite exercice
:::

L'exercice suivant a pour but de vous familiariser avec l'utilisation des _notebooks_ `Jupyter` en `Python` si vous ne connaissez pas cet environnement. Il illustre des fonctionnalités de base comme l'écriture de code, l'exécution de cellules, l'ajout de texte, et la visualisation de données.

Pour cela, ouvrir ce chapitre dans un environnement adapté aux _notebooks_: [^compte]

[^compte]: Pour utiliser [https://datalab.sspcloud.fr](https://datalab.sspcloud.fr/home) si vous y êtes éligibles, vous devez vous créer un compte. 

{{< badges
    printMessage="false"
>}}

::: {.exercise}
## Exercice 1

1. Sous cet exercice, créer une cellule de code. Ecrivez un code `Python` qui affiche la phrase : _"Bienvenue dans un notebook !"_ puis exécutez la cellule. Modifiez votre code et re-exécutez
2. En cherchant sur internet, ajoutez une nouvelle cellule et changez son type en "Markdown". Dans cette cellule, écrivez un court texte comportant les éléments suivants:
    + Un petit bout en italique
    + Une liste non ordonnée
    + Un titre de niveau 2 (équivalent du `<h2>` en HTML ou `\subsection` en $\LaTeX$ )
    + Une équation
3. Créez une cellule de code, n'importe où dans le document. Créez une liste de nombres entiers allant de 1 à 10 sous le nom `numbers`. Affichez cette liste. 
4. Créez une nouvelle cellule de code. Utilisez le code sous cet exercice pour générer une figure.

:::

```{python}
#| output: false
print("Bienvenue dans Jupyter Notebook !")
```

```{python}
#| output: false
import numpy as np

# List from 1 to 10
numbers = np.arange(1, 11)

# Showing the list
numbers
```

La figure obtenue à la fin de l'exercice ressemblera à celle-ci:

```{python}
import matplotlib.pyplot as plt

# Création du graphique
plt.plot(numbers, numbers**2)

# Ajout de titres et labels
plt.title('Example of matplotlib output within a notebook')
plt.xlabel('Number')
plt.ylabel('Squared number')

# Affichage du graphique
plt.show()
```

# Comment résoudre les erreurs ?

La survenue d'erreurs est tout à fait naturelle et attendue lors de l'apprentissage (et même après !) d'un langage informatique. La résolution de ces erreurs est vraiment l'occasion de comprendre comment fonctionne le langage et de devenir autonome dans sa pratique de celui-ci. Voici une proposition d'étapes à suivre (dans cet ordre) pour résoudre une erreur :

1. __Bien lire les *logs*__, i.e. les sorties renvoyées par `Python` en cas d'erreur. Souvent, elles sont informatives et peuvent contenir directement la réponse.
2. __Chercher sur internet__ (de préférence en Anglais et sur `Google`). Par exemple, donner le nom de l'erreur et une partie informative du message d'erreur renvoyé par `Python` permet généralement de bien orienter les résultats vers ce que l'on cherche. 
3. Souvent, la __recherche amènera vers le forum [Stackoverflow](https://stackoverflow.com/)__, destiné à cet usage. Si l'on ne trouve vraiment pas la réponse à son problème, on peut poster sur `Stackoverflow` en détaillant bien le problème rencontré de sorte à ce que les utilisateurs du forum puissent le reproduire et trouver une solution.
4. Les __documentations officielles__ (de `Python` et des différents packages) sont souvent un peu arides, mais généralement exhaustives. Elles permettent notamment de bien comprendre la manière d'utiliser les différents objets. Par exemple pour les fonctions : ce qu'elles attendent en entrée, les paramètres et leur type, ce qu'elles renvoient en sortie, etc.
5. Les IA assistantes de code (`ChatGPT`, `Github Copilot`) peuvent être d'une grande aide. En faisant attention à leur donner des instructions adaptées et en vérifiant le code produit pour éviter les hallucinations, on peut gagner beaucoup de temps grâce à celles-ci. 

::: {.exercise}
## Exercice 2: apprendre en se trompant

Corriger la cellule ci-dessous pour qu'elle ne produise plus d'erreur

:::

```{python}
#| error: true
#| echo: true
pd.DataFrame(x)
```

# Continuer à se former après ce cours

## Contenu sur ce site

Ce cours est une introduction à la _data science_ avec `Python`. La majorité du contenu de celui-ci est donc pensée pour un public qui découvre le sujet ou désire découvrir une thématique plus précise dans ce domaine, par exemple le NLP. 

Cependant, ce cours est aussi le fruit de mon expérience passée de bientôt une décennie 👴 à faire du `Python` sur des sources de données, des infrastructures et des problématiques variées: il est donc assez éditorialisé ("_opinionated_" diraient les anglo-saxons) pour mettre en avant certaines exigences attendues des _data scientists_ mais aussi vous éviter de vous fourvoyer dans les mêmes eaux tumultueuses que moi par le passé. 

Ce cours propose aussi du contenu permettant d'aller au-delà des premiers mois d'apprentissage. Tout le contenu de ce site web n'est pas enseigné, certaines sections d'approfondissement voire certains chapitres ont vocation à servir à l'apprentissage continu et peuvent être consommés plusieurs mois après la découverte de ce cours.

[pythonds.linogaliana.fr](https://pythonds.linogaliana.fr) évolue constamment pour tenir compte de l'écosystème `Python` mouvant. Les _notebooks_ resteront disponibles au-delà du semestre d'enseignement.  


## La veille technique

L'écosystème riche et foisonnant de `Python` a comme contrepartie
qu'il faut rester attentif à ses évolutions pour ne pas 
voir son capital humain vieillir et ainsi devenir _has-been_.
Alors qu'avec des langages 
monolithiques comme
`SAS` ou `Stata` on pouvait se permettre de ne faire de vieille technique
mais seulement consulter la documentation officielle, avec `Python` 
ou `R` c'est impossible. Ce cours lui-même est en évolution continue, ce
qui est assez exigeant 😅, pour épouser les évolutions
de l'écosystème. 

Les réseaux sociaux comme `Linkedin` ou `X` ou les agrégateurs
de contenu comme `medium` ou `towardsdatascience` proposent des _posts_
de qualité hétérogène mais il n'est pas inutile d'avoir une veille technique continue sur ces sujets : au bout d'un certain temps, cela peut permettre de dégager les nouvelles tendances. Le site
`realpython` propose généralement de très bon posts, complets et 
pédagogiques. `Github` peut être utile pour la veille technique: en allant voir les projets à la mode, on peut voir les tendances qui émergeront prochainement. 

En ce qui concerne les ouvrages papiers, certains sont de très bonne qualité. Cependant, il convient de faire attention à la date de mise à jour de ceux-ci : la vitesse d'évolution de certains éléments de l'écosystème peut les périmer très rapidement. Il est généralement plus utile de bénéficier d'un _post_ non exhaustif mais plus récent qu'un ouvrage complet. 

::: {.tip}
## Les newsletters utiles

Il existe de nombreuses _newsletters_ très bien faites pour suivre régulièrement les évolutions de l'écosystème de la _data science_. C'est, pour ma part, ma principale source d'informations fraiches. 

S'il ne fallait s'abonner qu'à une _newsletter_, la plus importante à suivre est celle de Andrew Ng, [_"The batch"_](https://www.deeplearning.ai/the-batch/). Réflexions sur les avancées académiques des réseaux de neurone, évolution de l'écosystème logiciel et institutionnel, cette _newsletter_ est une excellente _food for thoughts_. 

La [_newsletter_ de Christophe Bleffari](https://www.blef.fr/) à destination des _data engineers_ mais qui intéressera également beaucoup les _data scientists_ présente souvent du très bon contenu. 
La [_newsletter_ de Rami Krispin (_data scientist à Apple_)](https://www.linkedin.com/newsletters/7230119265956216833/) est également très utile, notamment quand on travaille régulièrement non seulement avec `Python` mais aussi avec {{< fa brands r-project >}} et `Quarto`, le logiciel de publication reproductible. 

Assez technique, les vidéos d'[Andrej Karpathy](https://www.youtube.com/andrejkarpathy?cbrd=1) (_data scientist_ à OpenAI) sont très instructives pour comprendre le fonctionnement des modèles de langage à l'état de l'art. De même, le contenu produit par [Sebastian Raschka](https://magazine.sebastianraschka.com/?hide_intro_popup=true) permet de connaître les dernières avancées dans la recherche sur le sujet.

Les _newsletters_ généralistes de [_Data Elixir_](https://dataelixir.com/) et [Alpha Signal](https://alphasignal.ai/) permettent de connaître les dernières nouveautés. Dans le domaine de la dataviz, celles de [_DataWrapper_](https://blog.datawrapper.de/newsletter/) permettent de bénéficier d'un contenu accessible sur le sujet.
:::
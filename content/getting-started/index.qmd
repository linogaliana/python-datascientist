---
title: Introduction
description: |
  Cette introduction propose quelques éléments de
  révision des concepts de base en `Python` et
  présente l'écosystème `Python` que nous allons
  découvrir tout au long de ce cours.
slug: introduction
type: book
weight: 10
image: https://ensae-reproductibilite.github.io/website/egg.jpg
bibliography: "../../reference.bib"
---

# Introduction

::: {.note}

Ce cours rassemble l'ensemble du contenu du cours 
__*Python {{< fa brands python >}} pour la data science*__ que je donne 
à l'[ENSAE](https://www.ensae.fr/courses/python-pour-le-data-scientist-pour-leconomiste/) depuis 2018.
Ce cours était auparavant donné par [Xavier Dupré](http://www.xavierdupre.fr/app/ensae_teaching_cs/helpsphinx3/td_2a.html). Ce sont environ 170 élèves qui suivent ce cours chaque année. L'année 2024 a permis l'arrivée progressive d'une version anglophone équivalente à
la version française visant à servir de cours d'introduction à la _data science_ pour les instituts statistiques européens
grâce à un [appel à projets européen](https://cros.ec.europa.eu/dashboard/aiml4os). 

Ce site ([pythonds.linogaliana.fr/](https://pythonds.linogaliana.fr)) est le point d'entrée principal du cours. Il centralise
l'ensemble des contenus faits en cours dans le cadre de travaux pratiques ou proposés en complément à des fins de formation en continue. 
Ce cours est _open source_
et j'accueille avec plaisir les suggestions d'amélioration sur [`Github` {{< fa brands github >}}](https://github.com/linogaliana/python-datascientist) ou par le biais des commentaires en bas de chaque page. `Python` étant un langage vivant et très dynamique, les pratiques évoluent et ce cours s'adapte en continu pour tenir compte de l'écosystème mouvant de la _data science_, en essayant néanmoins de distinguer les évolutions pérennes des pratiques des effets de mode.  

Quelques éléments supplémentaires sont disponibles dans
les [slides d'introduction](https://slidespython.linogaliana.fr/).
Des éléments plus avancés sont présents dans un autre cours consacré 
à la mise en production de projets _data science_
que je donne avec Romain Avouac
en dernière année de l'ENSAE ([ensae-reproductibilite.github.io/website](https://ensae-reproductibilite.github.io/website)).

:::


`Python`, dont le logo assez reconnaissable prend la forme de {{< fa brands python >}},
est un langage qui a déjà plus de trente ans
mais qui a connu, au cours de la décennie 2010, une
nouvelle jeunesse du fait de l'engouement pour
la _data science_.

`Python`, plus que tout autre
langage informatique, réunit des communautés aussi
diverses que des statisticiens, des développeurs, 
des gestionnaires
d'applications ou d'infrastructures informatiques,
des lycéens - `Python` est au programme du bac français 
depuis quelques années - ou des chercheurs 
dans des champs à la fois théoriques et appliqués.

Contrairement
à beaucoup de langages informatiques qui fédèrent
une communauté assez homogène, `Python` est parvenu à réunir
largement grâce à quelques principes centraux : la lisibilité 
du langage, la simplicité à utiliser des modules,
la simplicité à l'associer à des langages plus performants
pour certaines tâches données, l'énorme volume de documentation
disponible en ligne...
Être le deuxième meilleur langage pour réaliser telle ou telle
tâche
peut ainsi être une source de succès lorsque la concurrence ne dispose
pas d'un éventail aussi large d'avantages.

Le succès de `Python`, de par sa nature de 
langage couteau-suisse, est indissociable 
de l'émergence du profil du _data scientist_, individu
capable de s'intégrer à différents niveaux dans la valorisation
de données. 
@davenport2012data, dans la _Harvard Business Review_, 
ont ainsi pu parler du _"boulot le plus sexy du 21e siècle"_
et ont pu, dix ans plus tard, faire un panorama complet de l'évolution
des compétences attendues d'un _data scientist_ dans
la même revue [@davenport2022data]. Ce ne sont d'ailleurs pas que les
_data scientists_ qui ont vocation à pratiquer `Python` ; dans le halo 
des emplois autour de la donnée (_data scientist_, _data engineer_, _ML engineer_...),
`Python` fait office de tour de Babel permettant la communication entre ces
différents profils interdépendants. 

La richesse de `Python` permet de l'utiliser dans toutes les phases du traitement de la donnée, de sa récupération et structuration à partir de 
sources diverses à sa valorisation. 
Par le prisme de la _data science_, nous verrons que `Python` est
un très bon candidat pour assister les _data scientists_ dans tous 
les aspects du travail de données. 

Ce cours introduit différents outils qui permettent de mettre en relation
des données et des théories grâce à `Python`. Néanmoins, ce cours
va au-delà d'une simple introduction au langage et propose
des éléments plus approfondis, notamment sur les dernières 
innovations permises par la _data science_ dans les méthodes de travail.

# Pourquoi faire du `Python` {{< fa brands python >}} pour l'analyse de données ?

`Python` est d'abord connu, dans le monde de la _data science_, pour avoir
fourni très tôt les outils utiles à l'entraînement d'algorithmes
de _machine learning_ sur plusieurs types de données. Certes, 
le succès de [`Scikit Learn`](https://scikit-learn.org/stable/)[^scikit],
de [`Tensorflow`](https://www.tensorflow.org/)[^tf] ou plus
récemment de [`PyTorch`](https://pytorch.org/)[^pytorch] dans la communauté
de la *data science* ont beaucoup contribué à l'adoption de `Python`. Cependant,
réduire `Python` à quelques librairies de _machine learning_
serait réducteur tant il s'agit
d'un véritable couteau-suisse pour les *data scientists*,
les *social scientists* ou les économistes. La _success story_ de `Python` 
n'est pas seulement le fait d'avoir proposé des librairies de _machine learning_ à un moment adéquat: ce 
langage dispose de réels atouts pour de nouveaux praticiens de la donnée.  

[^scikit]: Librairie développée par les laboratoires de recherche publique français de l'INRIA depuis 2007.
[^tf]: Librairie initialement utilisée par Google pour leurs besoins internes, celle-ci a été rendue publique en 2015. Bien que moins de moins en moins utilisée, cette librairie a eu une influence importante dans les années 2010 en favorisant l'usage des réseaux de neurone dans la recherche ou pour l'exploitation à des fins opérationnelles. 
[^pytorch]: Librairie développée par Meta depuis 2018 et rattachée depuis 2022 à la [_PyTorch foundation_](https://pytorch.org/foundation).

L'intérêt de `Python` est son rôle central dans un
écosystème plus large autour d'outils puissants, flexibles et *open-source*.
Il appartient, comme le langage {{< fa brands r-project >}}, à cette classe
de langages pouvant servir au quotidien pour des tâches très diversifiées. 
Dans de nombreux domaines explorés dans ce cours, `Python` est, de loin,
le langage informatique proposant l'écosystème le plus complet et le plus simple
d'accès.

Outre le _machine learning_ dont nous avons déjà parlé, `Python` est
incontournable dès lors qu'on désire récupérer des données par le biais 
d'API ou de _web scraping_[^js-webscraping], deux approches que nous explorerons
dans la première partie du cours. Dans les domaines de l'analyse de données tabulaires[^nlp-cv], 
de la publication de contenu web ou de la production de graphiques, `Python` présente un écosystème
de plus en plus similaire à {{< fa brands r-project >}} du fait de l'investissement croissant de [`Posit`](https://posit.co/),
l'entreprise à l'origine des principales librairies {{< fa brands r-project >}} pour la _data science_, dans la
communauté `Python`.

[^js-webscraping]: Dans ces deux domaines, le concurrent le plus sérieux pour `Python`
est `Javascript`. Néanmoins, la communauté autour de ce dernier langage est plus orientée
autour des problématiques de développement web que de _data science_.  

[^nlp-cv]: Les données tabulaires sont des données structurées, organisées,
comme leur nom l'indique, sous forme de tableau permettant de mettre en correspondance
des observations avec des variables. Cette structuration se distingue d'autres types
de données plus complexes: textes libres, images, sons, vidéos... Dans le domaine des données
non structurées, `Python` est le langage d'analyse hégémonique. Dans le domaine des données
tabulaires, l'avantage compétitif de `Python` est moindre, notamment par rapport à {{< fa brands r-project >}}, 
mais ces deux langages proposent un noyau de fonctionnalités assez similaires. Nous aurons
l'occasion de régulièrement faire le parallèle entre ces deux langages
lors des chapitres consacrés à la librairie `Pandas`. 

Néanmoins, il ne s'agit pas, par ces éléments, de rentrer dans la
guéguerre stérile  {{< fa brands r-project >}} vs `Python`. 
Ces deux langages ayant beaucoup plus de points de convergence que de divergence, 
il est très simple de transposer les bonnes
pratiques d'un
langage à l'autre. Il s'agit d'un point qui est développé plus amplement
dans le cours plus avancé que je donne avec Romain Avouac en dernière année
d'ENSAE : [ensae-reproductibilite.github.io/website](https://ensae-reproductibilite.github.io/website). 

A terme, les data scientists et chercheurs en sciences sociales ou 
économie utiliseront de manière presque indifférente, et en alternance, {{< fa brands r-project >}} ou `Python`.
Ce cours
présentera ainsi régulièrement des analogies avec {{< fa brands r-project >}} pour aider les
personnes découvrant `Python`, mais connaissant déjà bien {{< fa brands r-project >}}, à 
mieux comprendre certains messages.


# Objectif du cours

Ce cours s’adresse aux praticiens de la _data science_,
discipline entendue ici au sens large comme la combinaison de techniques issues des mathématiques, de la statistique et de l’informatique pour produire de la connaissance utile à partir de données. A la fois savoir scientifique et science pratique 

Comme la data science n’est pas qu’une discipline scientique mais vise à fournir un ensemble d’outils pour répondre à des objectifs opérationnels, la notion de mise en production est centrale pour les data scientists, qu’ils se trouvent dans le secteur privé ou public.

Le but de ce cours est de rendre autonome sur
l'utilisation de `Python`
dans un contexte de travail de *data scientist* ou de
*social scientist* (économie, sociologie, géographie...).
Autrement dit, 
il présuppose qu'on désire faire un usage intense
de données dans un cadre statistique rigoureux.

La _data science_ est un ensemble de techniques
visant à donner du sens à des sources de données
diverses.  

Selon les organisations,
les _data scientists_ peuvent ainsi être à 
l'interface de projets nécessitant un
large spectre de compétences 
(analyse
de données textuelles, représentation
graphique interactive...), 
avoir des interactions avec des profils
très différents (experts métiers,
développeurs, _data architect_,
_data engineer_...) voire adopter
un peu tous ces rôles.

Les innovations 
récentes de la _data science_ ne se réduisent
néanmoins 
pas qu'à des découvertes méthodologiques. 
La _data science_ propose un ensemble de
techniques et de méthodes de travail
pour réduire les coûts de passage 
d'un protype à une chaine
de production pérenne.
Ce cours introduit à quelques notions
sur le sujet, notamment les 
_pipelines_ `scikit`, pour adopter
dès l'apprentissage du langage
quelques bons réflexes ([ensae-reproductibilite.github.io/website](https://ensae-reproductibilite.github.io/website)).


## Public cible

Ce cours ne revient que de manière secondaire
sur les fondements statistiques ou algorithmiques
derrière certaines des techniques évoquées. 
Ne pas connaître ces notions n'empêche néanmoins pas de comprendre
le contenu de ce site *web*. En effet, la facilité d'usage de `Python`
évite de devoir programmer soi-même un modèle, ce qui rend
possible l'application
de modèles dont on n'est pas expert. La connaissance des modèles sera 
plutôt nécessaire dans l'interprétation des résultats.

Cependant, la facilité avec laquelle il est possible de construire des modèles complexes
avec `Python` peut laisser apparaître que connaître les spécifités de chaque
modèle est inutile. Il 
s'agirait d'une grave erreur : même si l'implémentation de modèles est aisée, il 
est nécessaire de bien comprendre la structure des données et leur adéquation
avec les hypothèses d'un modèle. 


## Reproductibilité

Ce cours donne une place centrale à 
la notion de reproductibilité. Cette exigence se traduit de diverses
manières dans cet enseignement, en particulier en insistant sur un
outil indispensable pour favoriser le partage de codes informatiques,
à savoir `Git`. 

L'ensemble du contenu du site *web* est reproductible dans des environnements
informatiques divers. Il est bien sûr possible de copier-coller les morceaux
de code présents dans ce site. Cette méthode montrant rapidement ses limites, 
le site présente un certain nombre de boutons disponibles pour
ouvrir la page sous un format `Jupyter Notebook` sur divers
pages *web* :

- Sur l'ensemble du site web,
il est possible de cliquer
sur la petite icone  {{< fa brands github >}}
pour être redirigé vers le dépôt `Github` associé à ce cours. 

- Un certain nombre de boutons permettent de transformer chaque
page web en `Jupyter Notebooks` s'il est nécessaire de
visualiser ou exécuter du code `Python`. 

Voici, par exemple, ces boutons pour le tutoriel `numpy` :

```{python}
#| echo: false
#| output: 'asis'
#| include: true
#| eval: true

import sys
sys.path.insert(1, '../../') #insert the utils module
from utils import print_badges

#print_badges(__file__)
print_badges("content/manipulation/01_numpy.qmd")
```

Pour les agents de la fonction publique, ou
les élèves des écoles partenaires, il est recommandé
de privilégier le bouton `SSPCloud` qui est
une infrastructure _cloud_ moderne, puissante et flexible
développée par l'Insee et accessible à l'url
[https://datalab.sspcloud.fr](https://datalab.sspcloud.fr/home)[^1].

[^1]: Pour les utilisateurs de cette infrastructure, les _notebooks_
sont également listés, parmi de nombreuses autres
ressources de qualité, sur la
[page `Formation`](https://www.sspcloud.fr/formation)


L'ensemble du contenu de ce site s'appuie sur des données
ouvertes, qu'il s'agisse de données françaises (principalement
issues de la plateforme
centralisatrice [`data.gouv`](https://www.data.gouv.fr) ou du site
_web_ de l'[Insee](https://www.insee.fr)) ou de données
américaines. Les résultats sont donc reproductibles pour quelqu'un
disposant d'un environnement identique.


## Architecture du site web

Ce cours présente
des tutoriels et des exercices complets.
Chaque page est structurée sous la forme
d'un problème concret et présente la
démarche générique pour résoudre ce problème général. 

Vous pouvez naviguer dans l'architecture du site via la table des matières
ou par les liens vers le contenu antérieur ou postérieur à la fin de chaque
page. Certaines parties, notamment celle consacrée à la modélisation,
proposent des exemples fil-rouge pour illustrer la démarche de manière
plus extensive.


## Evaluation

Les élèves de l'ENSAE valident le cours grâce à
un projet approfondi. 
Les éléments relatifs à l'évaluation du cours, ainsi qu'une
liste des projets déjà effectués, sont disponibles dans la
Section [Evaluation](annexes/evaluation).

## Références

::: {#refs}
:::

## Eléments supplémentaires

<div id="wcb" class="carbonbadge wcb-d"></div>
<script src="https://unpkg.com/website-carbon-badges@1.1.3/b.min.js" defer></script>

